precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, UInt16})
precompile(Tuple{typeof(Parsers.__init__)})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{Base.MPFR.BigFloat, 1}, Base.MPFR.BigFloat})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{Base.GMP.BigInt, 1}, Base.GMP.BigInt})
precompile(Tuple{typeof(Patchwork.include), String})
precompile(Tuple{typeof(SentinelArrays.__init__)})
precompile(Tuple{Core.var"#@doc", LineNumberNode, Module, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.CoreLogging.shouldlog), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, Module, Symbol, Symbol})
precompile(Tuple{typeof(Base.show), IO, Base.Docs.Binding})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Module, Char, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, Any, Any, Any, Any, Any, Any})
precompile(Tuple{Logging.var"##handle_message#2", Any, typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, Any, Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base.haskey), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Symbol})
precompile(Tuple{typeof(Base.get), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Symbol, Nothing})
precompile(Tuple{typeof(Logging.default_metafmt), Base.CoreLogging.LogLevel, Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base.string), Module})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.TTY})
precompile(Tuple{Base.var"##with_output_color#814", Bool, typeof(Base.with_output_color), Function, Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.write), Base.TTY, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Core.TypeofBottom})
precompile(Tuple{typeof(Base.vcat), Int64, Array{String, 1}})
precompile(Tuple{Core.var"#@cmd", LineNumberNode, Module, Any})
precompile(Tuple{Base.var"#@r_str", LineNumberNode, Module, Any, Vararg{Any, N} where N})
precompile(Tuple{Base.Multimedia.var"#@MIME_str", LineNumberNode, Module, Any})
precompile(Tuple{Type{NamedTuple{(:gap_open, :gap_extend), T} where T<:Tuple}, Tuple{Int64, Int64}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:gap_open, :gap_extend), Tuple{Int64, Int64}}, Type{BioAlignments.AffineGapScoreModel{T} where T}, BioAlignments.SubstitutionMatrix{BioSymbols.AminoAcid, Int64}})
precompile(Tuple{Base.var"#@inline", LineNumberNode, Module, Any})
precompile(Tuple{Base.var"#@assert", LineNumberNode, Module, Any, Vararg{Any, N} where N})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, BioAlignments.SubstitutionMatrix{BioSymbols.AminoAcid, Int64}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{String, BioAlignments.SubstitutionMatrix{BioSymbols.AminoAcid, Int64}}, Vararg{Base.Pair{String, BioAlignments.SubstitutionMatrix{BioSymbols.AminoAcid, Int64}}, N} where N})
precompile(Tuple{Type{Base.Dict{String, BioAlignments.SubstitutionMatrix{BioSymbols.AminoAcid, Int64}}}, Tuple{Base.Pair{String, BioAlignments.SubstitutionMatrix{BioSymbols.AminoAcid, Int64}}, Base.Pair{String, BioAlignments.SubstitutionMatrix{BioSymbols.AminoAcid, Int64}}, Base.Pair{String, BioAlignments.SubstitutionMatrix{BioSymbols.AminoAcid, Int64}}, Base.Pair{String, BioAlignments.SubstitutionMatrix{BioSymbols.AminoAcid, Int64}}, Base.Pair{String, BioAlignments.SubstitutionMatrix{BioSymbols.AminoAcid, Int64}}, Base.Pair{String, BioAlignments.SubstitutionMatrix{BioSymbols.AminoAcid, Int64}}, Base.Pair{String, BioAlignments.SubstitutionMatrix{BioSymbols.AminoAcid, Int64}}, Base.Pair{String, BioAlignments.SubstitutionMatrix{BioSymbols.AminoAcid, Int64}}}})
precompile(Tuple{typeof(Base.vect), Tuple{Int64, Int64}, Vararg{Tuple{Int64, Int64}, N} where N})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Array{Tuple{Int64, Int64}, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{String, Array{Tuple{Int64, Int64}, 1}}, Vararg{Base.Pair{String, Array{Tuple{Int64, Int64}, 1}}, N} where N})
precompile(Tuple{Type{Base.Dict{String, Array{Tuple{Int64, Int64}, 1}}}, Tuple{Base.Pair{String, Array{Tuple{Int64, Int64}, 1}}, Base.Pair{String, Array{Tuple{Int64, Int64}, 1}}, Base.Pair{String, Array{Tuple{Int64, Int64}, 1}}, Base.Pair{String, Array{Tuple{Int64, Int64}, 1}}, Base.Pair{String, Array{Tuple{Int64, Int64}, 1}}, Base.Pair{String, Array{Tuple{Int64, Int64}, 1}}, Base.Pair{String, Array{Tuple{Int64, Int64}, 1}}, Base.Pair{String, Array{Tuple{Int64, Int64}, 1}}}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Tuple{Int64, Int64}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{String, Tuple{Int64, Int64}}, Vararg{Base.Pair{String, Tuple{Int64, Int64}}, N} where N})
precompile(Tuple{Type{Base.Dict{String, Tuple{Int64, Int64}}}, Tuple{Base.Pair{String, Tuple{Int64, Int64}}, Base.Pair{String, Tuple{Int64, Int64}}, Base.Pair{String, Tuple{Int64, Int64}}, Base.Pair{String, Tuple{Int64, Int64}}, Base.Pair{String, Tuple{Int64, Int64}}, Base.Pair{String, Tuple{Int64, Int64}}, Base.Pair{String, Tuple{Int64, Int64}}, Base.Pair{String, Tuple{Int64, Int64}}}})
precompile(Tuple{typeof(Base.gensym)})
precompile(Tuple{typeof(Base.splice!), Array{Any, 1}, Int64, Array{Any, 1}})
precompile(Tuple{typeof(Base.Meta.isexpr), Any, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Base.Meta.isexpr), Any, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.:(==)), GlobalRef, GlobalRef})
precompile(Tuple{typeof(Base.getindex), Array{Any, 1}, Base.UnitRange{Int64}})
precompile(Tuple{Core.Compiler.var"#256#258"{DataType, Tuple{String, String, Bool}}, Int64})
precompile(Tuple{Core.Compiler.var"#256#258"{DataType, Tuple{Array{String, 1}, Char}}, Int64})
precompile(Tuple{Core.Compiler.var"#256#258"{DataType, Tuple{Parsers.var"#1#2", Bool}}, Int64})
precompile(Tuple{Base.Cartesian.var"#@ncall", LineNumberNode, Module, Int64, Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.getindex), Tuple, Base.UnitRange{Int64}})
precompile(Tuple{BioAlignments.var"##s3#1", Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Patchwork.julia_main)})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:description, :version, :add_version), Tuple{String, String, Bool}}, Symbol})
precompile(Tuple{typeof(Base.source_path)})
precompile(Tuple{typeof(Base.getindex), NamedTuple{(:description, :version, :add_version), Tuple{String, String, Bool}}, Symbol})
precompile(Tuple{Type{Base.Set{Char}}})
precompile(Tuple{typeof(Base.iterate), Base.Set{Char}})
precompile(Tuple{typeof(Base.convert), Type{AbstractString}, String})
precompile(Tuple{typeof(Base.convert), Type{Base.Set{Char}}, Base.Set{Char}})
precompile(Tuple{typeof(Base.copy), Array{ArgParse.ArgParseGroup, 1}})
precompile(Tuple{typeof(Base.convert), Type{Array{ArgParse.ArgParseGroup, 1}}, Array{ArgParse.ArgParseGroup, 1}})
precompile(Tuple{typeof(Base.getindex), Type{ArgParse.ArgParseField}})
precompile(Tuple{typeof(Base.convert), Type{Array{ArgParse.ArgParseField, 1}}, Array{ArgParse.ArgParseField, 1}})
precompile(Tuple{Type{Base.Dict{AbstractString, Any}}})
precompile(Tuple{typeof(Base.convert), Type{Base.Dict{AbstractString, Any}}, Base.Dict{AbstractString, Any}})
precompile(Tuple{typeof(Base.convert), Type{ArgParse.ArgParseTable}, ArgParse.ArgParseTable})
precompile(Tuple{typeof(Base.promote_typejoin), Any, Any})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, String}, Type{Symbol}, Type{Any}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, Any}, Base.Dict{Symbol, String}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, Bool}, Base.Pair{Symbol, DataType}, Base.Pair{Symbol, String}}, Int64})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Dict{Symbol, Any}})
precompile(Tuple{Type{NamedTuple{(:help, :metavar, :arg_type, :required), T} where T<:Tuple}, Tuple{String, String, DataType, Bool}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:help, :metavar, :arg_type, :required), Tuple{String, String, DataType, Bool}}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:help, :metavar, :arg_type, :required), Tuple{String, String, DataType, Bool}}})
precompile(Tuple{typeof(Base.keys), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:help, :metavar, :arg_type, :required), Tuple{String, String, DataType, Bool}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:help, :metavar, :arg_type, :required), Tuple{String, String, DataType, Bool}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, ArgParse.var"#24#26", Base.Dict{Symbol, Any}})
precompile(Tuple{Type{Base.Dict{Symbol, Bool}}, Base.Generator{Base.Dict{Symbol, Any}, ArgParse.var"#24#26"}})
precompile(Tuple{typeof(Base.indexed_iterate), Base.Pair{Symbol, Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Base.Pair{Symbol, Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(Base.convert), Type{Union{Int64, Symbol}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ArgConsumerType, Symbol})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ArgParseSettings, Symbol})
precompile(Tuple{typeof(Base.iterate), Base.Dict{Symbol, Bool}})
precompile(Tuple{typeof(Base.iterate), Base.Dict{Symbol, Bool}, Int64})
precompile(Tuple{typeof(Base.:(âˆ‰)), Symbol, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.getindex), Type{AbstractString}})
precompile(Tuple{typeof(Base.convert), Type{Array{AbstractString, 1}}, Array{AbstractString, 1}})
precompile(Tuple{typeof(Base.convert), Type{Type}, Type})
precompile(Tuple{typeof(Base.convert), Type{Symbol}, Symbol})
precompile(Tuple{typeof(Base.convert), Type{ArgParse.ArgConsumerType}, ArgParse.ArgConsumerType})
precompile(Tuple{typeof(Base.convert), Type{Union{AbstractString, Array{var"#s3", 1} where var"#s3"<:AbstractString}}, String})
precompile(Tuple{typeof(Base.in), Char, String})
precompile(Tuple{typeof(Base.occursin), Base.Regex, String})
precompile(Tuple{typeof(Base.push!), Array{AbstractString, 1}, String})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Array{AbstractString, 1}, Array{AbstractString, 1}, Array{AbstractString, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Array{AbstractString, 1}, Array{AbstractString, 1}, Array{AbstractString, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.isempty), Array{AbstractString, 1}})
precompile(Tuple{typeof(Base.getindex), Array{AbstractString, 1}, Int64})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, String})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, Array{AbstractString, 1}})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, ArgParse.ArgConsumerType})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, Symbol})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ArgParseField, Symbol})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ArgParseGroup, Symbol})
precompile(Tuple{typeof(Base.append!), Array{Symbol, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.:(âˆ‰)), Symbol, Tuple{Int64, Symbol, Symbol}})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ArgParseTable, Symbol})
precompile(Tuple{typeof(Base.keys), Base.Dict{AbstractString, Any}})
precompile(Tuple{typeof(Base.iterate), Base.KeySet{AbstractString, Base.Dict{AbstractString, Any}}})
precompile(Tuple{typeof(Base.iterate), Array{ArgParse.ArgParseField, 1}})
precompile(Tuple{typeof(Base.push!), Array{ArgParse.ArgParseField, 1}, ArgParse.ArgParseField})
precompile(Tuple{typeof(Base.iterate), Array{ArgParse.ArgParseField, 1}, Int64})
precompile(Tuple{typeof(Base.iterate), Array{AbstractString, 1}})
precompile(Tuple{typeof(Base.iterate), Array{AbstractString, 1}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, DataType}, Base.Pair{Symbol, String}, Base.Pair{Symbol, String}}, Int64})
precompile(Tuple{Type{NamedTuple{(:default, :help, :metavar, :arg_type), T} where T<:Tuple}, Tuple{String, String, String, DataType}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:default, :help, :metavar, :arg_type), Tuple{String, String, String, DataType}}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:default, :help, :metavar, :arg_type), Tuple{String, String, String, DataType}}})
precompile(Tuple{typeof(Base.keys), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:default, :help, :metavar, :arg_type), Tuple{String, String, String, DataType}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:default, :help, :metavar, :arg_type), Tuple{String, String, String, DataType}}}})
precompile(Tuple{typeof(Base.deepcopy), String})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, UnionAll}, Base.Pair{Symbol, Array{String, 1}}, Base.Pair{Symbol, String}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{String, 1}, Symbol})
precompile(Tuple{Type{NamedTuple{(:default, :help, :metavar, :arg_type), T} where T<:Tuple}, Tuple{Array{String, 1}, String, String, UnionAll}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:default, :help, :metavar, :arg_type), Tuple{Array{String, 1}, String, String, UnionAll}}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:default, :help, :metavar, :arg_type), Tuple{Array{String, 1}, String, String, UnionAll}}})
precompile(Tuple{typeof(Base.keys), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:default, :help, :metavar, :arg_type), Tuple{Array{String, 1}, String, String, UnionAll}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:default, :help, :metavar, :arg_type), Tuple{Array{String, 1}, String, String, UnionAll}}}})
precompile(Tuple{typeof(Base.deepcopy), Array{String, 1}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, DataType}, Base.Pair{Symbol, String}}, Int64})
precompile(Tuple{Type{NamedTuple{(:help, :metavar, :arg_type), T} where T<:Tuple}, Tuple{String, String, DataType}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:help, :metavar, :arg_type), Tuple{String, String, DataType}}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:help, :metavar, :arg_type), Tuple{String, String, DataType}}})
precompile(Tuple{typeof(Base.keys), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:help, :metavar, :arg_type), Tuple{String, String, DataType}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:help, :metavar, :arg_type), Tuple{String, String, DataType}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, String}, Base.Pair{Symbol, DataType}, Base.Pair{Symbol, String}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Char, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, Char}, Base.Pair{Symbol, DataType}, Base.Pair{Symbol, String}}, Int64})
precompile(Tuple{Type{NamedTuple{(:default, :help, :metavar, :arg_type), T} where T<:Tuple}, Tuple{Char, String, String, DataType}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:default, :help, :metavar, :arg_type), Tuple{Char, String, String, DataType}}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:default, :help, :metavar, :arg_type), Tuple{Char, String, String, DataType}}})
precompile(Tuple{typeof(Base.keys), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:default, :help, :metavar, :arg_type), Tuple{Char, String, String, DataType}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:default, :help, :metavar, :arg_type), Tuple{Char, String, String, DataType}}}})
precompile(Tuple{typeof(Base.deepcopy), Char})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{Symbol, String}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, Int64}, Base.Pair{Symbol, DataType}, Base.Pair{Symbol, String}}, Int64})
precompile(Tuple{Type{NamedTuple{(:default, :help, :metavar, :arg_type), T} where T<:Tuple}, Tuple{Int64, String, String, DataType}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:default, :help, :metavar, :arg_type), Tuple{Int64, String, String, DataType}}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:default, :help, :metavar, :arg_type), Tuple{Int64, String, String, DataType}}})
precompile(Tuple{typeof(Base.keys), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:default, :help, :metavar, :arg_type), Tuple{Int64, String, String, DataType}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:default, :help, :metavar, :arg_type), Tuple{Int64, String, String, DataType}}}})
precompile(Tuple{typeof(Base.deepcopy), Int64})
precompile(Tuple{typeof(Base.all), Function, Array{String, 1}})
precompile(Tuple{Base.var"##all#698", Function, typeof(Base.all), Function, Array{String, 1}})
precompile(Tuple{typeof(Base._all), ArgParse.var"#66#68", Array{String, 1}, Base.Colon})
precompile(Tuple{typeof(Base.isempty), Base.Set{Char}})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseSettings, Symbol, Bool})
precompile(Tuple{Type{NamedTuple{(:action, :help, :group), T} where T<:Tuple}, Tuple{Symbol, String, String}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:action, :help, :group), Tuple{Symbol, String, String}}})
precompile(Tuple{typeof(Base.keys), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:action, :help, :group), Tuple{Symbol, String, String}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:action, :help, :group), Tuple{Symbol, String, String}}}})
precompile(Tuple{typeof(Base.:(!=)), Symbol, Symbol})
precompile(Tuple{typeof(Base.first), Array{String, 1}})
precompile(Tuple{typeof(Base.foreach), ArgParse.var"#do_one#19"{ArgParse.ArgParseSettings, ArgParse.var"#r#18"{ArgParse.ArgParseSettings}, Array{AbstractString, 1}, Array{AbstractString, 1}, Array{AbstractString, 1}}, Array{String, 1}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, ArgParse.var"#61#63", Array{ArgParse.ArgParseGroup, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, ArgParse.var"#60#62", Base.Iterators.Filter{ArgParse.var"#61#63", Array{ArgParse.ArgParseGroup, 1}}})
precompile(Tuple{Type{Base.Dict{ArgParse.ArgParseGroup, AbstractString}}, Base.Generator{Base.Iterators.Filter{ArgParse.var"#61#63", Array{ArgParse.ArgParseGroup, 1}}, ArgParse.var"#60#62"}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Char, String})
precompile(Tuple{typeof(Base.convert), Type{Array{T, 1} where T}, Array{String, 1}})
precompile(Tuple{Type{Base.Set{AbstractString}}})
precompile(Tuple{typeof(Base.convert), Type{Base.Set{AbstractString}}, Base.Set{AbstractString}})
precompile(Tuple{typeof(Base.convert), Type{Base.Dict{ArgParse.ArgParseGroup, AbstractString}}, Base.Dict{ArgParse.ArgParseGroup, AbstractString}})
precompile(Tuple{typeof(Base.convert), Type{Base.Dict{String, Any}}, Base.Dict{String, Any}})
precompile(Tuple{Core.Compiler.var"#256#258"{DataType, Tuple{Nothing, Bool}}, Int64})
precompile(Tuple{Type{Base.Channel{T} where T}, Function})
precompile(Tuple{Base.var"##_#516", Nothing, Bool, Type{Base.Channel{Any}}, ArgParse.var"#67#69"{ArgParse.ArgParseSettings, ArgParse.ParserState}, Int64})
precompile(Tuple{Base.var"#517#518"{ArgParse.var"#67#69"{ArgParse.ArgParseSettings, ArgParse.ParserState}, Base.Channel{Any}}})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ParserState, Symbol})
precompile(Tuple{typeof(Base.isequal), Char})
precompile(Tuple{typeof(Base.findfirst), Function, String})
precompile(Tuple{typeof(Base.popfirst!), Array{String, 1}})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ParserState, Symbol, String})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, AbstractString}}, String})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ParserState, Symbol, Nothing})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Symbol})
precompile(Tuple{typeof(Base.iterate), Base.Channel{Any}})
precompile(Tuple{typeof(Base.convert), Type{ArgParse.ArgParseField}, ArgParse.ArgParseField})
precompile(Tuple{typeof(Base.iterate), Array{ArgParse.ArgParseGroup, 1}})
precompile(Tuple{typeof(Base.iterate), Array{ArgParse.ArgParseGroup, 1}, Int64})
precompile(Tuple{typeof(Base.haskey), Base.Dict{ArgParse.ArgParseGroup, AbstractString}, ArgParse.ArgParseGroup})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ParserState, Symbol, Bool})
precompile(Tuple{typeof(Base.push!), Base.Set{AbstractString}, String})
precompile(Tuple{Base.var"#521#522"{Base.Channel{Any}, Task}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, ArgParse.var"#37#40", Array{ArgParse.ArgParseGroup, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, ArgParse.var"#36#39", Base.Iterators.Filter{ArgParse.var"#37#40", Array{ArgParse.ArgParseGroup, 1}}})
precompile(Tuple{Type{Base.Dict{ArgParse.ArgParseGroup, Bool}}, Base.Generator{Base.Iterators.Filter{ArgParse.var"#37#40", Array{ArgParse.ArgParseGroup, 1}}, ArgParse.var"#36#39"}})
precompile(Tuple{typeof(Base.in), String, Base.Set{AbstractString}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{ArgParse.ArgParseGroup, Bool}, Bool, ArgParse.ArgParseGroup})
precompile(Tuple{typeof(Base.pop!), Array{ArgParse.ArgParseField, 1}})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ArgParseError, Symbol})
precompile(Tuple{Type{Base.Dict{String, Tuple{Bool, Array{String, 1}}}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, String}, Int64, Int64})
precompile(Tuple{typeof(Base.:(*)), String, String, String, String})
precompile(Tuple{typeof(Base.values), Base.Dict{String, Tuple{Bool, Array{String, 1}}}})
precompile(Tuple{typeof(Base.iterate), Base.ValueIterator{Base.Dict{String, Tuple{Bool, Array{String, 1}}}}})
precompile(Tuple{typeof(Base.join), Array{String, 1}, String})
precompile(Tuple{typeof(Base.:(*)), String, String, String, String, String})
precompile(Tuple{typeof(Base.min), Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:break_long_words, :break_on_hyphens, :subsequent_indent), T} where T<:Tuple}, Tuple{Bool, Bool, Int64}})
precompile(Tuple{TextWrap.var"#wrap##kw", NamedTuple{(:break_long_words, :break_on_hyphens, :subsequent_indent), Tuple{Bool, Bool, Int64}}, typeof(TextWrap.wrap), String})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Char, Char})
precompile(Tuple{typeof(Base.replace), String, Base.Pair{Char, Char}})
precompile(Tuple{typeof(Base.exit), Int64})
