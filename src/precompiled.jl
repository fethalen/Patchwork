precompile(Tuple{Base.Sort.var"##sortperm#12", Base.Sort.QuickSortAlg, Function, Function, Bool, Base.Order.ForwardOrdering, typeof(Base.sortperm), Array{Float64, 1}})
precompile(Tuple{Type{Base.Order.Perm{O, V} where V<:(AbstractArray{T, 1} where T) where O<:Base.Order.Ordering}, Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Base.Sort.QuickSortAlg, Base.Order.Perm{Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.:(!=)), UInt64, UInt64})
precompile(Tuple{typeof(Base.require), Module, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.IdDict{Base.Dict{String, Any}, Nothing}, Any, Any})
precompile(Tuple{typeof(Base.setindex!), Base.IdDict{Any, Nothing}, Any, Any})
precompile(Tuple{typeof(FilePathsBase.__init__)})
precompile(Tuple{typeof(Parsers.__init__)})
precompile(Tuple{typeof(SentinelArrays.__init__)})
precompile(Tuple{typeof(CSV.__init__)})
precompile(Tuple{Type{Base.Dict{Type, Type}}})
precompile(Tuple{Core.Compiler.var"#256#258"{DataType, Tuple{Parsers.var"#1#2", Bool}}, Int64})
precompile(Tuple{Type{CSV.Context}, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg})
precompile(Tuple{typeof(Base.convert), Type{Union{Base.Cmd, Base.CodeUnits{UInt8, String}, AbstractString, Array{UInt8, 1}, IO, FilePathsBase.AbstractPath, Base.SubArray{UInt8, 1, Array{UInt8, 1}, I, L} where L where I}}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.convert), Type{Union{Array{String, 1}, Array{Symbol, 1}, Integer, AbstractArray{var"#s99", 1} where var"#s99"<:Integer}}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Integer}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, Array{String, 1}, String}}, Array{String, 1}})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, Array{String, 1}, String}}, String})
precompile(Tuple{typeof(Base.convert), Type{Union{Char, UInt8}}, Char})
precompile(Tuple{typeof(Base.convert), Type{Union{Char, UInt8}}, UInt8})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, Array{String, 1}}}, Array{String, 1}})
precompile(Tuple{typeof(Base.convert), Type{Base.Dict{K, V} where V where K}, Base.Dict{Type, Type}})
precompile(Tuple{typeof(Base.convert), Type{Union{Function, Real, Tuple, Base.AbstractDict{K, V} where V where K, AbstractArray{T, 1} where T, Type}}, Tuple{Float64, Int64}})
precompile(Tuple{typeof(CSV.getsource), Any, Bool})
precompile(Tuple{typeof(CSV.getbytebuffer), Base.GenericIOBuffer{Array{UInt8, 1}}, Bool})
precompile(Tuple{typeof(CSV.detectheaderdatapos), Array{UInt8, 1}, Int64, Int64, UInt8, UInt8, UInt8, Any, Bool, Any, Int64})
precompile(Tuple{typeof(CSV.skiptorow), Array{UInt8, 1}, Int64, Int64, UInt8, UInt8, UInt8, Any, Bool, Int64, Int64})
precompile(Tuple{typeof(CSV.checkcommentandemptyline), Array{UInt8, 1}, Int64, Int64, Any, Bool, Base.RefValue{Int64}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Ptr{Nothing}, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Ptr{Nothing}, Int64}, Int64, Int64})
precompile(Tuple{typeof(CSV.skipemptyrow), Array{UInt8, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.getindex), Array{UInt8, 1}, Int64})
precompile(Tuple{typeof(CSV.detectdelimandguessrows), Array{UInt8, 1}, Int64, Int64, Int64, UInt8, UInt8, UInt8, Any, Bool, UInt8})
precompile(Tuple{typeof(Base.max), Int64, Int64})
precompile(Tuple{typeof(CSV.checkcommentandemptyline), Array{UInt8, 1}, Int64, Int64, Any, Bool})
precompile(Tuple{Type{Parsers.Options}, Base.Missing, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, Array{String, 1}, Array{String, 1}, Nothing, Bool, Bool, Nothing, Bool, Bool, Bool})
precompile(Tuple{typeof(CSV.detectcolumnnames), Array{UInt8, 1}, Int64, Int64, Int64, Parsers.Options, Any, Bool})
precompile(Tuple{typeof(CSV.readsplitline), Array{UInt8, 1}, Int64, Int64, Parsers.Options})
precompile(Tuple{typeof(CSV.columnname), Array{UInt8, 1}, Parsers.PosLen, Int16, Parsers.Options, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CSV.var"#10#13"{Bool}, Array{String, 1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{String, 1}, CSV.var"#10#13"{Bool}}})
precompile(Tuple{typeof(CSV.makeunique), Array{Symbol, 1}})
precompile(Tuple{Type{CSV.Column}, Type, Parsers.Options})
precompile(Tuple{typeof(Base.values), Base.Dict{Type, Type}})
precompile(Tuple{typeof(Base.iterate), Base.ValueIterator{Base.Dict{Type, Type}}})
precompile(Tuple{typeof(CSV.getpool), Tuple{Float64, Int64}})
precompile(Tuple{typeof(Base.setproperty!), CSV.Column, Symbol, Tuple{Float64, Int64}})
precompile(Tuple{typeof(Base.convert), Type{Union{Float64, Tuple{Float64, Int64}}}, Tuple{Float64, Int64}})
precompile(Tuple{typeof(CSV.getname), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, UInt64})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Type})
precompile(Tuple{Type{CSV.Context}, Bool, String, Array{Symbol, 1}, Int64, Int64, Array{UInt8, 1}, Int64, Int64, Int64, Parsers.Options, Array{CSV.Column, 1}, Tuple{Float64, Int64}, Bool, Type, Base.Dict{Type, Type}, Type{InlineStrings.InlineString}, Int64, Bool, Int64, Array{Int64, 1}, Bool, Bool, Int64, Bool, Nothing, Bool})
precompile(Tuple{typeof(Patchwork.include), String})
precompile(Tuple{Core.var"#@doc", LineNumberNode, Module, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.Docs.docm), LineNumberNode, Module, Any, Any})
precompile(Tuple{typeof(Base.Docs.splitexpr), Expr})
precompile(Tuple{Core.var"#@cmd", LineNumberNode, Module, Any})
precompile(Tuple{typeof(Base.vcat), Int64, Array{String, 1}})
precompile(Tuple{Base.var"#@assert", LineNumberNode, Module, Any, Vararg{Any, N} where N})
precompile(Tuple{Base.var"#@r_str", LineNumberNode, Module, Any, Vararg{Any, N} where N})
precompile(Tuple{Base.Multimedia.var"#@MIME_str", LineNumberNode, Module, Any})
precompile(Tuple{typeof(Base.string), Expr})
precompile(Tuple{typeof(Base.show_unquoted), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Expr, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.show_call), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Symbol, Symbol, Array{Any, 1}, Int64, Int64, Bool})
precompile(Tuple{Type{NamedTuple{(:gap_open, :gap_extend), T} where T<:Tuple}, Tuple{Int64, Int64}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:gap_open, :gap_extend), Tuple{Int64, Int64}}, Type{BioAlignments.AffineGapScoreModel{T} where T}, BioAlignments.SubstitutionMatrix{BioSymbols.AminoAcid, Int64}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, BioAlignments.SubstitutionMatrix{BioSymbols.AminoAcid, Int64}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{String, BioAlignments.SubstitutionMatrix{BioSymbols.AminoAcid, Int64}}, Vararg{Base.Pair{String, BioAlignments.SubstitutionMatrix{BioSymbols.AminoAcid, Int64}}, N} where N})
precompile(Tuple{Type{Base.Dict{String, BioAlignments.SubstitutionMatrix{BioSymbols.AminoAcid, Int64}}}, Tuple{Base.Pair{String, BioAlignments.SubstitutionMatrix{BioSymbols.AminoAcid, Int64}}, Base.Pair{String, BioAlignments.SubstitutionMatrix{BioSymbols.AminoAcid, Int64}}, Base.Pair{String, BioAlignments.SubstitutionMatrix{BioSymbols.AminoAcid, Int64}}, Base.Pair{String, BioAlignments.SubstitutionMatrix{BioSymbols.AminoAcid, Int64}}, Base.Pair{String, BioAlignments.SubstitutionMatrix{BioSymbols.AminoAcid, Int64}}, Base.Pair{String, BioAlignments.SubstitutionMatrix{BioSymbols.AminoAcid, Int64}}, Base.Pair{String, BioAlignments.SubstitutionMatrix{BioSymbols.AminoAcid, Int64}}, Base.Pair{String, BioAlignments.SubstitutionMatrix{BioSymbols.AminoAcid, Int64}}}})
precompile(Tuple{typeof(Base.vect), Tuple{Int64, Int64}, Vararg{Tuple{Int64, Int64}, N} where N})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Array{Tuple{Int64, Int64}, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{String, Array{Tuple{Int64, Int64}, 1}}, Vararg{Base.Pair{String, Array{Tuple{Int64, Int64}, 1}}, N} where N})
precompile(Tuple{Type{Base.Dict{String, Array{Tuple{Int64, Int64}, 1}}}, Tuple{Base.Pair{String, Array{Tuple{Int64, Int64}, 1}}, Base.Pair{String, Array{Tuple{Int64, Int64}, 1}}, Base.Pair{String, Array{Tuple{Int64, Int64}, 1}}, Base.Pair{String, Array{Tuple{Int64, Int64}, 1}}, Base.Pair{String, Array{Tuple{Int64, Int64}, 1}}, Base.Pair{String, Array{Tuple{Int64, Int64}, 1}}, Base.Pair{String, Array{Tuple{Int64, Int64}, 1}}, Base.Pair{String, Array{Tuple{Int64, Int64}, 1}}}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Tuple{Int64, Int64}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{String, Tuple{Int64, Int64}}, Vararg{Base.Pair{String, Tuple{Int64, Int64}}, N} where N})
precompile(Tuple{Type{Base.Dict{String, Tuple{Int64, Int64}}}, Tuple{Base.Pair{String, Tuple{Int64, Int64}}, Base.Pair{String, Tuple{Int64, Int64}}, Base.Pair{String, Tuple{Int64, Int64}}, Base.Pair{String, Tuple{Int64, Int64}}, Base.Pair{String, Tuple{Int64, Int64}}, Base.Pair{String, Tuple{Int64, Int64}}, Base.Pair{String, Tuple{Int64, Int64}}, Base.Pair{String, Tuple{Int64, Int64}}}})
precompile(Tuple{typeof(Artifacts._artifact_str), Module, String, Base.SubString{String}, String, Base.Dict{String, Any}, Base.SHA1, Base.BinaryPlatforms.Platform, Any})
precompile(Tuple{typeof(Base.invokelatest), Any})
precompile(Tuple{typeof(GR.__init__)})
precompile(Tuple{typeof(Base.stat), RelocatableFolders.Path})
precompile(Tuple{Base.var"##open#317", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), Base.var"#326#327"{String}, RelocatableFolders.Path})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, RelocatableFolders.Path})
precompile(Tuple{Base.var"##sprint#385", Nothing, Int64, typeof(Base.sprint), Function, RelocatableFolders.Path})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, RelocatableFolders.Path})
precompile(Tuple{typeof(Base.getindex), Base.EnvDict, String})
precompile(Tuple{typeof(ColorTypes.__init__)})
precompile(Tuple{typeof(DocStringExtensions.__init__)})
precompile(Tuple{typeof(Plots.__init__)})
precompile(Tuple{typeof(Base.foreach), Function, Array{Base.Dict{Symbol, Any}, 1}, Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Nothing, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Tuple{Int64, Int64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Base.Dict{Any, Any}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Float64, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.Font, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{Any, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{Float64, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Measures.Length{:mm, Float64}, Symbol})
precompile(Tuple{typeof(Plots.reset_axis_defaults_byletter!)})
precompile(Tuple{typeof(Base.copyto!), Array{Symbol, 1}, Base.KeySet{Symbol, Base.Dict{Symbol, Any}}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Symbol, Base.Dict{Symbol, Symbol}}, Symbol})
precompile(Tuple{typeof(Plots.treats_y_as_x), Symbol})
precompile(Tuple{typeof(Requires.isprecompiling)})
precompile(Tuple{typeof(ColorVectorSpace.__init__)})
precompile(Tuple{typeof(FreeTypeAbstraction.__init__)})
precompile(Tuple{typeof(Base.filter), typeof(Base.Filesystem.isdir), Array{String, 1}})
precompile(Tuple{typeof(FileIO.__init__)})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Base.PkgId, Array{Function, 1}}, Base.PkgId})
precompile(Tuple{typeof(Base.foreach), typeof(Base.invokelatest), Array{Function, 1}})
precompile(Tuple{Plots.var"#315#351"})
precompile(Tuple{typeof(Base.task_local_storage)})
precompile(Tuple{typeof(Base.haskey), Base.IdDict{Any, Any}, Symbol})
precompile(Tuple{Plots.var"#316#352"})
precompile(Tuple{Plots.var"#317#353"})
precompile(Tuple{typeof(Base.convert), Type{Base.CoreLogging.LogLevel}, Base.CoreLogging.LogLevel})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{Base.CoreLogging.LogLevel}})
precompile(Tuple{typeof(Base.:(>=)), Base.CoreLogging.LogLevel, Base.CoreLogging.LogLevel})
precompile(Tuple{typeof(Base.isassigned), Base.RefValue{Symbol}})
precompile(Tuple{typeof(Base.something), String, String})
precompile(Tuple{typeof(Base.setindex!), Base.RefValue{Symbol}, Symbol})
precompile(Tuple{typeof(Base.iterate), Array{Base.PkgId, 1}})
precompile(Tuple{typeof(Base.iterate), Array{Base.PkgId, 1}, Int64})
precompile(Tuple{typeof(UnicodePlots.__init__)})
precompile(Tuple{Plots.var"#306#342"})
precompile(Tuple{Plots.var"#307#343"})
precompile(Tuple{Plots.var"#308#344"})
precompile(Tuple{typeof(Plots.include), String})
precompile(Tuple{Type{NamedTuple{(:braille, :density, :heatmap, :lookup, :ascii, :block, :dot), T} where T<:Tuple}, Tuple{UnionAll, UnionAll, UnionAll, DataType, UnionAll, UnionAll, UnionAll}})
precompile(Tuple{Base.CoreLogging.var"#@warn", LineNumberNode, Module, Vararg{Any, N} where N})
precompile(Tuple{FileIO.var"#@format_str", LineNumberNode, Module, Any})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{Symbol}})
precompile(Tuple{DocStringExtensions.var"#32#33"{typeof(DocStringExtensions.template_hook)}, LineNumberNode, Vararg{Any, N} where N})
precompile(Tuple{typeof(DocStringExtensions.template_hook), LineNumberNode, Module, String, Expr})
precompile(Tuple{typeof(Base.gensym)})
precompile(Tuple{typeof(Base.splice!), Array{Any, 1}, Int64, Array{Any, 1}})
precompile(Tuple{typeof(Base.Meta.isexpr), Any, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Base.Meta.isexpr), Any, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.:(==)), GlobalRef, GlobalRef})
precompile(Tuple{Core.Compiler.var"#256#258"{DataType, Tuple{String, String, Bool}}, Int64})
precompile(Tuple{typeof(Base._compute_eltype), Any})
precompile(Tuple{Core.Compiler.var"#256#258"{DataType, Tuple{Tuple{String}}}, Int64})
precompile(Tuple{Core.Compiler.var"#256#258"{DataType, Tuple{Array{String, 1}, Char}}, Int64})
precompile(Tuple{Base.Cartesian.var"#@ncall", LineNumberNode, Module, Int64, Any, Vararg{Any, N} where N})
precompile(Tuple{BioAlignments.var"##s3#1", Any, Any, Any, Any, Any})
precompile(Tuple{Core.Compiler.var"#256#258"{DataType, Tuple{String}}, Int64})
precompile(Tuple{Base.var"##s77#169", Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base.merge_types), Tuple{Vararg{Symbol, N} where N}, Type{var"#s77"} where var"#s77"<:(NamedTuple{names, T} where T<:Tuple where names), Type{var"#s76"} where var"#s76"<:(NamedTuple{names, T} where T<:Tuple where names)})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Type{Tuple{4, 4}}})
precompile(Tuple{typeof(StaticArrays._Length), Int64, Vararg{Int64, N} where N})
precompile(Tuple{StaticArrays.var"##s26#91", Any, Any, Any, Any})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, StaticArrays.var"#92#93", Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, StaticArrays.var"#92#93"}})
precompile(Tuple{Base.var"#@_inline_meta", LineNumberNode, Module})
precompile(Tuple{StaticArrays.var"##s26#34", Any, Any, Any, Any, Any, Any})
precompile(Tuple{StaticArrays.var"##s26#6", Any, Any, Any, Any, Any, Type, Type, Type, Any})
precompile(Tuple{typeof(Base.all), Function, Core.SimpleVector})
precompile(Tuple{typeof(Base._all), StaticArrays.var"#7#8", Core.SimpleVector, Base.Colon})
precompile(Tuple{typeof(StaticArrays.tuple_prod), Type{Tuple{4, 4}}})
precompile(Tuple{typeof(Base.length), Core.SimpleVector})
precompile(Tuple{typeof(StaticArrays.tuple_minimum), Type{Tuple{4, 4}}})
precompile(Tuple{typeof(Base.minimum), Tuple{Int64, Int64}})
precompile(Tuple{typeof(StaticArrays.tuple_length), Type{Tuple{4, 4}}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Type{Tuple{3}}})
precompile(Tuple{typeof(Base.:(*)), Int64})
precompile(Tuple{typeof(StaticArrays.tuple_prod), Type{Tuple{3}}})
precompile(Tuple{typeof(StaticArrays.tuple_minimum), Type{Tuple{3}}})
precompile(Tuple{typeof(Base.minimum), Tuple{Int64}})
precompile(Tuple{typeof(StaticArrays.tuple_length), Type{Tuple{3}}})
precompile(Tuple{Core.Compiler.var"#256#258"{DataType, Tuple{String, String, Float64, Bool}}, Int64})
precompile(Tuple{StaticArrays.var"##s26#2", Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base.ntuple), StaticArrays.var"#3#4", Base.Val{3}})
precompile(Tuple{StaticArrays.var"##s26#304", Any, Any, Any, Any})
precompile(Tuple{typeof(Base.Iterators.product), Base.UnitRange{Int64}, Vararg{Base.UnitRange{Int64}, N} where N})
precompile(Tuple{Type{Base.Iterators.ProductIterator{T} where T<:Tuple}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base._array_for), Type{Symbol}, Base.Iterators.ProductIterator{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, Base.HasShape{2}})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Array{Symbol, 2}})
precompile(Tuple{typeof(Base.setindex!), Array{Symbol, 2}, Symbol, Int64})
precompile(Tuple{typeof(Base.ntuple), StaticArrays.var"#3#4", Base.Val{16}})
precompile(Tuple{Base.var"##s814#470", Any, Any, Any, Any, Any, Any, Any, Any})
precompile(Tuple{Base.Cartesian.var"#@nloops", LineNumberNode, Module, Any, Any, Any, Vararg{Any, N} where N})
precompile(Tuple{Base.Cartesian.var"#@nref", LineNumberNode, Module, Int64, Symbol, Any})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Int64})
precompile(Tuple{StaticArrays.var"##s26#12", Any, Any, Any, Any})
precompile(Tuple{typeof(StaticArrays.tuple_length), Type{Tuple{0}}})
precompile(Tuple{typeof(StaticArrays.tuple_prod), Type{Tuple{0}}})
precompile(Tuple{typeof(StaticArrays.tuple_minimum), Type{Tuple{0}}})
precompile(Tuple{StaticArrays.var"##s26#32", Any, Any, Any, Any, Any})
precompile(Tuple{StaticArrays.var"##s26#5", Any, Any, Any})
precompile(Tuple{typeof(Core.Compiler.widenconst), TypeVar})
precompile(Tuple{Type{Base.Broadcast.BroadcastStyle}, Base.Broadcast.DefaultArrayStyle{0}, StaticArrays.StaticArrayStyle{1}})
precompile(Tuple{typeof(Base.typename), DataType})
precompile(Tuple{typeof(StaticArrays.tuple_prod), Type{Tuple{4, 2}}})
precompile(Tuple{typeof(StaticArrays.tuple_minimum), Type{Tuple{4, 2}}})
precompile(Tuple{typeof(StaticArrays.tuple_length), Type{Tuple{4, 2}}})
precompile(Tuple{typeof(Base.ntuple), StaticArrays.var"#3#4", Base.Val{8}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Type{Tuple{4, 2}}})
precompile(Tuple{StaticArrays.var"##s26#128", Any, Any, Any, Any, Any})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.getindex), StaticArrays.Size{(4, 4)}, Int64})
precompile(Tuple{Base.var"#@_propagate_inbounds_meta", LineNumberNode, Module})
precompile(Tuple{typeof(Base.getindex), StaticArrays.Size{(4, 2)}, Int64})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Type{Tuple{4}}})
precompile(Tuple{typeof(StaticArrays.tuple_prod), Type{Tuple{4}}})
precompile(Tuple{typeof(StaticArrays.tuple_minimum), Type{Tuple{4}}})
precompile(Tuple{typeof(StaticArrays.tuple_length), Type{Tuple{4}}})
precompile(Tuple{typeof(Base.ntuple), StaticArrays.var"#3#4", Base.Val{4}})
precompile(Tuple{typeof(Base.supertype), DataType})
precompile(Tuple{typeof(Base.isabstracttype), Any})
precompile(Tuple{typeof(ColorTypes.basetype), Any})
precompile(Tuple{StaticArrays.var"##s26#51", Any, Any, Any, Any, Any})
precompile(Tuple{StaticArrays.var"##s26#129", Any, Any, Any, Any, Any, Any})
precompile(Tuple{Core.Compiler.var"#256#258"{DataType, Tuple{String, String, Float64, Bool, Symbol}}, Int64})
precompile(Tuple{Core.Compiler.var"#256#258"{DataType, Tuple{Symbol, String, String}}, Int64})
precompile(Tuple{Core.Compiler.var"#256#258"{DataType, Tuple{Symbol, String, String, Symbol}}, Int64})
precompile(Tuple{typeof(Patchwork.julia_main)})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:description, :version, :add_version), Tuple{String, String, Bool}}, Symbol})
precompile(Tuple{typeof(Base.source_path)})
precompile(Tuple{typeof(Base.getindex), NamedTuple{(:description, :version, :add_version), Tuple{String, String, Bool}}, Symbol})
precompile(Tuple{Type{Base.Set{Char}}})
precompile(Tuple{typeof(Base.iterate), Base.Set{Char}})
precompile(Tuple{typeof(Base.convert), Type{AbstractString}, String})
precompile(Tuple{typeof(Base.convert), Type{Base.Set{Char}}, Base.Set{Char}})
precompile(Tuple{typeof(Base.copy), Array{ArgParse.ArgParseGroup, 1}})
precompile(Tuple{typeof(Base.convert), Type{Array{ArgParse.ArgParseGroup, 1}}, Array{ArgParse.ArgParseGroup, 1}})
precompile(Tuple{typeof(Base.getindex), Type{ArgParse.ArgParseField}})
precompile(Tuple{typeof(Base.convert), Type{Array{ArgParse.ArgParseField, 1}}, Array{ArgParse.ArgParseField, 1}})
precompile(Tuple{Type{Base.Dict{AbstractString, Any}}})
precompile(Tuple{typeof(Base.convert), Type{Base.Dict{AbstractString, Any}}, Base.Dict{AbstractString, Any}})
precompile(Tuple{typeof(Base.convert), Type{ArgParse.ArgParseTable}, ArgParse.ArgParseTable})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, String}, Type{Symbol}, Type{Any}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, Any}, Base.Dict{Symbol, String}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, DataType}, Base.Pair{Symbol, Char}, Base.Pair{Symbol, String}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Char, Symbol})
precompile(Tuple{Type{NamedTuple{(:nargs, :help, :metavar, :arg_type), T} where T<:Tuple}, Tuple{Char, String, String, DataType}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:nargs, :help, :metavar, :arg_type), Tuple{Char, String, String, DataType}}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:nargs, :help, :metavar, :arg_type), Tuple{Char, String, String, DataType}}})
precompile(Tuple{typeof(Base.keys), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:nargs, :help, :metavar, :arg_type), Tuple{Char, String, String, DataType}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:nargs, :help, :metavar, :arg_type), Tuple{Char, String, String, DataType}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, ArgParse.var"#24#26", Base.Dict{Symbol, Any}})
precompile(Tuple{Type{Base.Dict{Symbol, Bool}}, Base.Generator{Base.Dict{Symbol, Any}, ArgParse.var"#24#26"}})
precompile(Tuple{typeof(Base.indexed_iterate), Base.Pair{Symbol, Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Base.Pair{Symbol, Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ArgParseSettings, Symbol})
precompile(Tuple{typeof(Base.iterate), Base.Dict{Symbol, Bool}})
precompile(Tuple{typeof(Base.iterate), Base.Dict{Symbol, Bool}, Int64})
precompile(Tuple{Type{Symbol}, Char, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.convert), Type{Union{Int64, Symbol}}, Symbol})
precompile(Tuple{typeof(Base.:(∉)), Symbol, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ArgConsumerType, Symbol})
precompile(Tuple{typeof(Base.getindex), Type{AbstractString}})
precompile(Tuple{typeof(Base.convert), Type{Array{AbstractString, 1}}, Array{AbstractString, 1}})
precompile(Tuple{typeof(Base.convert), Type{Type}, Type})
precompile(Tuple{typeof(Base.convert), Type{Symbol}, Symbol})
precompile(Tuple{typeof(Base.convert), Type{ArgParse.ArgConsumerType}, ArgParse.ArgConsumerType})
precompile(Tuple{typeof(Base.convert), Type{Union{AbstractString, Array{var"#s4", 1} where var"#s4"<:AbstractString}}, String})
precompile(Tuple{typeof(Base.in), Char, String})
precompile(Tuple{typeof(Base.occursin), Base.Regex, String})
precompile(Tuple{typeof(Base.push!), Array{AbstractString, 1}, String})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Array{AbstractString, 1}, Array{AbstractString, 1}, Array{AbstractString, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Array{AbstractString, 1}, Array{AbstractString, 1}, Array{AbstractString, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.isempty), Array{AbstractString, 1}})
precompile(Tuple{typeof(Base.getindex), Array{AbstractString, 1}, Int64})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, String})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, Array{AbstractString, 1}})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, ArgParse.ArgConsumerType})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, Symbol})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ArgParseField, Symbol})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ArgParseGroup, Symbol})
precompile(Tuple{typeof(Base.append!), Array{Symbol, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.:(∉)), Symbol, Tuple{Int64, Symbol, Symbol}})
precompile(Tuple{Type{Array{String, N} where N}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, Array{String, 1}})
precompile(Tuple{typeof(Base.convert), Type{Any}, Array{String, 1}})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ArgParseTable, Symbol})
precompile(Tuple{typeof(Base.keys), Base.Dict{AbstractString, Any}})
precompile(Tuple{typeof(Base.iterate), Base.KeySet{AbstractString, Base.Dict{AbstractString, Any}}})
precompile(Tuple{typeof(Base.iterate), Array{ArgParse.ArgParseField, 1}})
precompile(Tuple{typeof(Base.push!), Array{ArgParse.ArgParseField, 1}, ArgParse.ArgParseField})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, Bool}, Base.Pair{Symbol, DataType}, Base.Pair{Symbol, Char}, Base.Pair{Symbol, String}}, Int64})
precompile(Tuple{Type{NamedTuple{(:nargs, :help, :metavar, :arg_type, :required), T} where T<:Tuple}, Tuple{Char, String, String, DataType, Bool}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:nargs, :help, :metavar, :arg_type, :required), Tuple{Char, String, String, DataType, Bool}}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:nargs, :help, :metavar, :arg_type, :required), Tuple{Char, String, String, DataType, Bool}}})
precompile(Tuple{typeof(Base.keys), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:nargs, :help, :metavar, :arg_type, :required), Tuple{Char, String, String, DataType, Bool}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:nargs, :help, :metavar, :arg_type, :required), Tuple{Char, String, String, DataType, Bool}}}})
precompile(Tuple{typeof(Base.iterate), Array{ArgParse.ArgParseField, 1}, Int64})
precompile(Tuple{typeof(Base.iterate), Array{AbstractString, 1}})
precompile(Tuple{typeof(Base.iterate), Array{AbstractString, 1}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, DataType}, Base.Pair{Symbol, String}, Base.Pair{Symbol, String}}, Int64})
precompile(Tuple{Type{NamedTuple{(:default, :help, :metavar, :arg_type), T} where T<:Tuple}, Tuple{String, String, String, DataType}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:default, :help, :metavar, :arg_type), Tuple{String, String, String, DataType}}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:default, :help, :metavar, :arg_type), Tuple{String, String, String, DataType}}})
precompile(Tuple{typeof(Base.keys), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:default, :help, :metavar, :arg_type), Tuple{String, String, String, DataType}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:default, :help, :metavar, :arg_type), Tuple{String, String, String, DataType}}}})
precompile(Tuple{typeof(Base.deepcopy), String})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, DataType}, Base.Pair{Symbol, Array{String, 1}}, Base.Pair{Symbol, String}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{String, 1}, Symbol})
precompile(Tuple{Type{NamedTuple{(:default, :help, :metavar, :arg_type), T} where T<:Tuple}, Tuple{Array{String, 1}, String, String, DataType}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:default, :help, :metavar, :arg_type), Tuple{Array{String, 1}, String, String, DataType}}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:default, :help, :metavar, :arg_type), Tuple{Array{String, 1}, String, String, DataType}}})
precompile(Tuple{typeof(Base.keys), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:default, :help, :metavar, :arg_type), Tuple{Array{String, 1}, String, String, DataType}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:default, :help, :metavar, :arg_type), Tuple{Array{String, 1}, String, String, DataType}}}})
precompile(Tuple{typeof(Base.deepcopy), Array{String, 1}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, DataType}, Base.Pair{Symbol, String}}, Int64})
precompile(Tuple{Type{NamedTuple{(:help, :metavar, :arg_type), T} where T<:Tuple}, Tuple{String, String, DataType}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:help, :metavar, :arg_type), Tuple{String, String, DataType}}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:help, :metavar, :arg_type), Tuple{String, String, DataType}}})
precompile(Tuple{typeof(Base.keys), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:help, :metavar, :arg_type), Tuple{String, String, DataType}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:help, :metavar, :arg_type), Tuple{String, String, DataType}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, Symbol}}, Int64})
precompile(Tuple{Type{NamedTuple{(:help, :action), T} where T<:Tuple}, Tuple{String, Symbol}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:help, :action), Tuple{String, Symbol}}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:help, :action), Tuple{String, Symbol}}})
precompile(Tuple{typeof(Base.keys), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:help, :action), Tuple{String, Symbol}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:help, :action), Tuple{String, Symbol}}}})
precompile(Tuple{typeof(Base.:(!=)), Symbol, Symbol})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, Type})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, Bool})
precompile(Tuple{typeof(Base.convert), Type{Any}, Bool})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, DataType}, Base.Pair{Symbol, Int64}, Base.Pair{Symbol, String}}, Int64})
precompile(Tuple{Type{NamedTuple{(:default, :help, :metavar, :arg_type), T} where T<:Tuple}, Tuple{Int64, String, String, DataType}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:default, :help, :metavar, :arg_type), Tuple{Int64, String, String, DataType}}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:default, :help, :metavar, :arg_type), Tuple{Int64, String, String, DataType}}})
precompile(Tuple{typeof(Base.keys), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:default, :help, :metavar, :arg_type), Tuple{Int64, String, String, DataType}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:default, :help, :metavar, :arg_type), Tuple{Int64, String, String, DataType}}}})
precompile(Tuple{typeof(Base.deepcopy), Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, DataType}, Base.Pair{Symbol, Float64}, Base.Pair{Symbol, String}}, Int64})
precompile(Tuple{Type{NamedTuple{(:default, :help, :metavar, :arg_type), T} where T<:Tuple}, Tuple{Float64, String, String, DataType}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:default, :help, :metavar, :arg_type), Tuple{Float64, String, String, DataType}}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:default, :help, :metavar, :arg_type), Tuple{Float64, String, String, DataType}}})
precompile(Tuple{typeof(Base.keys), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:default, :help, :metavar, :arg_type), Tuple{Float64, String, String, DataType}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:default, :help, :metavar, :arg_type), Tuple{Float64, String, String, DataType}}}})
precompile(Tuple{typeof(Base.deepcopy), Float64})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{Symbol, String}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, Int64}, Base.Pair{Symbol, DataType}, Base.Pair{Symbol, String}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, Char}, Base.Pair{Symbol, DataType}, Base.Pair{Symbol, String}}, Int64})
precompile(Tuple{Type{NamedTuple{(:default, :help, :metavar, :arg_type), T} where T<:Tuple}, Tuple{Char, String, String, DataType}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:default, :help, :metavar, :arg_type), Tuple{Char, String, String, DataType}}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:default, :help, :metavar, :arg_type), Tuple{Char, String, String, DataType}}})
precompile(Tuple{typeof(Base.keys), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:default, :help, :metavar, :arg_type), Tuple{Char, String, String, DataType}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:default, :help, :metavar, :arg_type), Tuple{Char, String, String, DataType}}}})
precompile(Tuple{typeof(Base.deepcopy), Char})
precompile(Tuple{typeof(Base.all), Function, Array{String, 1}})
precompile(Tuple{Base.var"##all#698", Function, typeof(Base.all), Function, Array{String, 1}})
precompile(Tuple{typeof(Base._all), ArgParse.var"#66#68", Array{String, 1}, Base.Colon})
precompile(Tuple{typeof(Base.isempty), Base.Set{Char}})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseSettings, Symbol, Bool})
precompile(Tuple{Type{NamedTuple{(:action, :help, :group), T} where T<:Tuple}, Tuple{Symbol, String, String}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:action, :help, :group), Tuple{Symbol, String, String}}})
precompile(Tuple{typeof(Base.keys), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:action, :help, :group), Tuple{Symbol, String, String}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:action, :help, :group), Tuple{Symbol, String, String}}}})
precompile(Tuple{typeof(Base.first), Array{String, 1}})
precompile(Tuple{typeof(Base.foreach), ArgParse.var"#do_one#19"{ArgParse.ArgParseSettings, ArgParse.var"#r#18"{ArgParse.ArgParseSettings}, Array{AbstractString, 1}, Array{AbstractString, 1}, Array{AbstractString, 1}}, Array{String, 1}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, ArgParse.var"#61#63", Array{ArgParse.ArgParseGroup, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, ArgParse.var"#60#62", Base.Iterators.Filter{ArgParse.var"#61#63", Array{ArgParse.ArgParseGroup, 1}}})
precompile(Tuple{Type{Base.Dict{ArgParse.ArgParseGroup, AbstractString}}, Base.Generator{Base.Iterators.Filter{ArgParse.var"#61#63", Array{ArgParse.ArgParseGroup, 1}}, ArgParse.var"#60#62"}})
precompile(Tuple{typeof(Base.deepcopy), Bool})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Char, String})
precompile(Tuple{typeof(Base.convert), Type{Array{T, 1} where T}, Array{String, 1}})
precompile(Tuple{Type{Base.Set{AbstractString}}})
precompile(Tuple{typeof(Base.convert), Type{Base.Set{AbstractString}}, Base.Set{AbstractString}})
precompile(Tuple{typeof(Base.convert), Type{Base.Dict{ArgParse.ArgParseGroup, AbstractString}}, Base.Dict{ArgParse.ArgParseGroup, AbstractString}})
precompile(Tuple{typeof(Base.convert), Type{Base.Dict{String, Any}}, Base.Dict{String, Any}})
precompile(Tuple{Core.Compiler.var"#256#258"{DataType, Tuple{Nothing, Bool}}, Int64})
precompile(Tuple{Type{Base.Channel{T} where T}, Function})
precompile(Tuple{Base.var"##_#516", Nothing, Bool, Type{Base.Channel{Any}}, ArgParse.var"#67#69"{ArgParse.ArgParseSettings, ArgParse.ParserState}, Int64})
precompile(Tuple{Base.var"#517#518"{ArgParse.var"#67#69"{ArgParse.ArgParseSettings, ArgParse.ParserState}, Base.Channel{Any}}})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ParserState, Symbol})
precompile(Tuple{typeof(Base.isequal), Char})
precompile(Tuple{typeof(Base.findfirst), Function, String})
precompile(Tuple{typeof(Base.popfirst!), Array{String, 1}})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ParserState, Symbol, String})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, AbstractString}}, String})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ParserState, Symbol, Nothing})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Symbol})
precompile(Tuple{typeof(Base.iterate), Base.Channel{Any}})
precompile(Tuple{typeof(Base.convert), Type{ArgParse.ArgParseField}, ArgParse.ArgParseField})
precompile(Tuple{typeof(Base.iterate), Array{ArgParse.ArgParseGroup, 1}})
precompile(Tuple{typeof(Base.iterate), Array{ArgParse.ArgParseGroup, 1}, Int64})
precompile(Tuple{typeof(Base.haskey), Base.Dict{ArgParse.ArgParseGroup, AbstractString}, ArgParse.ArgParseGroup})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ParserState, Symbol, Bool})
precompile(Tuple{typeof(Base.push!), Base.Set{AbstractString}, String})
precompile(Tuple{Base.var"#521#522"{Base.Channel{Any}, Task}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, ArgParse.var"#37#40", Array{ArgParse.ArgParseGroup, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, ArgParse.var"#36#39", Base.Iterators.Filter{ArgParse.var"#37#40", Array{ArgParse.ArgParseGroup, 1}}})
precompile(Tuple{Type{Base.Dict{ArgParse.ArgParseGroup, Bool}}, Base.Generator{Base.Iterators.Filter{ArgParse.var"#37#40", Array{ArgParse.ArgParseGroup, 1}}, ArgParse.var"#36#39"}})
precompile(Tuple{typeof(Base.in), String, Base.Set{AbstractString}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{ArgParse.ArgParseGroup, Bool}, Bool, ArgParse.ArgParseGroup})
precompile(Tuple{typeof(Base.iterate), Base.Dict{ArgParse.ArgParseGroup, Bool}})
precompile(Tuple{typeof(Base.indexed_iterate), Base.Pair{ArgParse.ArgParseGroup, Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Base.Pair{ArgParse.ArgParseGroup, Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Dict{ArgParse.ArgParseGroup, Bool}, Int64})
precompile(Tuple{typeof(Base.any), Function, Array{ArgParse.ArgParseField, 1}})
precompile(Tuple{Base.var"##any#696", Function, typeof(Base.any), Function, Array{ArgParse.ArgParseField, 1}})
precompile(Tuple{typeof(Base._any), typeof(ArgParse.is_cmd), Array{ArgParse.ArgParseField, 1}, Base.Colon})
precompile(Tuple{typeof(Base.pop!), Array{ArgParse.ArgParseField, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.DevNull, Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.DevNull, Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.setup_stdio), Base.TTY, Bool})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.TTY, Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.TTY, Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.rawhandle), Base.TTY})
precompile(Tuple{typeof(Base.read), Base.PipeEndpoint})
precompile(Tuple{typeof(Base.getindex), Base.Dict{String, Tuple{Int64, Int64}}, String})
precompile(Tuple{typeof(Patchwork.checkgappenalty), String, Int64, Int64})
precompile(Tuple{typeof(Patchwork.isdiamonddatabase), String})
precompile(Tuple{typeof(Base.string), Int64})
precompile(Tuple{typeof(Base.push!), Array{String, 1}, String, String})
precompile(Tuple{typeof(Patchwork.countsequences), String})
precompile(Tuple{typeof(Base.Iterators.only), Array{String, 1}})
precompile(Tuple{DataFrames.var"##make_unique!#1", Bool, typeof(DataFrames.make_unique!), Array{Symbol, 1}, Array{Symbol, 1}})
precompile(Tuple{DataFrames.var"#DataFrame#152#154", Bool, Type{DataFrames.DataFrame}, Array{Any, 1}, DataFrames.Index})
precompile(Tuple{typeof(Base.length), Array{Float64, 1}})
precompile(Tuple{typeof(DataFrames._preprocess_column), Array{String, 1}, Int64, Bool})
precompile(Tuple{typeof(DataFrames._preprocess_column), Array{Int64, 1}, Int64, Bool})
precompile(Tuple{typeof(DataFrames._preprocess_column), Array{Float64, 1}, Int64, Bool})
precompile(Tuple{typeof(Base.firstindex), Array{String, 1}})
precompile(Tuple{typeof(Base.firstindex), Array{Int64, 1}})
precompile(Tuple{typeof(Base.firstindex), Array{Float64, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{var"#s813", 1} where var"#s813", 1}, Array{String, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{var"#s813", 1} where var"#s813", 1}, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{var"#s813", 1} where var"#s813", 1}, Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.Filesystem.isdir), String})
precompile(Tuple{typeof(Base.Filesystem.readdir), String})
precompile(Tuple{typeof(Base.map), Function, Array{String, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.Filesystem.mkpath), Array{String, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{String, 1}, Base.Generator{Array{String, 1}, typeof(Base.Filesystem.mkpath)}})
precompile(Tuple{typeof(Patchwork.diamond_makeblastdb), String, String, Array{String, 1}})
precompile(Tuple{typeof(Base.setup_stdio), Base.FileRedirect, Bool})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.Filesystem.File, Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.Filesystem.File, Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.setup_stdio), Base.Filesystem.File, Bool})
precompile(Tuple{typeof(Base.rawhandle), Base.Filesystem.File})
precompile(Tuple{typeof(Base.close_stdio), Base.Filesystem.File})
precompile(Tuple{typeof(Base.convert), Type{Array{String, 1}}, Array{String, 1}})
precompile(Tuple{typeof(Patchwork.diamond_blastx), String, String, String, Array{String, 1}})
precompile(Tuple{typeof(Base.arg_gen), Array{Any, 1}})
precompile(Tuple{typeof(Base.cmd_interpolate), Int64})
precompile(Tuple{typeof(Base.cmd_interpolate), String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.map), typeof(Base.cmd_interpolate1), Tuple{String}})
precompile(Tuple{typeof(Base.cstr), String})
precompile(Tuple{typeof(Patchwork.readblastTSV), String})
precompile(Tuple{typeof(Base.convert), Type{Union{Base.Cmd, Base.CodeUnits{UInt8, String}, AbstractString, Array{UInt8, 1}, IO, FilePathsBase.AbstractPath, Base.SubArray{UInt8, 1, Array{UInt8, 1}, I, L} where L where I}}, String})
precompile(Tuple{typeof(Base.convert), Type{Union{Array{String, 1}, Array{Symbol, 1}, Integer, AbstractArray{var"#s99", 1} where var"#s99"<:Integer}}, Array{String, 1}})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, Char, UInt8, String}}, Char})
precompile(Tuple{typeof(CSV.checkvaliddelim), Char})
precompile(Tuple{typeof(CSV.getbytebuffer), String, Bool})
precompile(Tuple{Base.var"##open#317", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), Mmap.var"#7#8"{Array{UInt8, 1}, Bool, Bool, Tuple{Int64}, Int64}, String, Vararg{String, N} where N})
precompile(Tuple{typeof(CSV.getname), String})
precompile(Tuple{typeof(CSV.parsefilechunk!), CSV.Context, Int64, Int64, Int64, Int64, Array{CSV.Column, 1}, Type{Tuple{}}})
precompile(Tuple{typeof(Base.setindex!), SentinelArrays.SentinelArray{String, 1, UndefInitializer, Base.Missing, Array{String, 1}}, String, Int64})
precompile(Tuple{typeof(Base.setproperty!), CSV.Column, Symbol, SentinelArrays.SentinelArray{String, 1, UndefInitializer, Base.Missing, Array{String, 1}}})
precompile(Tuple{typeof(Base.convert), Type{AbstractArray{var"#s813", 1} where var"#s813"}, SentinelArrays.SentinelArray{String, 1, UndefInitializer, Base.Missing, Array{String, 1}}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Type, Type}, Type})
precompile(Tuple{Type{SentinelArrays.SentinelArray{Int64, 1, S, V, A} where A<:AbstractArray{Int64, 1} where V where S}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.reinterpret), Type{Int64}, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.getindex), Base.ReinterpretArray{Int64, 1, UInt8, Array{UInt8, 1}, false}, Int64})
precompile(Tuple{typeof(Base.setindex!), SentinelArrays.SentinelArray{Int64, 1, Int64, Base.Missing, Array{Int64, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.setproperty!), CSV.Column, Symbol, SentinelArrays.SentinelArray{Int64, 1, Int64, Base.Missing, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.convert), Type{AbstractArray{var"#s813", 1} where var"#s813"}, SentinelArrays.SentinelArray{Int64, 1, Int64, Base.Missing, Array{Int64, 1}}})
precompile(Tuple{Type{InlineStrings.String31}, WeakRefStrings.PosLenString})
precompile(Tuple{Type{SentinelArrays.SentinelArray{InlineStrings.String31, 1, S, V, A} where A<:AbstractArray{InlineStrings.String31, 1} where V where S}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.reinterpret), Type{InlineStrings.String31}, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.getindex), Base.ReinterpretArray{InlineStrings.String31, 1, UInt8, Array{UInt8, 1}, false}, Int64})
precompile(Tuple{typeof(Base.setindex!), SentinelArrays.SentinelArray{InlineStrings.String31, 1, InlineStrings.String31, Base.Missing, Array{InlineStrings.String31, 1}}, InlineStrings.String31, Int64})
precompile(Tuple{typeof(Base.setproperty!), CSV.Column, Symbol, SentinelArrays.SentinelArray{InlineStrings.String31, 1, InlineStrings.String31, Base.Missing, Array{InlineStrings.String31, 1}}})
precompile(Tuple{typeof(Base.convert), Type{AbstractArray{var"#s813", 1} where var"#s813"}, SentinelArrays.SentinelArray{InlineStrings.String31, 1, InlineStrings.String31, Base.Missing, Array{InlineStrings.String31, 1}}})
precompile(Tuple{Type{SentinelArrays.SentinelArray{Float64, 1, S, V, A} where A<:AbstractArray{Float64, 1} where V where S}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.reinterpret), Type{Float64}, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.getindex), Base.ReinterpretArray{Float64, 1, UInt8, Array{UInt8, 1}, false}, Int64})
precompile(Tuple{typeof(Base.setindex!), SentinelArrays.SentinelArray{Float64, 1, Float64, Base.Missing, Array{Float64, 1}}, Float64, Int64})
precompile(Tuple{typeof(Base.setproperty!), CSV.Column, Symbol, SentinelArrays.SentinelArray{Float64, 1, Float64, Base.Missing, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.convert), Type{AbstractArray{var"#s813", 1} where var"#s813"}, SentinelArrays.SentinelArray{Float64, 1, Float64, Base.Missing, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Type, Type}, Type, Type})
precompile(Tuple{typeof(CSV.trytopromote!), Type{Int64}, Type{Int128}, Array{UInt8, 1}, Int64, Int64, CSV.Column, Int64})
precompile(Tuple{typeof(CSV.trytopromote!), Type{Int64}, Type{Float64}, Array{UInt8, 1}, Int64, Int64, CSV.Column, Int64})
precompile(Tuple{typeof(SentinelArrays.newsentinel), Type})
precompile(Tuple{typeof(Base.rand), Random.MersenneTwister, Type{UInt8}, Int64})
precompile(Tuple{typeof(CSV.reallocate!), Any, Int64})
precompile(Tuple{typeof(Base.resize!), SentinelArrays.SentinelArray{String, 1, UndefInitializer, Base.Missing, Array{String, 1}}, Int64})
precompile(Tuple{typeof(Base.resize!), SentinelArrays.SentinelArray{Int64, 1, Int64, Base.Missing, Array{Int64, 1}}, Int64})
precompile(Tuple{typeof(Base.resize!), SentinelArrays.SentinelArray{Float64, 1, Float64, Base.Missing, Array{Float64, 1}}, Int64})
precompile(Tuple{typeof(CSV.checkpooled!), Type{String}, Nothing, CSV.Column, Int64, Int64, Int64, CSV.Context})
precompile(Tuple{typeof(Base.parent), SentinelArrays.SentinelArray{String, 1, UndefInitializer, Base.Missing, Array{String, 1}}})
precompile(Tuple{typeof(Base.setproperty!), CSV.Column, Symbol, Array{String, 1}})
precompile(Tuple{typeof(Base.convert), Type{AbstractArray{var"#s813", 1} where var"#s813"}, Array{String, 1}})
precompile(Tuple{typeof(Base.parent), SentinelArrays.SentinelArray{Int64, 1, Int64, Base.Missing, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.setproperty!), CSV.Column, Symbol, Array{Int64, 1}})
precompile(Tuple{typeof(Base.convert), Type{AbstractArray{var"#s813", 1} where var"#s813"}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.parent), SentinelArrays.SentinelArray{Float64, 1, Float64, Base.Missing, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.setproperty!), CSV.Column, Symbol, Array{Float64, 1}})
precompile(Tuple{typeof(Base.convert), Type{AbstractArray{var"#s813", 1} where var"#s813"}, Array{Float64, 1}})
precompile(Tuple{typeof(CSV.finaltype), Type})
precompile(Tuple{DataFrames.var"#DataFrame#152#154", Bool, Type{DataFrames.DataFrame}, Array{AbstractArray{var"#s813", 1} where var"#s813", 1}, DataFrames.Index})
precompile(Tuple{typeof(Base._array_for), Type{Array{String, 1}}, Base.UnitRange{Int64}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{String, 1}, 1}, Array{String, 1}, Base.Generator{Base.UnitRange{Int64}, DataFrames.var"#118#119"{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Array{String, 1}, 1}, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{T, 1} where T, 1}, Base.Generator{Base.UnitRange{Int64}, DataFrames.var"#118#119"{DataFrames.DataFrame}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{String, 1}, Array{String, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{String, 1}, Array{Float64, 1}, Array{Float64, 1}}, Base.Val{true}, Nothing, Bool, Nothing})
precompile(Tuple{Mmap.var"#3#5"{Ptr{Nothing}, Int64}, Array{UInt8, 1}})
precompile(Tuple{typeof(DataFrames.refpool_and_array), Array{String, 1}})
precompile(Tuple{typeof(DataFrames.refpool_and_array), Array{Int64, 1}})
precompile(Tuple{typeof(Base.GMP.MPZ.sub), Base.GMP.BigInt, Base.GMP.BigInt})
precompile(Tuple{typeof(DataFrames.refpool_and_array), Array{Float64, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.Style{Tuple}, Function, Tuple{Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{Int64, 1}}}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{Int64, 1}}}, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{Int64, 1}}}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.first), Tuple{Tuple{Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{Int64, 1}}}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{Int64, 1}}}, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{Int64, 1}}}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.first), Tuple{Tuple{Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{Int64, 1}}}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{Int64, 1}}}, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{Int64, 1}}}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.first), Tuple{Tuple{Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{Int64, 1}}}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{Int64, 1}}}, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{Int64, 1}}}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.last), Tuple{Tuple{Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{Int64, 1}}}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{Int64, 1}}}, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{Int64, 1}}}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.last), Tuple{Tuple{Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{Int64, 1}}}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{Int64, 1}}}, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{Int64, 1}}}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.last), Tuple{Tuple{Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{Int64, 1}}}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{Int64, 1}}}, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{Int64, 1}}}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}}}}})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{String, 1}, Array{String, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{String, 1}, Array{Float64, 1}, Array{Float64, 1}}, Tuple{Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, DataFrames.IntegerRefpool{Int64}, Nothing, Nothing, DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefpool{Int64}, Nothing, Nothing, Nothing}, Tuple{Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, DataFrames.IntegerRefarray{Array{Int64, 1}}, Nothing, Nothing, DataFrames.IntegerRefarray{Array{Int64, 1}}, DataFrames.IntegerRefarray{Array{Int64, 1}}, Nothing, Nothing, Nothing}, Base.Val{true}, Nothing, Bool, Bool})
precompile(Tuple{typeof(DataFrames.hashrows_col!), Array{UInt64, 1}, Array{Bool, 1}, Array{String, 1}, Nothing, Bool})
precompile(Tuple{typeof(DataFrames.hashrows_col!), Array{UInt64, 1}, Array{Bool, 1}, Array{Int64, 1}, Nothing, Bool})
precompile(Tuple{typeof(DataFrames.hashrows_col!), Array{UInt64, 1}, Array{Bool, 1}, Array{Float64, 1}, Nothing, Bool})
precompile(Tuple{typeof(DataAPI.nrow), DataFrames.DataFrame})
precompile(Tuple{typeof(Base.deleteat!), Array{String, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.deleteat!), Array{Int64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.deleteat!), Array{Float64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{Type{String}, String})
precompile(Tuple{Type{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}}, String})
precompile(Tuple{Type{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}}, String, BioSequences.AsciiAlphabet})
precompile(Tuple{typeof(BioSequences.encode_chunks!), BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, Int64, Array{UInt8, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 1}, Int64})
precompile(Tuple{Type{Patchwork.DiamondSearchResult}, Patchwork.SequenceIdentifier, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, Int64, Int64, Int64, Patchwork.SequenceIdentifier, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, Int64, Int64, String, Float64, Float64})
precompile(Tuple{typeof(Base.setindex!), Array{Patchwork.DiamondSearchResult, 1}, Patchwork.DiamondSearchResult, Int64})
precompile(Tuple{typeof(Base.:(*)), String, String, String, String})
precompile(Tuple{Patchwork.var"#writeblastTSV##kw", NamedTuple{(:header,), Tuple{Bool}}, typeof(Patchwork.writeblastTSV), String, Array{Patchwork.DiamondSearchResult, 1}})
precompile(Tuple{Type{Tuple}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Type{Tables.Schema{names, types} where types where names}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Nothing})
precompile(Tuple{typeof(Base.map), Type{Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Tables._buildcolumns), Tables.IteratorWrapper{Array{Patchwork.DiamondSearchResult, 1}}, Tables.IteratorRow{Patchwork.DiamondSearchResult}, Int64, Tables.Schema{(:queryid, :translated_querysequence, :querystart, :queryend, :queryframe, :subjectid, :subjectsequence, :subjectstart, :subjectend, :cigar, :percentidentical, :bitscore), nothing}, Tuple{Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector}, Base.RefValue{Any}})
precompile(Tuple{typeof(Base.ntuple), Tables.var"#39#40"{Int64, Base.RefValue{Any}, Array{Patchwork.SequenceIdentifier, 1}}, Int64})
precompile(Tuple{typeof(Base._array_for), Type{Array{Patchwork.SequenceIdentifier, 1}}, Base.UnitRange{Int64}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Patchwork.SequenceIdentifier, 1}, 1}, Array{Patchwork.SequenceIdentifier, 1}, Base.Generator{Base.UnitRange{Int64}, Tables.var"#39#40"{Int64, Base.RefValue{Any}, Array{Patchwork.SequenceIdentifier, 1}}}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Array{Patchwork.SequenceIdentifier, 1}, 1}, Tables.EmptyVector, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{AbstractArray{var"#s813", 1} where var"#s813", 1}, Base.Generator{Base.UnitRange{Int64}, Tables.var"#39#40"{Int64, Base.RefValue{Any}, Array{Patchwork.SequenceIdentifier, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Base.ntuple), Tables.var"#39#40"{Int64, Base.RefValue{Any}, Array{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, 1}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Patchwork.SequenceIdentifier, 1}, 1}, Array{Patchwork.SequenceIdentifier, 1}, Base.Generator{Base.UnitRange{Int64}, Tables.var"#39#40"{Int64, Base.RefValue{Any}, Array{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, 1}}}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Array{Patchwork.SequenceIdentifier, 1}, 1}, Array{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, 1}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{T, 1} where T, 1}, Base.Generator{Base.UnitRange{Int64}, Tables.var"#39#40"{Int64, Base.RefValue{Any}, Array{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Array{T, 1} where T, 1}, Tables.EmptyVector, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{AbstractArray{var"#s813", 1} where var"#s813", 1}, Base.Generator{Base.UnitRange{Int64}, Tables.var"#39#40"{Int64, Base.RefValue{Any}, Array{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Base.ntuple), Tables.var"#39#40"{Int64, Base.RefValue{Any}, Array{Int64, 1}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Patchwork.SequenceIdentifier, 1}, 1}, Array{Patchwork.SequenceIdentifier, 1}, Base.Generator{Base.UnitRange{Int64}, Tables.var"#39#40"{Int64, Base.RefValue{Any}, Array{Int64, 1}}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{T, 1} where T, 1}, Base.Generator{Base.UnitRange{Int64}, Tables.var"#39#40"{Int64, Base.RefValue{Any}, Array{Int64, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{AbstractArray{var"#s813", 1} where var"#s813", 1}, Base.Generator{Base.UnitRange{Int64}, Tables.var"#39#40"{Int64, Base.RefValue{Any}, Array{Int64, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{T, 1} where T, 1}, Base.Generator{Base.UnitRange{Int64}, Tables.var"#39#40"{Int64, Base.RefValue{Any}, Array{Patchwork.SequenceIdentifier, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Tables.undatavalue), String})
precompile(Tuple{typeof(Tables.add_or_widen!), String, Int64, Symbol, Tables.EmptyVector, Int64, Base.RefValue{Any}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.ntuple), Tables.var"#39#40"{Int64, Base.RefValue{Any}, Array{String, 1}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Patchwork.SequenceIdentifier, 1}, 1}, Array{Patchwork.SequenceIdentifier, 1}, Base.Generator{Base.UnitRange{Int64}, Tables.var"#39#40"{Int64, Base.RefValue{Any}, Array{String, 1}}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{T, 1} where T, 1}, Base.Generator{Base.UnitRange{Int64}, Tables.var"#39#40"{Int64, Base.RefValue{Any}, Array{String, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{AbstractArray{var"#s813", 1} where var"#s813", 1}, Base.Generator{Base.UnitRange{Int64}, Tables.var"#39#40"{Int64, Base.RefValue{Any}, Array{String, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Base.ntuple), Tables.var"#39#40"{Int64, Base.RefValue{Any}, Array{Float64, 1}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Patchwork.SequenceIdentifier, 1}, 1}, Array{Patchwork.SequenceIdentifier, 1}, Base.Generator{Base.UnitRange{Int64}, Tables.var"#39#40"{Int64, Base.RefValue{Any}, Array{Float64, 1}}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{T, 1} where T, 1}, Base.Generator{Base.UnitRange{Int64}, Tables.var"#39#40"{Int64, Base.RefValue{Any}, Array{Float64, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{AbstractArray{var"#s813", 1} where var"#s813", 1}, Base.Generator{Base.UnitRange{Int64}, Tables.var"#39#40"{Int64, Base.RefValue{Any}, Array{Float64, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Tables.__buildcolumns), Tables.IteratorWrapper{Array{Patchwork.DiamondSearchResult, 1}}, Int64, Tables.Schema{(:queryid, :translated_querysequence, :querystart, :queryend, :queryframe, :subjectid, :subjectsequence, :subjectstart, :subjectend, :cigar, :percentidentical, :bitscore), nothing}, Tuple{Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{String, 1}, Array{Float64, 1}, Array{Float64, 1}}, Int64, Base.RefValue{Any}})
precompile(Tuple{typeof(Tables.add_or_widen!), String, Int64, Symbol, Array{String, 1}, Int64, Base.RefValue{Any}, Base.HasShape{1}})
precompile(Tuple{Type{NamedTuple{(:queryid, :translated_querysequence, :querystart, :queryend, :queryframe, :subjectid, :subjectsequence, :subjectstart, :subjectend, :cigar, :percentidentical, :bitscore), T} where T<:Tuple}, Tuple{Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{String, 1}, Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{Type{Tables.CopiedColumns{T} where T}, NamedTuple{(:queryid, :translated_querysequence, :querystart, :queryend, :queryframe, :subjectid, :subjectsequence, :subjectstart, :subjectend, :cigar, :percentidentical, :bitscore), Tuple{Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{String, 1}, Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Tables.columnnames), Tables.CopiedColumns{NamedTuple{(:queryid, :translated_querysequence, :querystart, :queryend, :queryframe, :subjectid, :subjectsequence, :subjectstart, :subjectend, :cigar, :percentidentical, :bitscore), Tuple{Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{String, 1}, Array{Float64, 1}, Array{Float64, 1}}}}})
precompile(Tuple{typeof(Base.collect), Type{Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{DataFrames.var"#fromcolumns##kw", NamedTuple{(:copycols,), Tuple{Nothing}}, typeof(DataFrames.fromcolumns), Tables.CopiedColumns{NamedTuple{(:queryid, :translated_querysequence, :querystart, :queryend, :queryframe, :subjectid, :subjectsequence, :subjectstart, :subjectend, :cigar, :percentidentical, :bitscore), Tuple{Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{String, 1}, Array{Float64, 1}, Array{Float64, 1}}}}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.length), Array{Patchwork.SequenceIdentifier, 1}})
precompile(Tuple{typeof(Base.length), Array{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, 1}})
precompile(Tuple{typeof(DataFrames._preprocess_column), Array{Patchwork.SequenceIdentifier, 1}, Int64, Bool})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{var"#s813", 1} where var"#s813", 1}, Array{Patchwork.SequenceIdentifier, 1}, Int64})
precompile(Tuple{typeof(DataFrames._preprocess_column), Array{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, 1}, Int64, Bool})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{var"#s813", 1} where var"#s813", 1}, Array{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, 1}, Int64})
precompile(Tuple{typeof(Base.firstindex), Array{Patchwork.SequenceIdentifier, 1}})
precompile(Tuple{typeof(Base.firstindex), Array{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, 1}})
precompile(Tuple{DataFrames.var"##manipulate#492", Bool, Bool, Bool, typeof(DataFrames.manipulate), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Array{Symbol, 1}}})
precompile(Tuple{typeof(Base.allunique), Array{Symbol, 1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Symbol, 1}, DataFrames.var"#35#36"{DataFrames.Index}}})
precompile(Tuple{typeof(Base._shrink), Function, Base.UnitRange{Int64}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.setdiff!), Base.Set{Int64}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.vectorfilter), Function, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.filter), Base.var"#103#104"{typeof(Base.in), typeof(Base.pop!), Base.Set{Int64}}, Base.UnitRange{Int64}})
precompile(Tuple{DataFrames.var"##manipulate#491", Bool, Bool, Bool, typeof(DataFrames.manipulate), DataFrames.DataFrame, Array{Int64, 1}})
precompile(Tuple{typeof(Base.copy!), Array{AbstractArray{var"#s813", 1} where var"#s813", 1}, Array{AbstractArray{var"#s813", 1} where var"#s813", 1}})
precompile(Tuple{typeof(Base.copy!), Array{Symbol, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.empty!), Base.Dict{Symbol, Int64}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, Int64}, Base.Dict{Symbol, Int64}})
precompile(Tuple{typeof(Base.depwarn), String, Symbol})
precompile(Tuple{Type{CSV.Options{D, N, DF, M, TF} where TF where M where DF where N where D}, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, Nothing, Bool, Tuple{}, typeof(CSV._identity), Bool})
precompile(Tuple{typeof(Base._array_for), Type{DataType}, DataFrames.DataFrameColumns{DataFrames.DataFrame}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{DataType, 1}, Type, Base.Generator{DataFrames.DataFrameColumns{DataFrames.DataFrame}, typeof(Base.eltype)}, Int64})
precompile(Tuple{Type{Tables.Schema{names, types} where types where names}, Array{Symbol, 1}, Array{DataType, 1}})
precompile(Tuple{CSV.var"#write##kw", NamedTuple{(:append, :compress, :header), Tuple{Bool, Bool, Bool}}, typeof(CSV.write), Tables.Schema{(:queryid, :translated_querysequence, :querystart, :queryend, :queryframe, :subjectid, :subjectsequence, :subjectstart, :subjectend, :cigar, :percentidentical, :bitscore), Tuple{String, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, Int64, Int64, Int64, String, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, Int64, Int64, String, Float64, Float64}}, DataFrames.DataFrameRows{DataFrames.DataFrame}, String, CSV.Options{UInt8, UInt8, Nothing, Tuple{}, typeof(CSV._identity)}})
precompile(Tuple{typeof(CSV.with), CSV.var"#93#94"{Bool, Bool, Tables.Schema{(:queryid, :translated_querysequence, :querystart, :queryend, :queryframe, :subjectid, :subjectsequence, :subjectstart, :subjectend, :cigar, :percentidentical, :bitscore), Tuple{String, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, Int64, Int64, Int64, String, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, Int64, Int64, String, Float64, Float64}}, DataFrames.DataFrameRows{DataFrames.DataFrame}, CSV.Options{UInt8, UInt8, Nothing, Tuple{}, typeof(CSV._identity)}, Array{UInt8, 1}, Int64, Int64, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}}, Any, Bool, Bool})
precompile(Tuple{CSV.var"#93#94"{Bool, Bool, Tables.Schema{(:queryid, :translated_querysequence, :querystart, :queryend, :queryframe, :subjectid, :subjectsequence, :subjectstart, :subjectend, :cigar, :percentidentical, :bitscore), Tuple{String, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, Int64, Int64, Int64, String, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, Int64, Int64, String, Float64, Float64}}, DataFrames.DataFrameRows{DataFrames.DataFrame}, CSV.Options{UInt8, UInt8, Nothing, Tuple{}, typeof(CSV._identity)}, Array{UInt8, 1}, Int64, Int64, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}}, Base.IOStream})
precompile(Tuple{typeof(CSV.writenames), Array{UInt8, 1}, Int64, Int64, Base.IOStream, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Int64, CSV.Options{UInt8, UInt8, Nothing, Tuple{}, typeof(CSV._identity)}})
precompile(Tuple{CSV.var"#100#101"{Array{UInt8, 1}, Base.RefValue{Int64}, Int64, Base.IOStream, Int64, CSV.Options{UInt8, UInt8, Nothing, Tuple{}, typeof(CSV._identity)}, UInt8, UInt8}, String, Int64, Symbol})
precompile(Tuple{typeof(Base.getindex), Array{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, 1}, Int64})
precompile(Tuple{CSV.var"#100#101"{Array{UInt8, 1}, Base.RefValue{Int64}, Int64, Base.IOStream, Int64, CSV.Options{UInt8, UInt8, Nothing, Tuple{}, typeof(CSV._identity)}, UInt8, UInt8}, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, Int64, Symbol})
precompile(Tuple{CSV.var"#100#101"{Array{UInt8, 1}, Base.RefValue{Int64}, Int64, Base.IOStream, Int64, CSV.Options{UInt8, UInt8, Nothing, Tuple{}, typeof(CSV._identity)}, UInt8, UInt8}, Int64, Int64, Symbol})
precompile(Tuple{CSV.var"#100#101"{Array{UInt8, 1}, Base.RefValue{Int64}, Int64, Base.IOStream, Int64, CSV.Options{UInt8, UInt8, Nothing, Tuple{}, typeof(CSV._identity)}, UInt8, UInt8}, Float64, Int64, Symbol})
precompile(Tuple{typeof(Patchwork.selectsequence), String, Patchwork.SequenceIdentifier})
precompile(Tuple{typeof(FASTX.sequence), Type{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}}, FASTX.FASTA.Record, Base.UnitRange{Int64}})
precompile(Tuple{Type{Patchwork.SequenceRecord}, String, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}})
precompile(Tuple{typeof(Patchwork.cleancigar), String})
precompile(Tuple{typeof(Base.setindex!), Array{Patchwork.AlignedRegion, 1}, Patchwork.AlignedRegion, Int64})
precompile(Tuple{Base.Sort.var"##sortperm#12", Base.Sort.QuickSortAlg, Function, Function, Nothing, Base.Order.ForwardOrdering, typeof(Base.sortperm), Array{Tuple{Int64, Int64}, 1}})
precompile(Tuple{Type{Base.Order.Perm{O, V} where V<:(AbstractArray{T, 1} where T) where O<:Base.Order.Ordering}, Base.Order.ForwardOrdering, Array{Tuple{Int64, Int64}, 1}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Base.Sort.QuickSortAlg, Base.Order.Perm{Base.Order.ForwardOrdering, Array{Tuple{Int64, Int64}, 1}}})
precompile(Tuple{typeof(Base.getindex), BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Patchwork.pairalign_local), BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, BioAlignments.AffineGapScoreModel{Int64}})
precompile(Tuple{typeof(BioAlignments.run!), BioAlignments.SmithWaterman{Int64}, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, BioAlignments.SubstitutionMatrix{BioSymbols.AminoAcid, Int64}, Int64, Int64})
precompile(Tuple{Type{Base.VersionNumber}, UInt32, UInt32, UInt32, Tuple{}, Tuple{UInt64}})
precompile(Tuple{typeof(Base.deepcopy_internal), Any, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Tuple{UInt64}, Base.IdDict{Any, Any}})
precompile(Tuple{Type{NamedTuple{(:name, :version, :tree_hash, :is_direct_dep, :is_pinned, :is_tracking_path, :is_tracking_repo, :is_tracking_registry, :git_revision, :git_source, :source, :dependencies), T} where T<:Tuple}, Tuple{String, Base.VersionNumber, String, Bool, Bool, Bool, Bool, Bool, Nothing, Nothing, String, Base.Dict{String, Base.UUID}}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:name, :version, :tree_hash, :is_direct_dep, :is_pinned, :is_tracking_path, :is_tracking_repo, :is_tracking_registry, :git_revision, :git_source, :source, :dependencies), Tuple{String, Base.VersionNumber, String, Bool, Bool, Bool, Bool, Bool, Nothing, Nothing, String, Base.Dict{String, Base.UUID}}}, Type{Pkg.Types.PackageInfo}})
precompile(Tuple{Type{NamedTuple{(:name, :version, :tree_hash, :is_direct_dep, :is_pinned, :is_tracking_path, :is_tracking_repo, :is_tracking_registry, :git_revision, :git_source, :source, :dependencies), T} where T<:Tuple}, Tuple{String, Nothing, Nothing, Bool, Bool, Bool, Bool, Bool, Nothing, Nothing, String, Base.Dict{String, Base.UUID}}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:name, :version, :tree_hash, :is_direct_dep, :is_pinned, :is_tracking_path, :is_tracking_repo, :is_tracking_registry, :git_revision, :git_source, :source, :dependencies), Tuple{String, Nothing, Nothing, Bool, Bool, Bool, Bool, Bool, Nothing, Nothing, String, Base.Dict{String, Base.UUID}}}, Type{Pkg.Types.PackageInfo}})
precompile(Tuple{Type{BioAlignments.PairwiseAlignment{S1, S2} where S2 where S1}, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, String})
precompile(Tuple{typeof(Base.isempty), BioAlignments.PairwiseAlignment{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}}})
precompile(Tuple{typeof(Base.getindex), BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, Int64})
precompile(Tuple{typeof(Patchwork.createbridgealignment), BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.vect), BioAlignments.PairwiseAlignment{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}}, Vararg{BioAlignments.PairwiseAlignment{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}}, N} where N})
precompile(Tuple{typeof(Base.push!), Array{BioAlignments.PairwiseAlignment{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}}, 1}, BioAlignments.PairwiseAlignment{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}}})
precompile(Tuple{typeof(Base.push!), Array{BioAlignments.PairwiseAlignment{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}}, 1}, BioAlignments.PairwiseAlignment{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}}, BioAlignments.PairwiseAlignment{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}}})
precompile(Tuple{typeof(Patchwork.concatenate), Array{BioAlignments.PairwiseAlignment{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}}, 1}})
precompile(Tuple{Type{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}}, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, Vararg{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, N} where N})
precompile(Tuple{typeof(Patchwork.maskgaps), BioAlignments.PairwiseAlignment{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}}})
precompile(Tuple{typeof(BioAlignments.run!), BioAlignments.NeedlemanWunsch{Int64}, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, BioAlignments.SubstitutionMatrix{BioSymbols.AminoAcid, Int64}, Int64, Int64})
precompile(Tuple{typeof(Patchwork.maskalignment), BioAlignments.PairwiseAlignment{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}}, BioAlignments.AffineGapScoreModel{Int64}, Bool, Bool})
precompile(Tuple{typeof(Patchwork.write_alignmentfile), String, Patchwork.SequenceIdentifier, Int64, BioAlignments.PairwiseAlignment{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}}, Int64})
precompile(Tuple{Base.var"##open#317", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), Patchwork.var"#97#98"{Patchwork.SequenceIdentifier, Int64, BioAlignments.PairwiseAlignment{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}}, Float64, Int64, Int64, Int64, Int64, Int64, String}, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, String, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Patchwork.write_fasta), String, Patchwork.SequenceIdentifier, BioAlignments.PairwiseAlignment{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}}})
precompile(Tuple{typeof(Base.length), BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}})
precompile(Tuple{typeof(BioAlignments.count_matches), BioAlignments.PairwiseAlignment{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}}})
precompile(Tuple{typeof(BioAlignments.count_mismatches), BioAlignments.PairwiseAlignment{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}}})
precompile(Tuple{typeof(BioAlignments.count_deletions), BioAlignments.PairwiseAlignment{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}}})
precompile(Tuple{typeof(Patchwork.occupancy), BioAlignments.PairwiseAlignment{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}}})
precompile(Tuple{typeof(Base.vect), String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), String, Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Int64, Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Int64, Float64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Float64, Float64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Tuple{String, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Float64, Float64}})
precompile(Tuple{typeof(Base.push!), DataFrames.DataFrame, Array{Any, 1}})
precompile(Tuple{typeof(Base.push!), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.push!), Array{Float64, 1}, Float64})
precompile(Tuple{typeof(Base.println), Base.TTY, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.print), Base.TTY, String, Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.print), Base.TTY, Int64})
precompile(Tuple{typeof(Base.println), String, Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.print), Base.TTY, Float64})
precompile(Tuple{CSV.var"#write##kw", NamedTuple{(:delim,), Tuple{String}}, typeof(CSV.write), String, DataFrames.DataFrame})
precompile(Tuple{typeof(CSV.checkvaliddelim), String})
precompile(Tuple{typeof(Base._all), typeof(CSV.isvaliddelim), String, Base.Colon})
precompile(Tuple{Type{CSV.Options{D, N, DF, M, TF} where TF where M where DF where N where D}, Tuple{UInt8}, UInt8, UInt8, UInt8, UInt8, UInt8, Nothing, Bool, Tuple{}, typeof(CSV._identity), Bool})
precompile(Tuple{CSV.var"#write##kw", NamedTuple{(:append, :compress, :header), Tuple{Bool, Bool, Bool}}, typeof(CSV.write), Tables.Schema{(:id, :reference_len, :query_len, :regions, :contigs, :matches, :mismatches, :deletions, :query_coverage, :identity), Tuple{String, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Float64, Float64}}, DataFrames.DataFrameRows{DataFrames.DataFrame}, String, CSV.Options{Tuple{UInt8}, UInt8, Nothing, Tuple{}, typeof(CSV._identity)}})
precompile(Tuple{typeof(CSV.with), CSV.var"#93#94"{Bool, Bool, Tables.Schema{(:id, :reference_len, :query_len, :regions, :contigs, :matches, :mismatches, :deletions, :query_coverage, :identity), Tuple{String, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Float64, Float64}}, DataFrames.DataFrameRows{DataFrames.DataFrame}, CSV.Options{Tuple{UInt8}, UInt8, Nothing, Tuple{}, typeof(CSV._identity)}, Array{UInt8, 1}, Int64, Int64, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}}, Any, Bool, Bool})
precompile(Tuple{CSV.var"#93#94"{Bool, Bool, Tables.Schema{(:id, :reference_len, :query_len, :regions, :contigs, :matches, :mismatches, :deletions, :query_coverage, :identity), Tuple{String, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Float64, Float64}}, DataFrames.DataFrameRows{DataFrames.DataFrame}, CSV.Options{Tuple{UInt8}, UInt8, Nothing, Tuple{}, typeof(CSV._identity)}, Array{UInt8, 1}, Int64, Int64, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}}, Base.IOStream})
precompile(Tuple{typeof(CSV.writenames), Array{UInt8, 1}, Int64, Int64, Base.IOStream, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Int64, CSV.Options{Tuple{UInt8}, UInt8, Nothing, Tuple{}, typeof(CSV._identity)}})
precompile(Tuple{CSV.var"#100#101"{Array{UInt8, 1}, Base.RefValue{Int64}, Int64, Base.IOStream, Int64, CSV.Options{Tuple{UInt8}, UInt8, Nothing, Tuple{}, typeof(CSV._identity)}, Tuple{UInt8}, UInt8}, String, Int64, Symbol})
precompile(Tuple{CSV.var"#100#101"{Array{UInt8, 1}, Base.RefValue{Int64}, Int64, Base.IOStream, Int64, CSV.Options{Tuple{UInt8}, UInt8, Nothing, Tuple{}, typeof(CSV._identity)}, Tuple{UInt8}, UInt8}, Int64, Int64, Symbol})
precompile(Tuple{CSV.var"#100#101"{Array{UInt8, 1}, Base.RefValue{Int64}, Int64, Base.IOStream, Int64, CSV.Options{Tuple{UInt8}, UInt8, Nothing, Tuple{}, typeof(CSV._identity)}, Tuple{UInt8}, UInt8}, Float64, Int64, Symbol})
precompile(Tuple{DataFrames.var"##describe#67", Function, typeof(DataAPI.describe), DataFrames.DataFrame})
precompile(Tuple{DataFrames.var"#479#480"{DataFrames.DataFrame}, Function})
precompile(Tuple{DataFrames.var"#manipulate##kw", NamedTuple{(:copycols, :keeprows, :renamecols), Tuple{Bool, Bool, Bool}}, typeof(DataFrames.manipulate), DataFrames.DataFrame, Base.Colon})
precompile(Tuple{typeof(Base._collect), Type{Symbol}, Base.Generator{Base.Iterators.Filter{DataFrames.var"#68#76", Array{Any, 1}}, typeof(Base.identity)}, Base.SizeUnknown})
precompile(Tuple{typeof(Base.:(==)), Array{Symbol, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.issubset), Array{Symbol, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base._collect), Type{Any}, Base.Generator{Base.Iterators.Filter{DataFrames.var"#72#80", Array{Any, 1}}, DataFrames.var"#71#79"}, Base.SizeUnknown})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Any, 1}, DataFrames.var"#73#81"}})
precompile(Tuple{DataFrames.var"#73#81", Symbol})
precompile(Tuple{typeof(Base._array_for), Type{Symbol}, Array{Any, 1}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Array{Any, 1}, DataFrames.var"#73#81"}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{DataFrames.DataFrameColumns{DataFrames.DataFrame}, DataFrames.var"#74#82"{Array{Any, 1}}}})
precompile(Tuple{Core.Compiler.var"#256#258"{DataType, Tuple{Float64, Float64}}, Int64})
precompile(Tuple{Core.Compiler.var"#256#258"{DataType, Tuple{Base.Colon}}, Int64})
precompile(Tuple{DataFrames.var"#74#82"{Array{Any, 1}}, Array{Int64, 1}})
precompile(Tuple{typeof(DataFrames.get_stats), Union{Base.SkipMissing{T} where T, AbstractArray{T, 1} where T}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.copymutable), Array{Int64, 1}})
precompile(Tuple{typeof(Statistics.quantile!), Array{Int64, 1}, Float64})
precompile(Tuple{typeof(Base.extrema), Array{Int64, 1}})
precompile(Tuple{typeof(Statistics.mean), Array{Int64, 1}})
precompile(Tuple{DataFrames.var"#74#82"{Array{Any, 1}}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.copymutable), Array{Float64, 1}})
precompile(Tuple{typeof(Statistics.quantile!), Array{Float64, 1}, Float64})
precompile(Tuple{typeof(Base.extrema), Array{Float64, 1}})
precompile(Tuple{typeof(Statistics.mean), Array{Float64, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, DataFrames.var"#75#83"{Symbol}, Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Base.Dict{Symbol, Any}, 1}, DataFrames.var"#75#83"{Symbol}}})
precompile(Tuple{typeof(Base._array_for), Type{Float64}, Array{Base.Dict{Symbol, Any}, 1}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{Base.Dict{Symbol, Any}, 1}, DataFrames.var"#75#83"{Symbol}}, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{Float64, 1}, typeof(Base.:(!)), Symbol})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Array{Base.Dict{Symbol, Any}, 1}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Base.Dict{Symbol, Any}, 1}, DataFrames.var"#75#83"{Symbol}}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Int64, 1}, Float64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Real, 1}, Base.Generator{Array{Base.Dict{Symbol, Any}, 1}, DataFrames.var"#75#83"{Symbol}}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{Real, 1}, typeof(Base.:(!)), Symbol})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{Int64, 1}, typeof(Base.:(!)), Symbol})
precompile(Tuple{typeof(Base._array_for), Type{DataType}, Array{Base.Dict{Symbol, Any}, 1}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{DataType, 1}, Type, Base.Generator{Array{Base.Dict{Symbol, Any}, 1}, DataFrames.var"#75#83"{Symbol}}, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{DataType, 1}, typeof(Base.:(!)), Symbol})
precompile(Tuple{typeof(Base.length), Array{Real, 1}})
precompile(Tuple{typeof(DataFrames._preprocess_column), Array{Symbol, 1}, Int64, Bool})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{var"#s813", 1} where var"#s813", 1}, Array{Symbol, 1}, Int64})
precompile(Tuple{typeof(DataFrames._preprocess_column), Array{Real, 1}, Int64, Bool})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{var"#s813", 1} where var"#s813", 1}, Array{Real, 1}, Int64})
precompile(Tuple{typeof(Base.firstindex), Array{Symbol, 1}})
precompile(Tuple{typeof(Base.firstindex), Array{Real, 1}})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.TTY, Base.Pair{Symbol, Bool}})
precompile(Tuple{PrettyTables.var"#_pretty_table##kw", NamedTuple{(:nosubheader,), Tuple{Bool}}, typeof(PrettyTables._pretty_table), IO, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, typeof(Base.:(!)), Symbol})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:variable, :mean, :min, :median, :max), Tuple{Symbol, Float64, Real, Float64, Real}}, Symbol})
precompile(Tuple{typeof(Base.vect), Type{Symbol}, Vararg{DataType, N} where N})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(PrettyTables.compact_type_str), Tuple{Array{DataType, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(PrettyTables.compact_type_str), Tuple{Array{DataType, 1}}}})
precompile(Tuple{typeof(Base.get), Base.IOContext{Base.TTY}, Symbol, Bool})
precompile(Tuple{typeof(Base.length), Base.UnitRange{Int64}})
precompile(Tuple{typeof(PrettyTables._compute_row_fill_vectors), Base.UnitRange{Int64}, Int64, Symbol})
precompile(Tuple{typeof(PrettyTables._compute_cell_alignment_override), PrettyTables.ColumnTable, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Int64, Int64, Int64, Base.RefValue{Any}})
precompile(Tuple{Type{Base.Dict{Tuple{Int64, Int64}, Symbol}}})
precompile(Tuple{typeof(PrettyTables._fill_matrix_data!), Array{String, 2}, Array{Array{String, 1}, 2}, Array{Int64, 1}, Array{Int64, 1}, Base.UnitRange{Int64}, Array{Int64, 1}, Array{Int64, 1}, Int64, Any, Any, Ref{Any}, PrettyTables.Display, Bool, Bool, Array{Int64, 1}, Bool, Bool, Bool, Bool, Array{Int64, 1}, Array{Int64, 1}, Bool, Base.Val{:print}, Symbol})
precompile(Tuple{typeof(Base.isassigned), Array{Symbol, 1}, Int64})
precompile(Tuple{PrettyTables.var"#_parse_cell_text##kw", NamedTuple{(:autowrap, :cell_first_line_only, :column_width, :compact_printing, :has_color, :limit_printing, :linebreaks, :renderer), Tuple{Bool, Bool, Int64, Bool, Bool, Bool, Bool, Base.Val{:print}}}, typeof(PrettyTables._parse_cell_text), Symbol})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.TTY, Base.Pair{Symbol, Bool}, Base.Pair{Symbol, Bool}})
precompile(Tuple{Type{NamedTuple{(:context,), T} where T<:Tuple}, Tuple{Base.IOContext{Base.TTY}}})
precompile(Tuple{Base.var"#sprint##kw", NamedTuple{(:context,), Tuple{Base.IOContext{Base.TTY}}}, typeof(Base.sprint), Function, Symbol})
precompile(Tuple{Base.var"##sprint#385", Nothing, Int64, typeof(Base.sprint), Function, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.isassigned), PrettyTables.ColumnTable, Int64, Int64})
precompile(Tuple{typeof(Tables.getcolumn), DataFrames.DataFrameColumns{DataFrames.DataFrame}, Symbol})
precompile(Tuple{typeof(Base.getindex), PrettyTables.ColumnTable, Int64, Int64})
precompile(Tuple{PrettyTables.var"#_parse_cell_text##kw", NamedTuple{(:autowrap, :cell_data_type, :cell_first_line_only, :column_width, :compact_printing, :has_color, :limit_printing, :linebreaks, :renderer), Tuple{Bool, DataType, Bool, Int64, Bool, Bool, Bool, Bool, Base.Val{:print}}}, typeof(PrettyTables._parse_cell_text), Symbol})
precompile(Tuple{typeof(Base.isassigned), Array{Float64, 1}, Int64})
precompile(Tuple{PrettyTables.var"#_parse_cell_text##kw", NamedTuple{(:autowrap, :cell_data_type, :cell_first_line_only, :column_width, :compact_printing, :has_color, :limit_printing, :linebreaks, :renderer), Tuple{Bool, DataType, Bool, Int64, Bool, Bool, Bool, Bool, Base.Val{:print}}}, typeof(PrettyTables._parse_cell_text), Float64})
precompile(Tuple{Base.var"#sprint##kw", NamedTuple{(:context,), Tuple{Base.IOContext{Base.TTY}}}, typeof(Base.sprint), Function, Float64})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Float64})
precompile(Tuple{typeof(Base.isassigned), Array{Real, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Real, 1}, Int64})
precompile(Tuple{PrettyTables.var"#_parse_cell_text##kw", NamedTuple{(:autowrap, :cell_data_type, :cell_first_line_only, :column_width, :compact_printing, :has_color, :limit_printing, :linebreaks, :renderer), Tuple{Bool, DataType, Bool, Int64, Bool, Bool, Bool, Bool, Base.Val{:print}}}, typeof(PrettyTables._parse_cell_text), Int64})
precompile(Tuple{Base.var"#sprint##kw", NamedTuple{(:context,), Tuple{Base.IOContext{Base.TTY}}}, typeof(Base.sprint), Function, Int64})
precompile(Tuple{typeof(PrettyTables._apply_alignment_anchor_regex!), Array{Array{String, 1}, 2}, Array{Int64, 1}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Int64, Symbol, Base.Dict{Int64, Symbol}, Base.Dict{Int64, Array{Base.Regex, 1}}, Base.Dict{Tuple{Int64, Int64}, Symbol}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Int64, Array{Base.Regex, 1}}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Int64, 1}, Base.KeySet{Int64, Base.Dict{Int64, Array{Base.Regex, 1}}}})
precompile(Tuple{typeof(Base._replace!), Base.var"#new#295"{Tuple{Base.Pair{Symbol, Int64}, Base.Pair{Symbol, Int64}, Base.Pair{Symbol, Int64}}}, Array{Any, 1}, Array{Symbol, 1}, Int64})
precompile(Tuple{typeof(Base.filter), PrettyTables.var"#48#49"{Int64}, Array{Int64, 1}})
precompile(Tuple{typeof(Base._typed_vcat!), Array{Any, 1}, Tuple{Array{Any, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.in), Int64, Base.Set{Any}})
precompile(Tuple{typeof(Base.push!), Base.Set{Any}, Int64})
precompile(Tuple{Type{Array{Int64, 1}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.in), Int64, Array{Int64, 1}})
precompile(Tuple{typeof(Base.vcat), Base.StepRange{Int64, Int64}})
precompile(Tuple{typeof(Base._replace!), Base.var"#new#295"{Tuple{Base.Pair{Symbol, Int64}, Base.Pair{Symbol, Int64}}}, Array{Int64, 1}, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(PrettyTables._create_printing_recipe), PrettyTables.Display, Int64, Int64, Int64, Int64, Int64, Array{Int64, 1}, Array{Int64, 1}, Base.UnitRange{Int64}, Array{Int64, 1}, Array{Int64, 1}, Int64, Int64, Symbol, Bool, Bool, Symbol})
precompile(Tuple{typeof(PrettyTables._print_table_header!), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, PrettyTables.Display, Any, Array{String, 2}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Int64, Int64, Array{Int64, 1}, Array{Int64, 1}, Array{Symbol, 1}, Array{Symbol, 1}, Ref{Any}, Bool, Bool, PrettyTables.TextFormat, Crayons.Crayon, Array{Crayons.Crayon, 1}, Array{Crayons.Crayon, 1}, Crayons.Crayon, Crayons.Crayon})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Crayons.Crayon, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Crayons.Crayon})
precompile(Tuple{typeof(Crayons._print), Base.GenericIOBuffer{Array{UInt8, 1}}, Crayons.Crayon})
precompile(Tuple{typeof(PrettyTables._print_table_data), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, PrettyTables.Display, Any, Array{Array{String, 1}, 2}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Int64, Array{Int64, 1}, Array{Int64, 1}, Array{Tuple{Int64, Int64, Int64, Int64}, 1}, Array{Int64, 1}, Array{Symbol, 1}, Tuple{Char, Char, Char, Char}, Base.Dict{Tuple{Int64, Int64}, Symbol}, Symbol, Int64, Ref{Any}, Bool, Bool, Bool, PrettyTables.TextFormat, Crayons.Crayon, Crayons.Crayon, Crayons.Crayon})
precompile(Tuple{typeof(Base.hash), Tuple{Int64, Int64}, UInt64})
precompile(Tuple{typeof(PrettyTables._flush_buffer!), Base.IOContext{Base.TTY}, Base.GenericIOBuffer{Array{UInt8, 1}}, Bool, Bool, Int64})
precompile(Tuple{typeof(Patchwork.plot_querycover), Array{Float64, 1}, String})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Int64, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.identity), Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.identity), Tuple{Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.findmax), Array{Int64, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Int64, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Int64, Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.convert), Type{Number}, Int64})
precompile(Tuple{typeof(Base.println), String, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.print), Base.TTY, String, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.print), Base.TTY, UnicodePlots.Plot{UnicodePlots.BarplotGraphics{Int64}, Base.Val{false}, Bool}})
precompile(Tuple{Type{NamedTuple{(:p_width, :color), T} where T<:Tuple}, Tuple{Int64, Crayons.Crayon}})
precompile(Tuple{typeof(UnicodePlots.print_color), Base.TTY, Symbol, Char, Vararg{Any, N} where N})
precompile(Tuple{typeof(UnicodePlots.print_color), Base.TTY, UInt32, Char, Vararg{Any, N} where N})
precompile(Tuple{UnicodePlots.var"##print_color#11", Base.Missing, typeof(UnicodePlots.print_color), Base.TTY, UInt32, Char, Vararg{Any, N} where N})
precompile(Tuple{typeof(UnicodePlots.print_crayons), Base.TTY, Crayons.Crayon, Char, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.print), Base.TTY, Int64, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.print), Base.TTY, UInt8})
precompile(Tuple{typeof(Base.print), Base.TTY, String, Char, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.print), Base.TTY, Char})
precompile(Tuple{typeof(Base.identity), Int64})
precompile(Tuple{typeof(Base.float), Float64})
precompile(Tuple{typeof(Base.round), Type{Int64}, Float64, Base.Rounding.RoundingMode{:NearestTiesUp}})
precompile(Tuple{typeof(UnicodePlots.print_color), Base.TTY, UInt32, String, Vararg{String, N} where N})
precompile(Tuple{UnicodePlots.var"##print_color#11", Base.Missing, typeof(UnicodePlots.print_color), Base.TTY, UInt32, String, Vararg{String, N} where N})
precompile(Tuple{typeof(UnicodePlots.print_crayons), Base.TTY, Crayons.Crayon, String, Vararg{String, N} where N})
precompile(Tuple{typeof(UnicodePlots.print_color), Base.TTY, Symbol, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.round), Type{Int64}, Int64})
precompile(Tuple{typeof(Base.:(^)), Char, Int64})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Symbol, Symbol}, Symbol})
precompile(Tuple{typeof(Plots.convertLegendValue), Bool})
precompile(Tuple{typeof(Base.setproperty!), Plots.CurrentBackend, Symbol, Plots.GRBackend})
precompile(Tuple{Type{Plots.Plot{T} where T<:RecipesBase.AbstractBackend}, Plots.GRBackend, Int64, RecipesPipeline.DefaultsDict, Array{Plots.Series, 1}, Nothing, Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Base.Dict{Any, Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.EmptyLayout, Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Bool})
precompile(Tuple{typeof(RecipesPipeline.recipe_pipeline!), Any, Any, Any})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.Plot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Symbol, Any}, Symbol, Symbol})
precompile(Tuple{typeof(Base.copy), Base.Dict{Symbol, Any}})
precompile(Tuple{Type{RecipesBase.RecipeData}, Base.Dict{Symbol, Any}, Tuple{Array{String, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.append!), Array{RecipesBase.RecipeData, 1}, Array{RecipesBase.RecipeData, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesPipeline.is_subplot_attribute), Plots.Plot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(RecipesPipeline.is_axis_attribute), Plots.Plot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Base.iterate), Base.Dict{Symbol, Any}, Int64})
precompile(Tuple{typeof(RecipesPipeline.reset_kw!), Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.AbstractDict{Symbol, Any}, Any, Any})
precompile(Tuple{typeof(RecipesPipeline._apply_type_recipe), Any, AbstractArray{var"#s30", N} where N where var"#s30"<:Union{Base.Missing, AbstractFloat, AbstractString, Integer}, Any})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Any})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Symbol, Any})
precompile(Tuple{typeof(Base.prepend!), Array{RecipesBase.RecipeData, 1}, Array{RecipesBase.RecipeData, 1}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.AbstractDict{Symbol, Any}, Type{RecipesPipeline.SliceIt}, Any, Any, Any})
precompile(Tuple{typeof(RecipesPipeline._series_data_vector), Array{String, 1}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base._replace!), RecipesPipeline.var"#21#22", Array{String, 1}, Array{String, 1}, Int64})
precompile(Tuple{typeof(RecipesPipeline._series_data_vector), Array{Int64, 1}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{Int64, 1}, typeof(Base.float)}, Int64})
precompile(Tuple{typeof(Base._replace!), RecipesPipeline.var"#19#20", Array{Float64, 1}, Array{Float64, 1}, Int64})
precompile(Tuple{typeof(RecipesPipeline._series_data_vector), Nothing, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.length), Array{Array{String, 1}, 1}})
precompile(Tuple{typeof(Base.length), Array{Array{Float64, 1}, 1}})
precompile(Tuple{typeof(Base.length), Array{Nothing, 1}})
precompile(Tuple{typeof(Base.mod1), Int64, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Array{String, 1}, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Array{Float64, 1}, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Nothing, 1}, Int64})
precompile(Tuple{typeof(RecipesPipeline._compute_xyz), Array{String, 1}, Array{Float64, 1}, Nothing, Bool})
precompile(Tuple{Type{RecipesBase.RecipeData}, Base.Dict{Symbol, Any}, Tuple{}})
precompile(Tuple{typeof(RecipesPipeline._finish_userrecipe!), Plots.Plot{Plots.GRBackend}, Array{Base.Dict{Symbol, Any}, 1}, RecipesBase.RecipeData})
precompile(Tuple{typeof(RecipesPipeline.preprocess_attributes!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots.convertLegendValue), Symbol})
precompile(Tuple{typeof(RecipesPipeline._filter_input_data!), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesPipeline.process_userrecipe!), Plots.Plot{Plots.GRBackend}, Array{Base.Dict{Symbol, Any}, 1}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesPipeline._process_plotrecipes!), Any, Any})
precompile(Tuple{typeof(Base.isempty), Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{typeof(Base.popfirst!), Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{typeof(RecipesPipeline._process_plotrecipe), Any, Any, Any, Any})
precompile(Tuple{typeof(Base.get), Base.Dict{Symbol, Any}, Symbol, Nothing})
precompile(Tuple{typeof(Base.push!), Array{Base.Dict{Symbol, Any}, 1}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesPipeline.plot_setup!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Int64, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Symbol, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Bool, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Tuple{Int64, Int64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Nothing, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, String, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Float64, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Base.Dict{Any, Any}, Symbol})
precompile(Tuple{typeof(PlotUtils.plot_color), ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Base.setindex!), Plots.Plot{Plots.GRBackend}, ColorTypes.RGBA{Float64}, Symbol})
precompile(Tuple{typeof(PlotUtils.plot_color), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(PlotUtils.isdark), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Base.setindex!), Plots.Plot{Plots.GRBackend}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Symbol})
precompile(Tuple{typeof(Plots.build_layout), RecipesPipeline.DefaultsDict})
precompile(Tuple{typeof(Plots.layout_args), Int64})
precompile(Tuple{Type{Plots.GridLayout}, Int64, Vararg{Int64, N} where N})
precompile(Tuple{Plots.var"##GridLayout#158", Plots.RootLayout, Array{Float64, 1}, Array{Float64, 1}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{Plots.GridLayout}, Int64, Vararg{Int64, N} where N})
precompile(Tuple{Type{Array{RecipesBase.AbstractLayout, 2}}, UndefInitializer, Int64, Int64})
precompile(Tuple{Type{Measures.Length{:pct, Float64}}, Float64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Plots.GridLayout, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Plots.GridLayout, Int64}, Int64, Int64})
precompile(Tuple{typeof(Plots.build_layout), Plots.GridLayout, Int64, Array{Plots.Plot{T} where T<:RecipesBase.AbstractBackend, 1}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:parent,), Tuple{Plots.GridLayout}}, Type{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.GRBackend})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.Subplot{Plots.GRBackend}, Symbol})
precompile(Tuple{Type{Base.Dict{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, Any}}})
precompile(Tuple{typeof(Plots._cycle), Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Int64})
precompile(Tuple{typeof(Plots.get_subplot), Plots.Plot{Plots.GRBackend}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.Subplot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, Any}, Base.Dict{Symbol, Any}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.:(!=)), String, String})
precompile(Tuple{typeof(Base.get), Base.Dict{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, Any}, Plots.Subplot{Plots.GRBackend}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.merge), Base.Dict{Symbol, Any}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots._update_subplot_args), Plots.Plot{Plots.GRBackend}, Plots.Subplot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Int64, Bool})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Plots.Font, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Array{Any, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Array{Float64, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Measures.Length{:mm, Float64}, Symbol})
precompile(Tuple{typeof(Plots._update_subplot_periphery), Plots.Subplot{Plots.GRBackend}, Array{Any, 1}})
precompile(Tuple{typeof(Base.vcat), Array{Any, 1}, Array{Any, 1}})
precompile(Tuple{typeof(PlotUtils.get_color_palette), Symbol, Int64})
precompile(Tuple{typeof(PlotUtils.get_colorscheme), Symbol})
precompile(Tuple{Type{PlotUtils.ColorPalette}, ColorSchemes.ColorScheme{Array{ColorTypes.RGB{Float64}, 1}, String, String}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, PlotUtils.ColorPalette, Symbol})
precompile(Tuple{typeof(Plots._update_axis), Plots.Plot{Plots.GRBackend}, Plots.Subplot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Symbol, Int64})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pair{Symbol, Symbol}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.Extrema, Symbol})
precompile(Tuple{Type{Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}}, Array{Plots.Subplot{Plots.GRBackend}, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.Axis, Symbol})
precompile(Tuple{typeof(RecipesPipeline._process_seriesrecipes!), Any, Any})
precompile(Tuple{typeof(Base.iterate), Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{typeof(RecipesPipeline.slice_series_attributes!), Plots.Plot{Plots.GRBackend}, Array{Base.Dict{Symbol, Any}, 1}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.convert), Type{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots._slice_series_args!), Base.Dict{Symbol, Any}, Plots.Plot{Plots.GRBackend}, Plots.Subplot{Plots.GRBackend}, Int64})
precompile(Tuple{typeof(Base.iterate), Array{Base.Dict{Symbol, Any}, 1}, Int64})
precompile(Tuple{typeof(RecipesPipeline.process_sliced_series_attributes!), Plots.Plot{Plots.GRBackend}, Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{typeof(Base.grow_to!), Array{Int64, 1}, Base.Generator{Base.Iterators.Filter{Base.var"#97#98"{Plots.var"#149#150"}, Base.Iterators.Pairs{Int64, Base.Dict{Symbol, Any}, Base.LinearIndices{1, Tuple{Base.OneTo{Int64}}}, Array{Base.Dict{Symbol, Any}, 1}}}, typeof(Base.first)}})
precompile(Tuple{typeof(RecipesPipeline.series_defaults), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(RecipesPipeline._process_seriesrecipe), Any, Any})
precompile(Tuple{typeof(RecipesPipeline.is_seriestype_supported), Plots.Plot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Plots.is_seriestype_supported), Plots.GRBackend, Symbol})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.AbstractDict{Symbol, Any}, Type{Base.Val{:bar}}, Any, Any, Any})
precompile(Tuple{typeof(Plots._preprocess_barlike), RecipesPipeline.DefaultsDict, Array{String, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{Float64, 1}, Type{Float64}}, Int64})
precompile(Tuple{typeof(Plots.isvertical), RecipesPipeline.DefaultsDict})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Plots.var"#180#183"{Plots.Axis}, Array{String, 1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{String, 1}, Plots.var"#180#183"{Plots.Axis}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Any, Any}, String, Int64})
precompile(Tuple{typeof(Base.getproperty), Plots.Extrema, Symbol})
precompile(Tuple{typeof(Plots.expand_extrema!), Plots.Axis, Float64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Int64, String})
precompile(Tuple{typeof(Base._array_for), Type{Float64}, Array{String, 1}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{String, 1}, Plots.var"#180#183"{Plots.Axis}}, Int64})
precompile(Tuple{typeof(Base.eachindex), Array{Float64, 1}})
precompile(Tuple{typeof(Base._array_for), Type{Float64}, Base.OneTo{Int64}, Base.HasShape{1}})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.iterate), Base.OneTo{Int64}})
precompile(Tuple{typeof(Plots._cycle), Float64, Int64})
precompile(Tuple{typeof(Base.:(*)), Float64, Float64})
precompile(Tuple{typeof(Base.setindex!), Array{Float64, 1}, Float64, Int64})
precompile(Tuple{typeof(Base.iterate), Base.OneTo{Int64}, Int64})
precompile(Tuple{typeof(Base.isnan), Float64})
precompile(Tuple{typeof(Plots._cycle), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Plots._cycle), Int64, Int64})
precompile(Tuple{typeof(Base.push!), Plots.Segments{Float64}, Float64, Float64, Float64, Float64, Vararg{Float64, N} where N})
precompile(Tuple{typeof(Base.push!), Plots.Segments{Float64}, Float64, Int64, Int64, Float64, Vararg{Float64, N} where N})
precompile(Tuple{typeof(Base.identity), Float64})
precompile(Tuple{RecipesPipeline.var"#9#10"{Symbol}, Float64})
precompile(Tuple{typeof(Plots.expand_extrema!), Plots.Axis, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Base.setproperty!), Plots.Extrema, Symbol, Float64})
precompile(Tuple{typeof(Base.max), Float64, Float64})
precompile(Tuple{typeof(Base.copy), RecipesPipeline.DefaultsDict})
precompile(Tuple{typeof(Base._grow!), Function, Array{Symbol, 1}, Tuple{Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol}}})
precompile(Tuple{typeof(Base.filter!), Base.var"#103#104"{typeof(Base.:(∉)), typeof(Base.push!), Base.Set{Symbol}}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.mapfilter), Base.var"#103#104"{typeof(Base.:(∉)), typeof(Base.push!), Base.Set{Symbol}}, typeof(Base.push!), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.mapfilter), Base.var"#103#104"{typeof(Base.:(∉)), typeof(Base.push!), Base.Set{Symbol}}, typeof(Base.push!), Tuple{Symbol, Symbol, Symbol}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Nothing})
precompile(Tuple{Type{RecipesBase.RecipeData}, RecipesPipeline.DefaultsDict, Tuple{}})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Array{String, 1}, Symbol})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, RecipesPipeline.DefaultsDict, Symbol, Any})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Array{Float64, 1}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Float64})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Nothing})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Tuple{Int64, Int64}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Base.Dict{Any, Any}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Array{String, 1}})
precompile(Tuple{typeof(Base.iterate), Array{RecipesBase.RecipeData, 1}})
precompile(Tuple{typeof(RecipesPipeline.preprocess_attributes!), Plots.Plot{Plots.GRBackend}, RecipesPipeline.DefaultsDict})
precompile(Tuple{typeof(Base._similar_for), Base.UnitRange{Int64}, Type{Symbol}, Base.KeySet{Symbol, RecipesPipeline.DefaultsDict}, Base.HasLength})
precompile(Tuple{typeof(Base.copyto!), Array{Symbol, 1}, Base.KeySet{Symbol, RecipesPipeline.DefaultsDict}})
precompile(Tuple{typeof(RecipesPipeline.pop_kw!), RecipesPipeline.DefaultsDict, Symbol, Tuple{}})
precompile(Tuple{typeof(Base.in), Nothing, Tuple{Bool, Nothing, Symbol}})
precompile(Tuple{typeof(Plots.check_contour_levels), Int64})
precompile(Tuple{typeof(RecipesPipeline.add_series!), Plots.Plot{Plots.GRBackend}, RecipesPipeline.DefaultsDict})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, PlotUtils.ColorPalette, Symbol})
precompile(Tuple{typeof(PlotUtils.get_color_palette), PlotUtils.ColorPalette, Int64})
precompile(Tuple{typeof(Plots._update_axis), Plots.Plot{Plots.GRBackend}, Plots.Subplot{Plots.GRBackend}, RecipesPipeline.DefaultsDict, Symbol, Int64})
precompile(Tuple{typeof(RecipesPipeline.is3d), Symbol})
precompile(Tuple{typeof(RecipesPipeline.needs_3d_axes), Symbol})
precompile(Tuple{typeof(Plots.expand_extrema!), Plots.Axis, Array{Float64, 1}})
precompile(Tuple{typeof(Base.typename), UnionAll})
precompile(Tuple{typeof(Base.supertype), UnionAll})
precompile(Tuple{typeof(ColorTypes._eltypes_supported), Type{var"#s58"} where var"#s58"<:(ColorTypes.Colorant{T, N} where N where T), Type{C}} where C<:(ColorTypes.Colorant{T, N} where N where T))
precompile(Tuple{typeof(ColorTypes._eltypes_supported), Type{C}, Type} where C<:(ColorTypes.Colorant{T, N} where N where T))
precompile(Tuple{typeof(ColorTypes._parameter_upper_bound), UnionAll, Any})
precompile(Tuple{typeof(Plots.get_series_color), String, Plots.Subplot{Plots.GRBackend}, Int64, Symbol})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, Tuple{Int64, Int64, Int64}}, Base.SubString{String}})
precompile(Tuple{typeof(Base.convert), Type{ColorTypes.RGBA{Float64}}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, ColorTypes.RGBA{Float64}, Symbol})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Symbol, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Plots.label_to_string), Tuple{Base.RefValue{Symbol}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Plots.label_to_string), Tuple{Base.RefValue{Symbol}, Int64}}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Base.:(!=)), Tuple{Int64, Int64}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.:(!=)), Bool, Bool})
precompile(Tuple{typeof(Base.:(!=)), Base.Dict{Any, Any}, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Plots.is_style_supported), Plots.GRBackend, Symbol})
precompile(Tuple{typeof(Plots.is_marker_supported), Plots.GRBackend, Symbol})
precompile(Tuple{typeof(Plots.update_clims), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.update_clims), Plots.Subplot{Plots.GRBackend}, Function})
precompile(Tuple{typeof(Base.iterate), Array{RecipesBase.RecipeData, 1}, Int64})
precompile(Tuple{typeof(Plots.discrete_value!), Plots.Axis, Array{String, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 1}, Array{Int64, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 1}, Array{Int64, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Array{Int64, 1}, Symbol})
precompile(Tuple{typeof(Plots._do_plot_show), Plots.Plot{Plots.GRBackend}, Bool})
precompile(Tuple{typeof(Plots.savefig), Plots.Plot{Plots.GRBackend}, String})
precompile(Tuple{typeof(Plots.png), Plots.Plot{Plots.GRBackend}, String})
precompile(Tuple{Base.var"##open#317", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), Plots.var"#263#264"{Plots.Plot{Plots.GRBackend}}, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.:(*)), Int64, Measures.Length{:mm, Float64}})
precompile(Tuple{Type{Measures.Length{:mm, Float64}}, Float64})
precompile(Tuple{Type{Measures.BoundingBox{P1, P2} where P2<:(Tuple{Vararg{Measures.Measure, N}} where N) where P1<:(Tuple{Vararg{Measures.Measure, N}} where N)}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.setproperty!), Plots.GridLayout, Symbol, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Base.convert), Type{Measures.BoundingBox{P1, P2} where P2<:(Tuple{Vararg{Measures.Measure, N}} where N) where P1<:(Tuple{Vararg{Measures.Measure, N}} where N)}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Plots._update_min_padding!), Plots.GridLayout})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots._update_min_padding!)}, Base.EltypeUnknown, Base.HasShape{2}})
precompile(Tuple{typeof(Base.:(+)), Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{Type{NamedTuple{(:family, :pointsize, :valign, :halign, :rotation, :color), T} where T<:Tuple}, Tuple{String, Int64, Symbol, Symbol, Float64, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#42#43", Type, Type, Type, Type, Type})
precompile(Tuple{Plots.var"#font##kw", NamedTuple{(:family, :pointsize, :valign, :halign, :rotation, :color), Tuple{String, Int64, Symbol, Symbol, Float64, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}}, typeof(Plots.font)})
precompile(Tuple{typeof(Base.parse), Type{ColorTypes.Colorant{T, N} where N where T}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{Type{Plots.Font}, String, Int64, Symbol, Symbol, Float64, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{Plots.var"##gr_set_font#385", Symbol, Symbol, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Float64, typeof(Plots.gr_set_font), Plots.Font, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.get_thickness_scaling), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.:(*)), Float64, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.:(/)), Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Plots.get_size), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.maximum), Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.:(/)), Float64, Int64})
precompile(Tuple{typeof(GR.setcharheight), Float64})
precompile(Tuple{typeof(Base.setindex!), Base.RefValue{Ptr{Nothing}}, Ptr{Nothing}})
precompile(Tuple{typeof(GR.js.send), Base.Cstring, Int32})
precompile(Tuple{typeof(GR.js.recv), Base.Cstring, Int32, Base.Cstring})
precompile(Tuple{typeof(GR.init), Bool})
precompile(Tuple{typeof(Plots.gr_text_size), String})
precompile(Tuple{typeof(GR.inqtext), Int64, Int64, String})
precompile(Tuple{typeof(Base.:(*)), Int64, Float64})
precompile(Tuple{typeof(Plots._transform_ticks), Symbol})
precompile(Tuple{typeof(Plots.axis_limits), Plots.Subplot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Plots.axis_limits), Plots.Subplot{Plots.GRBackend}, Symbol, Bool, Bool})
precompile(Tuple{typeof(Base.:(<=)), Float64, Float64})
precompile(Tuple{typeof(Base.isfinite), Float64})
precompile(Tuple{typeof(Base.getproperty), Plots.Axis, Symbol})
precompile(Tuple{typeof(Base.getindex), Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Int64})
precompile(Tuple{typeof(Plots.get_ticks), Symbol, Array{Float64, 1}, Array{Any, 1}, Tuple{Float64, Float64}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.string), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{String}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{String, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.string), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Tuple{Array{Float64, 1}, Array{String, 1}}, Symbol})
precompile(Tuple{typeof(Plots.optimal_ticks_and_labels), Nothing, Tuple{Float64, Float64}, Symbol, Symbol})
precompile(Tuple{PlotUtils.var"#optimize_ticks##kw", NamedTuple{(:k_min, :k_max, :scale), Tuple{Int64, Int64, Symbol}}, typeof(PlotUtils.optimize_ticks), Float64, Float64})
precompile(Tuple{Type{Float64}, Float64})
precompile(Tuple{typeof(Base.isinteger), Float64})
precompile(Tuple{Type{Int64}, Float64})
precompile(Tuple{typeof(PlotUtils.optimize_ticks_typed), Float64, Float64, Bool, Array{Float64, 1}, Array{Float64, 1}, Int64, Int64, Int64, Float64, Float64, Float64, Float64, Bool, Nothing, Bool, Float64, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{Float64, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, RecipesPipeline.var"#9#10"{Symbol}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Float64, 1}, Base.Generator{Array{Float64, 1}, RecipesPipeline.var"#9#10"{Symbol}}})
precompile(Tuple{typeof(Base._similar_for), Array{Float64, 1}, Type{Float64}, Base.Generator{Array{Float64, 1}, RecipesPipeline.var"#9#10"{Symbol}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{Float64, 1}, RecipesPipeline.var"#9#10"{Symbol}}, Int64})
precompile(Tuple{typeof(Base.any), Function, Array{Float64, 1}})
precompile(Tuple{Base.var"##any#696", Function, typeof(Base.any), Function, Array{Float64, 1}})
precompile(Tuple{typeof(Base._any), typeof(Base.isfinite), Array{Float64, 1}, Base.Colon})
precompile(Tuple{typeof(Showoff.showoff), Array{Float64, 1}, Symbol})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Plots.var"#390#391"{typeof(Plots.convert_sci_unicode)}, Array{String, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{String, 1}, Base.Generator{Array{String, 1}, Plots.var"#390#391"{typeof(Plots.convert_sci_unicode)}}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Any, String}, Base.Dict{Char, String}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, String}, String, String})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, String}, Tuple{Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{String, String}}, Int64})
precompile(Tuple{typeof(Base.keys), Base.Dict{Any, String}})
precompile(Tuple{typeof(Base.iterate), Base.KeySet{Any, Base.Dict{Any, String}}})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Any, String}, Char})
precompile(Tuple{typeof(Base.replace), String, Base.Pair{Char, String}})
precompile(Tuple{typeof(Base.iterate), Base.KeySet{Any, Base.Dict{Any, String}}, Int64})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Any, String}, String})
precompile(Tuple{typeof(Base.replace), String, Base.Pair{String, String}})
precompile(Tuple{typeof(Base.first), Tuple{Array{Float64, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.isempty), Array{Float64, 1}})
precompile(Tuple{Type{NamedTuple{(:rotation, :color), T} where T<:Tuple}, Tuple{Int64, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{Plots.var"#gr_set_font##kw", NamedTuple{(:rotation, :color), Tuple{Int64, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}}, typeof(Plots.gr_set_font), Plots.Font, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.gr_get_ticks_size), Tuple{Array{Float64, 1}, Array{String, 1}}, Int64})
precompile(Tuple{typeof(Base.vect), Measures.Length{:mm, Float64}, Vararg{Measures.Length{:mm, Float64}, N} where N})
precompile(Tuple{typeof(Base.:(*)), Int64, Array{Measures.Length{:mm, Float64}, 1}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Int64, Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Measures.Length{:mm, Float64}}})
precompile(Tuple{typeof(Base.setindex!), Array{Measures.Length{:mm, Float64}, 1}, Measures.Length{:mm, Float64}, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Measures.Length{:mm, Float64}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Int64, Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{Type{Tuple}, Array{Measures.Length{:mm, Float64}, 1}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 2}, Type{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots._update_min_padding!)}, Base.HasShape{2}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, 2}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots._update_min_padding!)}, Int64})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{RecipesBase.AbstractLayout, 2}, Base.Slice{Base.OneTo{Int64}}, Int64})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.leftpad)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Plots.leftpad), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 1}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.leftpad)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 1}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.leftpad)}, Int64})
precompile(Tuple{typeof(Base._maximum), Array{Measures.Length{:mm, Float64}, 1}, Base.Colon})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{RecipesBase.AbstractLayout, 2}, Int64, Base.Slice{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.toppad)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Plots.toppad), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 1}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.toppad)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 1}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.toppad)}, Int64})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.rightpad)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Plots.rightpad), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 1}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.rightpad)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 1}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.rightpad)}, Int64})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.bottompad)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Plots.bottompad), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 1}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.bottompad)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 1}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.bottompad)}, Int64})
precompile(Tuple{typeof(Plots.update_child_bboxes!), Plots.GridLayout, Array{Measures.Length{:mm, Float64}, 1}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 2}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.leftpad)}, Base.HasShape{2}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.leftpad)}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 2}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.toppad)}, Base.HasShape{2}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.toppad)}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 2}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.rightpad)}, Base.HasShape{2}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.rightpad)}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 2}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.bottompad)}, Base.HasShape{2}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.bottompad)}, Int64})
precompile(Tuple{Base.var"#maximum##kw", NamedTuple{(:dims,), Tuple{Int64}}, typeof(Base.maximum), Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base._mapreduce_dim), Function, Function, Base._InitialValue, Array{Measures.Length{:mm, Float64}, 2}, Int64})
precompile(Tuple{typeof(Base.reducedim_init), Function, typeof(Base.max), Array{Measures.Length{:mm, Float64}, 2}, Int64})
precompile(Tuple{Base.var"##mapfoldl#214", Base._InitialValue, typeof(Base.mapfoldl), Function, Function, Base.SubArray{Measures.Length{:mm, Float64}, 2, Array{Measures.Length{:mm, Float64}, 2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, false}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.min), Base._InitialValue, Base.SubArray{Measures.Length{:mm, Float64}, 2, Array{Measures.Length{:mm, Float64}, 2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, false}})
precompile(Tuple{typeof(Base.:(!=)), Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base._realtype), Function, Type})
precompile(Tuple{typeof(Base.reducedim_initarray), Array{Measures.Length{:mm, Float64}, 2}, Int64, Measures.Length{:mm, Float64}, Type{Measures.Length{:mm, Float64}}})
precompile(Tuple{typeof(Base.mapreducedim!), Function, Function, Array{Measures.Length{:mm, Float64}, 2}, Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base._mapreducedim!), typeof(Base.identity), typeof(Base.max), Array{Measures.Length{:mm, Float64}, 2}, Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base.max), Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.convert), Type{Measures.Length{:mm, Float64}}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.getindex), Array{Measures.Length{:mm, Float64}, 2}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Int64})
precompile(Tuple{typeof(Base.lastindex), Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base.:(+)), Array{Measures.Length{:mm, Float64}, 2}, Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Type{Measures.Length{:mm, Float64}}})
precompile(Tuple{typeof(Base.setindex!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Measures.Length{:mm, Float64}, 2}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Base.IteratorsMD.CartesianIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}, Base.IteratorsMD.CartesianIndex{2}, Int64})
precompile(Tuple{typeof(Base.sum), Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base.:(-)), Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.:(==)), Measures.Length{:pct, Float64}, Measures.Length{:pct, Float64}})
precompile(Tuple{typeof(Base.:(-)), Measures.Length{:pct, Float64}, Measures.Length{:pct, Float64}})
precompile(Tuple{typeof(Base.:(/)), Measures.Length{:pct, Float64}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Measures.Measure, 1}, Measures.Length{:pct, Float64}, Int64})
precompile(Tuple{typeof(Base.:(*)), Measures.Length{:mm, Float64}, Measures.Length{:pct, Float64}})
precompile(Tuple{typeof(Plots.plotarea!), Plots.Subplot{Plots.GRBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Base.:(+)), Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Plots.bbox!), Plots.Subplot{Plots.GRBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Base.float), Int64})
precompile(Tuple{typeof(Base.:(*)), Float64, Int64, Float64})
precompile(Tuple{typeof(GR.setwsviewport), Int64, Float64, Int64, Float64})
precompile(Tuple{typeof(GR.setwswindow), Int64, Int64, Int64, Float64})
precompile(Tuple{typeof(Plots.gr_fill_viewport), Array{Float64, 1}, ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(GR.fillrect), Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(Plots.gr_display), Plots.Subplot{Plots.GRBackend}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Array{Float64, 1}})
precompile(Tuple{typeof(Plots.gr_viewport_from_bbox), Plots.Subplot{Plots.GRBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.get), Base.Dict{Any, Any}, Symbol, Int64})
precompile(Tuple{Type{NamedTuple{(:w, :h, :dy, :leftw, :textw, :rightw, :xoffset, :yoffset, :width_factor), T} where T<:Tuple}, Tuple{Int64, Int64, Int64, Float64, Int64, Float64, Float64, Float64, Float64}})
precompile(Tuple{typeof(Plots.gr_update_viewport_legend!), Array{Float64, 1}, Plots.Subplot{Plots.GRBackend}, NamedTuple{(:w, :h, :dy, :leftw, :textw, :rightw, :xoffset, :yoffset, :width_factor), Tuple{Int64, Int64, Int64, Float64, Int64, Float64, Float64, Float64, Float64}}})
precompile(Tuple{typeof(Base.:(==)), Bool, Bool})
precompile(Tuple{typeof(GR.setviewport), Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(Base._any), typeof(Base.identity), Base.Generator{Array{Plots.Series, 1}, Plots.var"#153#154"}, Base.Colon})
precompile(Tuple{typeof(Base.:(>)), Float64, Float64})
precompile(Tuple{typeof(GR.setwindow), Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(GR.setlinewidth), Int64})
precompile(Tuple{typeof(Plots.get_minor_ticks), Plots.Subplot{Plots.GRBackend}, Plots.Axis, Tuple{Array{Float64, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.in), Bool, Tuple{Symbol, Nothing, Bool}})
precompile(Tuple{typeof(Base.push!), Plots.Segments{Tuple{Float64, Float64}}, Tuple{Float64, Float64}, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Base.:(∉)), Symbol, Tuple{Symbol, Nothing, Bool}})
precompile(Tuple{Plots.var"#add_major_or_minor_segments#100"{Plots.Subplot{Plots.GRBackend}, RecipesPipeline.var"#9#10"{Symbol}, RecipesPipeline.var"#7#8"{Symbol}, Float64, Float64, Plots.Segments{Tuple{Float64, Float64}}, Float64, Float64, Plots.Axis, Bool}, Array{Float64, 1}, Bool, Plots.Segments{Tuple{Float64, Float64}}, Float64, Bool})
precompile(Tuple{typeof(Base.:(∉)), Bool, Tuple{Symbol, Nothing, Bool}})
precompile(Tuple{Type{NamedTuple{(:ticks, :segments, :tick_segments, :grid_segments, :minorgrid_segments, :border_segments), T} where T<:Tuple}, Tuple{Tuple{Array{Float64, 1}, Array{String, 1}}, Plots.Segments{Tuple{Float64, Float64}}, Plots.Segments{Tuple{Float64, Float64}}, Plots.Segments{Tuple{Float64, Float64}}, Plots.Segments{Tuple{Float64, Float64}}, Plots.Segments{Tuple{Float64, Float64}}}})
precompile(Tuple{typeof(Plots.gr_draw_grid), Plots.Subplot{Plots.GRBackend}, Plots.Axis, Plots.Segments{Tuple{Float64, Float64}}})
precompile(Tuple{typeof(Plots.gr_draw_grid), Plots.Subplot{Plots.GRBackend}, Plots.Axis, Plots.Segments{Tuple{Float64, Float64}}, Function})
precompile(Tuple{typeof(Plots.gr_set_line), Float64, Symbol, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.min), Int64, Int64})
precompile(Tuple{typeof(Base.max), Int64, Float64})
precompile(Tuple{typeof(GR.setlinewidth), Float64})
precompile(Tuple{typeof(Plots.gr_set_transparency), ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Float64})
precompile(Tuple{typeof(Plots.gr_polyline), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Plots.gr_draw_minorgrid), Plots.Subplot{Plots.GRBackend}, Plots.Axis, Plots.Segments{Tuple{Float64, Float64}}})
precompile(Tuple{typeof(Plots.gr_draw_minorgrid), Plots.Subplot{Plots.GRBackend}, Plots.Axis, Plots.Segments{Tuple{Float64, Float64}}, Function})
precompile(Tuple{typeof(Plots.gr_draw_spine), Plots.Subplot{Plots.GRBackend}, Plots.Axis, Plots.Segments{Tuple{Float64, Float64}}})
precompile(Tuple{typeof(Plots.gr_draw_spine), Plots.Subplot{Plots.GRBackend}, Plots.Axis, Plots.Segments{Tuple{Float64, Float64}}, Function})
precompile(Tuple{typeof(Plots.gr_set_line), Int64, Symbol, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.:(/)), Int64, Float64})
precompile(Tuple{typeof(Plots.gr_draw_border), Plots.Subplot{Plots.GRBackend}, Plots.Axis, Plots.Segments{Tuple{Float64, Float64}}})
precompile(Tuple{typeof(Plots.gr_draw_border), Plots.Subplot{Plots.GRBackend}, Plots.Axis, Plots.Segments{Tuple{Float64, Float64}}, Function})
precompile(Tuple{typeof(Plots.gr_draw_ticks), Plots.Subplot{Plots.GRBackend}, Plots.Axis, Plots.Segments{Tuple{Float64, Float64}}})
precompile(Tuple{typeof(Plots.gr_draw_ticks), Plots.Subplot{Plots.GRBackend}, Plots.Axis, Plots.Segments{Tuple{Float64, Float64}}, Function})
precompile(Tuple{typeof(Plots.gr_label_ticks), Plots.Subplot{Plots.GRBackend}, Symbol, Tuple{Array{Float64, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.floor), Float64})
precompile(Tuple{typeof(Base.iseven), Int64})
precompile(Tuple{typeof(GR.wctondc), Float64, Float64})
precompile(Tuple{typeof(Plots.gr_text), Float64, Float64, String})
precompile(Tuple{typeof(GR.text), Float64, Float64, String})
precompile(Tuple{Plots.var"#394#395"{Plots.Series}, Symbol})
precompile(Tuple{typeof(Plots.handle_surface), Array{Float64, 1}})
precompile(Tuple{typeof(Plots.gr_clims), Plots.Subplot{Plots.GRBackend}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Plots.get_clims), Plots.Subplot{Plots.GRBackend}, Plots.Series})
precompile(Tuple{typeof(Plots.xlims), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.ylims), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.copy), Array{Float64, 1}})
precompile(Tuple{typeof(RecipesPipeline.is3d), RecipesPipeline.DefaultsDict})
precompile(Tuple{typeof(Plots.iter_segments), Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{typeof(Base.map), typeof(Base.firstindex), Tuple{Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.map), typeof(Base.lastindex), Tuple{Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{Type{Plots.NaNSegmentsIterator}, Tuple{Array{Float64, 1}, Array{Float64, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, Plots.NaNSegmentsIterator, Base.HasEltype, Base.SizeUnknown})
precompile(Tuple{typeof(Base.findfirst), Function, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.findnext), Base.var"#76#77"{Plots.var"#18#19"{Tuple{Array{Float64, 1}, Array{Float64, 1}}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.findnext), Plots.var"#18#19"{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base._any), typeof(Base.identity), Base.Generator{Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Plots.var"#34#36"{Plots.Series}}, Base.Colon})
precompile(Tuple{typeof(Plots.warn_on_attr_dim_mismatch), Plots.Series, Array{Float64, 1}, Array{Float64, 1}, Nothing, Base.Generator{Array{Any, 1}, Plots.var"#5#9"}})
precompile(Tuple{Plots.var"#5#9", Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._xfadjoint), Base.BottomRF{typeof(Base.min)}, Base.Generator{Base.Generator{Array{Any, 1}, Plots.var"#5#9"}, Plots.var"#10#13"}})
precompile(Tuple{typeof(Base.foldl_impl), Base.MappingRF{Plots.var"#5#9", Base.MappingRF{Plots.var"#10#13", Base.BottomRF{typeof(Base.min)}}}, Base._InitialValue, Array{Any, 1}})
precompile(Tuple{typeof(Base.first), Base.UnitRange{Int64}})
precompile(Tuple{Base.MappingRF{Plots.var"#5#9", Base.MappingRF{Plots.var"#10#13", Base.BottomRF{typeof(Base.min)}}}, Int64, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._xfadjoint), Base.BottomRF{typeof(Base.max)}, Base.Generator{Base.Generator{Array{Any, 1}, Plots.var"#5#9"}, Plots.var"#11#14"}})
precompile(Tuple{typeof(Base.foldl_impl), Base.MappingRF{Plots.var"#5#9", Base.MappingRF{Plots.var"#11#14", Base.BottomRF{typeof(Base.max)}}}, Base._InitialValue, Array{Any, 1}})
precompile(Tuple{typeof(Base.last), Base.UnitRange{Int64}})
precompile(Tuple{Base.MappingRF{Plots.var"#5#9", Base.MappingRF{Plots.var"#11#14", Base.BottomRF{typeof(Base.max)}}}, Int64, Base.UnitRange{Int64}})
precompile(Tuple{Type{Base.UnitRange{T} where T<:Real}, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Any, 1}, Plots.var"#5#9"}})
precompile(Tuple{typeof(Base.getproperty), Plots.SeriesSegment, Symbol})
precompile(Tuple{typeof(Base.getindex), Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.vcat), Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Plots._cycle), ColorTypes.RGBA{Float64}, Int64})
precompile(Tuple{typeof(Plots.gr_set_fill), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Plots.gr_set_transparency), ColorTypes.RGBA{Float64}, Nothing})
precompile(Tuple{typeof(GR.fillarea), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Plots._cycle), Symbol, Int64})
precompile(Tuple{typeof(Plots.gr_set_line), Int64, Symbol, ColorTypes.RGBA{Float64}, Plots.Series})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Any, 1}, Plots.var"#5#9"}, Int64})
precompile(Tuple{typeof(Base._any), typeof(Base.identity), Base.Generator{Array{Symbol, 1}, Plots.var"#70#71"{Plots.Series}}, Base.Colon})
precompile(Tuple{typeof(Plots.gr_draw_segments), Plots.Series, Array{Float64, 1}, Array{Float64, 1}, Nothing, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Base.Iterators.enumerate), Tuple{Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Plots.gr_draw_markers), Plots.Series, Array{Float64, 1}, Array{Float64, 1}, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Plots.gr_draw_markers), Plots.Series, Array{Float64, 1}, Array{Float64, 1}, Tuple{Float64, Float64}, Int64, Int64})
precompile(Tuple{typeof(Base.intersect), Base.OneTo{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.isempty), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Plots.gr_draw_marker), Plots.Series, Float64, Float64, Tuple{Float64, Float64}, Int64, Int64, Int64, Symbol})
precompile(Tuple{typeof(Plots.gr_set_bordercolor), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Plots.get_markercolor), Plots.Series, Float64, Float64, Int64})
precompile(Tuple{typeof(Plots.gr_set_markercolor), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Plots.gr_set_transparency), Int64})
precompile(Tuple{typeof(GR.setmarkersize), Float64})
precompile(Tuple{typeof(GR.polymarker), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Plots.gr_add_legend), Plots.Subplot{Plots.GRBackend}, NamedTuple{(:w, :h, :dy, :leftw, :textw, :rightw, :xoffset, :yoffset, :width_factor), Tuple{Int64, Int64, Int64, Float64, Int64, Float64, Float64, Float64, Float64}}, Array{Float64, 1}})
precompile(Tuple{typeof(Patchwork.plot_percentident), Array{Float64, 1}, Int64, String})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.AbstractDict{Symbol, Any}, Type{Base.Val{:pie}}, Any, Any, Any})
precompile(Tuple{typeof(Base.sum), Array{Float64, 1}})
precompile(Tuple{typeof(Base.:(+)), Int64, Float64})
precompile(Tuple{typeof(Plots.partialcircle), Int64, Float64, Int64})
precompile(Tuple{typeof(Base.vcat), Tuple{Float64, Float64}, Array{Tuple{Float64, Float64}, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Tuple{Float64, Float64}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.first), Tuple{Array{Tuple{Float64, Float64}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.first), Tuple{Array{Tuple{Float64, Float64}, 1}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.last), Tuple{Array{Tuple{Float64, Float64}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.last), Tuple{Array{Tuple{Float64, Float64}, 1}}}})
precompile(Tuple{typeof(RecipesBase.wrap_tuple), Array{Float64, 1}})
precompile(Tuple{Type{RecipesBase.RecipeData}, RecipesPipeline.DefaultsDict, Tuple{Array{Float64, 1}}})
precompile(Tuple{typeof(Plots.partialcircle), Float64, Float64, Int64})
precompile(Tuple{typeof(Plots.get_series_color), Symbol, Plots.Subplot{Plots.GRBackend}, Int64, Symbol})
precompile(Tuple{typeof(RecipesPipeline.is_surface), Symbol})
precompile(Tuple{typeof(Plots._cycle), PlotUtils.ColorPalette, Int64})
precompile(Tuple{typeof(Base.lastindex), Array{ColorTypes.RGB{Float64}, 1}})
precompile(Tuple{typeof(Base.getindex), PlotUtils.ColorPalette, Int64})
precompile(Tuple{typeof(Base.getindex), Array{ColorTypes.RGB{Float64}, 1}, Int64})
precompile(Tuple{typeof(PlotUtils.plot_color), ColorTypes.RGB{Float64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, String, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Plots.label_to_string), Tuple{Base.RefValue{String}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Plots.label_to_string), Tuple{Base.RefValue{String}, Int64}}})
precompile(Tuple{typeof(Base.in), Bool, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Base.:(*)), Bool, Float64})
precompile(Tuple{typeof(Base.:(>)), Float64, Int64})
precompile(Tuple{Type{NamedTuple{(:w, :h, :dy, :leftw, :textw, :rightw, :xoffset, :yoffset, :width_factor), T} where T<:Tuple}, Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64}})
precompile(Tuple{typeof(Plots.gr_update_viewport_legend!), Array{Float64, 1}, Plots.Subplot{Plots.GRBackend}, NamedTuple{(:w, :h, :dy, :leftw, :textw, :rightw, :xoffset, :yoffset, :width_factor), Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64}}})
precompile(Tuple{typeof(Base.:(/)), Float64, Bool})
precompile(Tuple{typeof(Base.:(<)), Float64, Float64})
precompile(Tuple{typeof(Plots.gr_add_legend), Plots.Subplot{Plots.GRBackend}, NamedTuple{(:w, :h, :dy, :leftw, :textw, :rightw, :xoffset, :yoffset, :width_factor), Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64}}, Array{Float64, 1}})
precompile(Tuple{typeof(Plots.gr_set_fillcolor), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(GR.drawrect), Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(Plots.gr_set_line), Float64, Symbol, ColorTypes.RGBA{Float64}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.gr_polyline), Array{Float64, 1}, Array{Float64, 1}, Function})
precompile(Tuple{Plots.var"##gr_polyline#384", Symbol, Symbol, typeof(Plots.gr_polyline), Array{Float64, 1}, Array{Float64, 1}, typeof(GR.fillarea)})
precompile(Tuple{typeof(Plots.gr_set_textcolor), ColorTypes.RGBA{Float64}})
precompile(Tuple{CSV.var"#write##kw", NamedTuple{(:append, :compress, :header), Tuple{Bool, Bool, Bool}}, typeof(CSV.write), Tables.Schema{(:variable, :mean, :min, :median, :max), Tuple{Symbol, Float64, Real, Float64, Real}}, DataFrames.DataFrameRows{DataFrames.DataFrame}, String, CSV.Options{Tuple{UInt8}, UInt8, Nothing, Tuple{}, typeof(CSV._identity)}})
precompile(Tuple{typeof(CSV.with), CSV.var"#93#94"{Bool, Bool, Tables.Schema{(:variable, :mean, :min, :median, :max), Tuple{Symbol, Float64, Real, Float64, Real}}, DataFrames.DataFrameRows{DataFrames.DataFrame}, CSV.Options{Tuple{UInt8}, UInt8, Nothing, Tuple{}, typeof(CSV._identity)}, Array{UInt8, 1}, Int64, Int64, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}}, Any, Bool, Bool})
precompile(Tuple{CSV.var"#93#94"{Bool, Bool, Tables.Schema{(:variable, :mean, :min, :median, :max), Tuple{Symbol, Float64, Real, Float64, Real}}, DataFrames.DataFrameRows{DataFrames.DataFrame}, CSV.Options{Tuple{UInt8}, UInt8, Nothing, Tuple{}, typeof(CSV._identity)}, Array{UInt8, 1}, Int64, Int64, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}}, Base.IOStream})
precompile(Tuple{typeof(CSV.writenames), Array{UInt8, 1}, Int64, Int64, Base.IOStream, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, Int64, CSV.Options{Tuple{UInt8}, UInt8, Nothing, Tuple{}, typeof(CSV._identity)}})
precompile(Tuple{CSV.var"#100#101"{Array{UInt8, 1}, Base.RefValue{Int64}, Int64, Base.IOStream, Int64, CSV.Options{Tuple{UInt8}, UInt8, Nothing, Tuple{}, typeof(CSV._identity)}, Tuple{UInt8}, UInt8}, Symbol, Int64, Symbol})
precompile(Tuple{typeof(FreeTypeAbstraction.ft_done)})
