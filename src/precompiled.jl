precompile(Tuple{Base.Sort.var"##sortperm#12", Base.Sort.QuickSortAlg, Function, Function, Bool, Base.Order.ForwardOrdering, typeof(Base.sortperm), Array{Float64, 1}})
precompile(Tuple{Type{Base.Order.Perm{O, V} where V<:(AbstractArray{T, 1} where T) where O<:Base.Order.Ordering}, Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Base.Sort.QuickSortAlg, Base.Order.Perm{Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.:(!=)), UInt64, UInt64})
precompile(Tuple{typeof(Base.require), Module, Symbol})
precompile(Tuple{typeof(Parsers.__init__)})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{Base.MPFR.BigFloat, 1}, Base.MPFR.BigFloat})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{Base.GMP.BigInt, 1}, Base.GMP.BigInt})
precompile(Tuple{typeof(SentinelArrays.__init__)})
precompile(Tuple{typeof(Base.setindex!), Base.IdDict{Base.Dict{String, Any}, Nothing}, Any, Any})
precompile(Tuple{typeof(Base.setindex!), Base.IdDict{Any, Nothing}, Any, Any})
precompile(Tuple{typeof(Patchwork.include), String})
precompile(Tuple{Core.var"#@doc", LineNumberNode, Module, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.CoreLogging.shouldlog), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, Module, Symbol, Symbol})
precompile(Tuple{typeof(Base.show), IO, Base.Docs.Binding})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Module, Char, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Type})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Type})
precompile(Tuple{typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, Any, Any, Any, Any, Any, Any})
precompile(Tuple{Logging.var"##handle_message#2", Any, typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, Any, Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base.haskey), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Symbol})
precompile(Tuple{typeof(Base.get), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Symbol, Nothing})
precompile(Tuple{typeof(Logging.default_metafmt), Base.CoreLogging.LogLevel, Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base.string), Module})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.TTY})
precompile(Tuple{Base.var"##with_output_color#814", Bool, typeof(Base.with_output_color), Function, Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.write), Base.TTY, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Core.TypeofBottom})
precompile(Tuple{typeof(Base.vcat), Int64, Array{String, 1}})
precompile(Tuple{Core.var"#@cmd", LineNumberNode, Module, Any})
precompile(Tuple{Base.var"#@r_str", LineNumberNode, Module, Any, Vararg{Any, N} where N})
precompile(Tuple{Base.Multimedia.var"#@MIME_str", LineNumberNode, Module, Any})
precompile(Tuple{Type{NamedTuple{(:gap_open, :gap_extend), T} where T<:Tuple}, Tuple{Int64, Int64}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:gap_open, :gap_extend), Tuple{Int64, Int64}}, Type{BioAlignments.AffineGapScoreModel{T} where T}, BioAlignments.SubstitutionMatrix{BioSymbols.AminoAcid, Int64}})
precompile(Tuple{Base.var"#@inline", LineNumberNode, Module, Any})
precompile(Tuple{Base.var"#@assert", LineNumberNode, Module, Any, Vararg{Any, N} where N})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, BioAlignments.SubstitutionMatrix{BioSymbols.AminoAcid, Int64}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{String, BioAlignments.SubstitutionMatrix{BioSymbols.AminoAcid, Int64}}, Vararg{Base.Pair{String, BioAlignments.SubstitutionMatrix{BioSymbols.AminoAcid, Int64}}, N} where N})
precompile(Tuple{Type{Base.Dict{String, BioAlignments.SubstitutionMatrix{BioSymbols.AminoAcid, Int64}}}, Tuple{Base.Pair{String, BioAlignments.SubstitutionMatrix{BioSymbols.AminoAcid, Int64}}, Base.Pair{String, BioAlignments.SubstitutionMatrix{BioSymbols.AminoAcid, Int64}}, Base.Pair{String, BioAlignments.SubstitutionMatrix{BioSymbols.AminoAcid, Int64}}, Base.Pair{String, BioAlignments.SubstitutionMatrix{BioSymbols.AminoAcid, Int64}}, Base.Pair{String, BioAlignments.SubstitutionMatrix{BioSymbols.AminoAcid, Int64}}, Base.Pair{String, BioAlignments.SubstitutionMatrix{BioSymbols.AminoAcid, Int64}}, Base.Pair{String, BioAlignments.SubstitutionMatrix{BioSymbols.AminoAcid, Int64}}, Base.Pair{String, BioAlignments.SubstitutionMatrix{BioSymbols.AminoAcid, Int64}}}})
precompile(Tuple{typeof(Base.vect), Tuple{Int64, Int64}, Vararg{Tuple{Int64, Int64}, N} where N})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Array{Tuple{Int64, Int64}, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{String, Array{Tuple{Int64, Int64}, 1}}, Vararg{Base.Pair{String, Array{Tuple{Int64, Int64}, 1}}, N} where N})
precompile(Tuple{Type{Base.Dict{String, Array{Tuple{Int64, Int64}, 1}}}, Tuple{Base.Pair{String, Array{Tuple{Int64, Int64}, 1}}, Base.Pair{String, Array{Tuple{Int64, Int64}, 1}}, Base.Pair{String, Array{Tuple{Int64, Int64}, 1}}, Base.Pair{String, Array{Tuple{Int64, Int64}, 1}}, Base.Pair{String, Array{Tuple{Int64, Int64}, 1}}, Base.Pair{String, Array{Tuple{Int64, Int64}, 1}}, Base.Pair{String, Array{Tuple{Int64, Int64}, 1}}, Base.Pair{String, Array{Tuple{Int64, Int64}, 1}}}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Tuple{Int64, Int64}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{String, Tuple{Int64, Int64}}, Vararg{Base.Pair{String, Tuple{Int64, Int64}}, N} where N})
precompile(Tuple{Type{Base.Dict{String, Tuple{Int64, Int64}}}, Tuple{Base.Pair{String, Tuple{Int64, Int64}}, Base.Pair{String, Tuple{Int64, Int64}}, Base.Pair{String, Tuple{Int64, Int64}}, Base.Pair{String, Tuple{Int64, Int64}}, Base.Pair{String, Tuple{Int64, Int64}}, Base.Pair{String, Tuple{Int64, Int64}}, Base.Pair{String, Tuple{Int64, Int64}}, Base.Pair{String, Tuple{Int64, Int64}}}})
precompile(Tuple{typeof(Base.gensym)})
precompile(Tuple{typeof(Base.splice!), Array{Any, 1}, Int64, Array{Any, 1}})
precompile(Tuple{typeof(Base.Meta.isexpr), Any, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Base.Meta.isexpr), Any, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.:(==)), GlobalRef, GlobalRef})
precompile(Tuple{Core.Compiler.var"#256#258"{DataType, Tuple{String, String, Bool}}, Int64})
precompile(Tuple{typeof(Base._compute_eltype), Any})
precompile(Tuple{Core.Compiler.var"#256#258"{DataType, Tuple{Array{String, 1}, Char}}, Int64})
precompile(Tuple{Core.Compiler.var"#256#258"{DataType, Tuple{Parsers.var"#1#2", Bool}}, Int64})
precompile(Tuple{BioAlignments.var"##s3#1", Any, Any, Any, Any, Any})
precompile(Tuple{Core.Compiler.var"#256#258"{DataType, Tuple{String}}, Int64})
precompile(Tuple{typeof(Patchwork.julia_main)})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:description, :version, :add_version), Tuple{String, String, Bool}}, Symbol})
precompile(Tuple{typeof(Base.source_path)})
precompile(Tuple{typeof(Base.getindex), NamedTuple{(:description, :version, :add_version), Tuple{String, String, Bool}}, Symbol})
precompile(Tuple{Type{Base.Set{Char}}})
precompile(Tuple{typeof(Base.iterate), Base.Set{Char}})
precompile(Tuple{typeof(Base.convert), Type{AbstractString}, String})
precompile(Tuple{typeof(Base.convert), Type{Base.Set{Char}}, Base.Set{Char}})
precompile(Tuple{typeof(Base.copy), Array{ArgParse.ArgParseGroup, 1}})
precompile(Tuple{typeof(Base.convert), Type{Array{ArgParse.ArgParseGroup, 1}}, Array{ArgParse.ArgParseGroup, 1}})
precompile(Tuple{typeof(Base.getindex), Type{ArgParse.ArgParseField}})
precompile(Tuple{typeof(Base.convert), Type{Array{ArgParse.ArgParseField, 1}}, Array{ArgParse.ArgParseField, 1}})
precompile(Tuple{Type{Base.Dict{AbstractString, Any}}})
precompile(Tuple{typeof(Base.convert), Type{Base.Dict{AbstractString, Any}}, Base.Dict{AbstractString, Any}})
precompile(Tuple{typeof(Base.convert), Type{ArgParse.ArgParseTable}, ArgParse.ArgParseTable})
precompile(Tuple{typeof(Base.promote_typejoin), Any, Any})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, String}, Type{Symbol}, Type{Any}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, Any}, Base.Dict{Symbol, String}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, Bool}, Base.Pair{Symbol, DataType}, Base.Pair{Symbol, Char}, Base.Pair{Symbol, String}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Char, Symbol})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Dict{Symbol, Any}})
precompile(Tuple{Type{NamedTuple{(:nargs, :help, :metavar, :arg_type, :required), T} where T<:Tuple}, Tuple{Char, String, String, DataType, Bool}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:nargs, :help, :metavar, :arg_type, :required), Tuple{Char, String, String, DataType, Bool}}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:nargs, :help, :metavar, :arg_type, :required), Tuple{Char, String, String, DataType, Bool}}})
precompile(Tuple{typeof(Base.keys), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:nargs, :help, :metavar, :arg_type, :required), Tuple{Char, String, String, DataType, Bool}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:nargs, :help, :metavar, :arg_type, :required), Tuple{Char, String, String, DataType, Bool}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, ArgParse.var"#24#26", Base.Dict{Symbol, Any}})
precompile(Tuple{Type{Base.Dict{Symbol, Bool}}, Base.Generator{Base.Dict{Symbol, Any}, ArgParse.var"#24#26"}})
precompile(Tuple{typeof(Base.indexed_iterate), Base.Pair{Symbol, Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Base.Pair{Symbol, Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ArgParseSettings, Symbol})
precompile(Tuple{typeof(Base.iterate), Base.Dict{Symbol, Bool}})
precompile(Tuple{typeof(Base.iterate), Base.Dict{Symbol, Bool}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Union{Int64, Symbol}}, Symbol})
precompile(Tuple{typeof(Base.:(∉)), Symbol, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ArgConsumerType, Symbol})
precompile(Tuple{typeof(Base.getindex), Type{AbstractString}})
precompile(Tuple{typeof(Base.convert), Type{Array{AbstractString, 1}}, Array{AbstractString, 1}})
precompile(Tuple{typeof(Base.convert), Type{Type}, Type})
precompile(Tuple{typeof(Base.convert), Type{Symbol}, Symbol})
precompile(Tuple{typeof(Base.convert), Type{ArgParse.ArgConsumerType}, ArgParse.ArgConsumerType})
precompile(Tuple{typeof(Base.convert), Type{Union{AbstractString, Array{var"#s4", 1} where var"#s4"<:AbstractString}}, String})
precompile(Tuple{typeof(Base.in), Char, String})
precompile(Tuple{typeof(Base.occursin), Base.Regex, String})
precompile(Tuple{typeof(Base.push!), Array{AbstractString, 1}, String})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Array{AbstractString, 1}, Array{AbstractString, 1}, Array{AbstractString, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Array{AbstractString, 1}, Array{AbstractString, 1}, Array{AbstractString, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.isempty), Array{AbstractString, 1}})
precompile(Tuple{typeof(Base.getindex), Array{AbstractString, 1}, Int64})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, String})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, Array{AbstractString, 1}})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, ArgParse.ArgConsumerType})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, Symbol})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ArgParseField, Symbol})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ArgParseGroup, Symbol})
precompile(Tuple{typeof(Base.append!), Array{Symbol, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.:(∉)), Symbol, Tuple{Int64, Symbol, Symbol}})
precompile(Tuple{Type{Array{String, N} where N}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, Array{String, 1}})
precompile(Tuple{typeof(Base.convert), Type{Any}, Array{String, 1}})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ArgParseTable, Symbol})
precompile(Tuple{typeof(Base.keys), Base.Dict{AbstractString, Any}})
precompile(Tuple{typeof(Base.iterate), Base.KeySet{AbstractString, Base.Dict{AbstractString, Any}}})
precompile(Tuple{typeof(Base.iterate), Array{ArgParse.ArgParseField, 1}})
precompile(Tuple{typeof(Base.push!), Array{ArgParse.ArgParseField, 1}, ArgParse.ArgParseField})
precompile(Tuple{typeof(Base.iterate), Array{ArgParse.ArgParseField, 1}, Int64})
precompile(Tuple{typeof(Base.iterate), Array{AbstractString, 1}})
precompile(Tuple{typeof(Base.iterate), Array{AbstractString, 1}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, DataType}, Base.Pair{Symbol, String}, Base.Pair{Symbol, String}}, Int64})
precompile(Tuple{Type{NamedTuple{(:default, :help, :metavar, :arg_type), T} where T<:Tuple}, Tuple{String, String, String, DataType}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:default, :help, :metavar, :arg_type), Tuple{String, String, String, DataType}}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:default, :help, :metavar, :arg_type), Tuple{String, String, String, DataType}}})
precompile(Tuple{typeof(Base.keys), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:default, :help, :metavar, :arg_type), Tuple{String, String, String, DataType}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:default, :help, :metavar, :arg_type), Tuple{String, String, String, DataType}}}})
precompile(Tuple{typeof(Base.deepcopy), String})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, DataType}, Base.Pair{Symbol, Array{String, 1}}, Base.Pair{Symbol, String}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{String, 1}, Symbol})
precompile(Tuple{Type{NamedTuple{(:default, :help, :metavar, :arg_type), T} where T<:Tuple}, Tuple{Array{String, 1}, String, String, DataType}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:default, :help, :metavar, :arg_type), Tuple{Array{String, 1}, String, String, DataType}}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:default, :help, :metavar, :arg_type), Tuple{Array{String, 1}, String, String, DataType}}})
precompile(Tuple{typeof(Base.keys), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:default, :help, :metavar, :arg_type), Tuple{Array{String, 1}, String, String, DataType}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:default, :help, :metavar, :arg_type), Tuple{Array{String, 1}, String, String, DataType}}}})
precompile(Tuple{typeof(Base.deepcopy), Array{String, 1}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, DataType}, Base.Pair{Symbol, String}}, Int64})
precompile(Tuple{Type{NamedTuple{(:help, :metavar, :arg_type), T} where T<:Tuple}, Tuple{String, String, DataType}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:help, :metavar, :arg_type), Tuple{String, String, DataType}}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:help, :metavar, :arg_type), Tuple{String, String, DataType}}})
precompile(Tuple{typeof(Base.keys), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:help, :metavar, :arg_type), Tuple{String, String, DataType}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:help, :metavar, :arg_type), Tuple{String, String, DataType}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{Symbol, String}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, Int64}, Base.Pair{Symbol, DataType}, Base.Pair{Symbol, String}}, Int64})
precompile(Tuple{Type{NamedTuple{(:default, :help, :metavar, :arg_type), T} where T<:Tuple}, Tuple{Int64, String, String, DataType}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:default, :help, :metavar, :arg_type), Tuple{Int64, String, String, DataType}}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:default, :help, :metavar, :arg_type), Tuple{Int64, String, String, DataType}}})
precompile(Tuple{typeof(Base.keys), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:default, :help, :metavar, :arg_type), Tuple{Int64, String, String, DataType}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:default, :help, :metavar, :arg_type), Tuple{Int64, String, String, DataType}}}})
precompile(Tuple{typeof(Base.deepcopy), Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, Char}, Base.Pair{Symbol, DataType}, Base.Pair{Symbol, String}}, Int64})
precompile(Tuple{Type{NamedTuple{(:default, :help, :metavar, :arg_type), T} where T<:Tuple}, Tuple{Char, String, String, DataType}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:default, :help, :metavar, :arg_type), Tuple{Char, String, String, DataType}}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:default, :help, :metavar, :arg_type), Tuple{Char, String, String, DataType}}})
precompile(Tuple{typeof(Base.keys), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:default, :help, :metavar, :arg_type), Tuple{Char, String, String, DataType}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:default, :help, :metavar, :arg_type), Tuple{Char, String, String, DataType}}}})
precompile(Tuple{typeof(Base.deepcopy), Char})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, Symbol}}, Int64})
precompile(Tuple{Type{NamedTuple{(:help, :action), T} where T<:Tuple}, Tuple{String, Symbol}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:help, :action), Tuple{String, Symbol}}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:help, :action), Tuple{String, Symbol}}})
precompile(Tuple{typeof(Base.keys), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:help, :action), Tuple{String, Symbol}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:help, :action), Tuple{String, Symbol}}}})
precompile(Tuple{typeof(Base.:(!=)), Symbol, Symbol})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, Type})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, Bool})
precompile(Tuple{typeof(Base.convert), Type{Any}, Bool})
precompile(Tuple{typeof(Base.all), Function, Array{String, 1}})
precompile(Tuple{Base.var"##all#698", Function, typeof(Base.all), Function, Array{String, 1}})
precompile(Tuple{typeof(Base._all), ArgParse.var"#66#68", Array{String, 1}, Base.Colon})
precompile(Tuple{typeof(Base.isempty), Base.Set{Char}})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseSettings, Symbol, Bool})
precompile(Tuple{Type{NamedTuple{(:action, :help, :group), T} where T<:Tuple}, Tuple{Symbol, String, String}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:action, :help, :group), Tuple{Symbol, String, String}}})
precompile(Tuple{typeof(Base.keys), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:action, :help, :group), Tuple{Symbol, String, String}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:action, :help, :group), Tuple{Symbol, String, String}}}})
precompile(Tuple{typeof(Base.first), Array{String, 1}})
precompile(Tuple{typeof(Base.foreach), ArgParse.var"#do_one#19"{ArgParse.ArgParseSettings, ArgParse.var"#r#18"{ArgParse.ArgParseSettings}, Array{AbstractString, 1}, Array{AbstractString, 1}, Array{AbstractString, 1}}, Array{String, 1}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, ArgParse.var"#61#63", Array{ArgParse.ArgParseGroup, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, ArgParse.var"#60#62", Base.Iterators.Filter{ArgParse.var"#61#63", Array{ArgParse.ArgParseGroup, 1}}})
precompile(Tuple{Type{Base.Dict{ArgParse.ArgParseGroup, AbstractString}}, Base.Generator{Base.Iterators.Filter{ArgParse.var"#61#63", Array{ArgParse.ArgParseGroup, 1}}, ArgParse.var"#60#62"}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Char, String})
precompile(Tuple{typeof(Base.deepcopy), Bool})
precompile(Tuple{typeof(Base.convert), Type{Array{T, 1} where T}, Array{String, 1}})
precompile(Tuple{Type{Base.Set{AbstractString}}})
precompile(Tuple{typeof(Base.convert), Type{Base.Set{AbstractString}}, Base.Set{AbstractString}})
precompile(Tuple{typeof(Base.convert), Type{Base.Dict{ArgParse.ArgParseGroup, AbstractString}}, Base.Dict{ArgParse.ArgParseGroup, AbstractString}})
precompile(Tuple{typeof(Base.convert), Type{Base.Dict{String, Any}}, Base.Dict{String, Any}})
precompile(Tuple{Core.Compiler.var"#256#258"{DataType, Tuple{Nothing, Bool}}, Int64})
precompile(Tuple{Type{Base.Channel{T} where T}, Function})
precompile(Tuple{Base.var"##_#516", Nothing, Bool, Type{Base.Channel{Any}}, ArgParse.var"#67#69"{ArgParse.ArgParseSettings, ArgParse.ParserState}, Int64})
precompile(Tuple{Base.var"#517#518"{ArgParse.var"#67#69"{ArgParse.ArgParseSettings, ArgParse.ParserState}, Base.Channel{Any}}})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ParserState, Symbol})
precompile(Tuple{typeof(Base.isequal), Char})
precompile(Tuple{typeof(Base.findfirst), Function, String})
precompile(Tuple{typeof(Base.popfirst!), Array{String, 1}})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ParserState, Symbol, String})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, AbstractString}}, String})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ParserState, Symbol, Nothing})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Symbol})
precompile(Tuple{typeof(Base.iterate), Base.Channel{Any}})
precompile(Tuple{typeof(Base.convert), Type{ArgParse.ArgParseField}, ArgParse.ArgParseField})
precompile(Tuple{typeof(Base.iterate), Array{ArgParse.ArgParseGroup, 1}})
precompile(Tuple{typeof(Base.iterate), Array{ArgParse.ArgParseGroup, 1}, Int64})
precompile(Tuple{typeof(Base.haskey), Base.Dict{ArgParse.ArgParseGroup, AbstractString}, ArgParse.ArgParseGroup})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ParserState, Symbol, Bool})
precompile(Tuple{typeof(Base.push!), Base.Set{AbstractString}, String})
precompile(Tuple{Base.var"#521#522"{Base.Channel{Any}, Task}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, ArgParse.var"#37#40", Array{ArgParse.ArgParseGroup, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, ArgParse.var"#36#39", Base.Iterators.Filter{ArgParse.var"#37#40", Array{ArgParse.ArgParseGroup, 1}}})
precompile(Tuple{Type{Base.Dict{ArgParse.ArgParseGroup, Bool}}, Base.Generator{Base.Iterators.Filter{ArgParse.var"#37#40", Array{ArgParse.ArgParseGroup, 1}}, ArgParse.var"#36#39"}})
precompile(Tuple{typeof(Base.in), String, Base.Set{AbstractString}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{ArgParse.ArgParseGroup, Bool}, Bool, ArgParse.ArgParseGroup})
precompile(Tuple{typeof(Base.iterate), Base.Dict{ArgParse.ArgParseGroup, Bool}})
precompile(Tuple{typeof(Base.indexed_iterate), Base.Pair{ArgParse.ArgParseGroup, Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Base.Pair{ArgParse.ArgParseGroup, Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Dict{ArgParse.ArgParseGroup, Bool}, Int64})
precompile(Tuple{typeof(Base.any), Function, Array{ArgParse.ArgParseField, 1}})
precompile(Tuple{Base.var"##any#696", Function, typeof(Base.any), Function, Array{ArgParse.ArgParseField, 1}})
precompile(Tuple{typeof(Base._any), typeof(ArgParse.is_cmd), Array{ArgParse.ArgParseField, 1}, Base.Colon})
precompile(Tuple{typeof(Base.pop!), Array{ArgParse.ArgParseField, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.DevNull, Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.DevNull, Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.setup_stdio), Base.TTY, Bool})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.TTY, Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.TTY, Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.rawhandle), Base.TTY})
precompile(Tuple{typeof(Base.read), Base.PipeEndpoint})
precompile(Tuple{typeof(Patchwork.printinfo), Base.SubString{String}, Int64, String})
precompile(Tuple{typeof(Base.getindex), Base.Dict{String, Tuple{Int64, Int64}}, String})
precompile(Tuple{typeof(Patchwork.checkgappenalty), String, Int64, Int64})
precompile(Tuple{typeof(Patchwork.isdiamonddatabase), String})
precompile(Tuple{typeof(Base.string), Int64})
precompile(Tuple{typeof(Base.push!), Array{String, 1}, String, String})
precompile(Tuple{typeof(Patchwork.pool), String})
precompile(Tuple{typeof(FASTX.sequence), Type{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, FASTX.FASTA.Record, Base.UnitRange{Int64}})
precompile(Tuple{Type{Patchwork.SequenceRecord}, String, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}})
precompile(Tuple{typeof(BioSequences.ungap), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}})
precompile(Tuple{DataFrames.var"##make_unique!#1", Bool, typeof(DataFrames.make_unique!), Array{Symbol, 1}, Array{Symbol, 1}})
precompile(Tuple{DataFrames.var"#DataFrame#144#146", Bool, Type{DataFrames.DataFrame}, Array{Any, 1}, DataFrames.Index})
precompile(Tuple{typeof(Base.length), Array{Float64, 1}})
precompile(Tuple{typeof(DataFrames._preprocess_column), Array{String, 1}, Int64, Bool})
precompile(Tuple{typeof(DataFrames._preprocess_column), Array{Int64, 1}, Int64, Bool})
precompile(Tuple{typeof(DataFrames._preprocess_column), Array{Float64, 1}, Int64, Bool})
precompile(Tuple{typeof(Base.firstindex), Array{String, 1}})
precompile(Tuple{typeof(Base.firstindex), Array{Int64, 1}})
precompile(Tuple{typeof(Base.firstindex), Array{Float64, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{var"#s813", 1} where var"#s813", 1}, Array{String, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{var"#s813", 1} where var"#s813", 1}, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{var"#s813", 1} where var"#s813", 1}, Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.readline), Base.TTY})
precompile(Tuple{typeof(Patchwork.cleanfiles), String, Vararg{String, N} where N})
precompile(Tuple{typeof(Patchwork.diamond_makeblastdb), String, String, Array{String, 1}})
precompile(Tuple{typeof(Base.setup_stdio), Base.FileRedirect, Bool})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.Filesystem.File, Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.Filesystem.File, Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.setup_stdio), Base.Filesystem.File, Bool})
precompile(Tuple{typeof(Base.rawhandle), Base.Filesystem.File})
precompile(Tuple{typeof(Base.close_stdio), Base.Filesystem.File})
precompile(Tuple{typeof(Base.convert), Type{Array{String, 1}}, Array{String, 1}})
precompile(Tuple{typeof(Patchwork.diamond_blastx), Patchwork.MultipleSequenceAlignment, String, String, Array{String, 1}})
precompile(Tuple{Type{String}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}})
precompile(Tuple{typeof(Base.:(*)), Char, String, Char, String, Char})
precompile(Tuple{typeof(Base.string), Char, String, Vararg{Union{Char, Base.SubString{String}, String}, N} where N})
precompile(Tuple{typeof(Base.arg_gen), Array{Any, 1}})
precompile(Tuple{typeof(Base.cmd_interpolate), Int64})
precompile(Tuple{typeof(Base.cmd_interpolate), String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.map), typeof(Base.cmd_interpolate1), Tuple{String}})
precompile(Tuple{typeof(Base.cstr), String})
precompile(Tuple{typeof(Mmap.mmap), String, Type{Array{UInt8, 1}}})
precompile(Tuple{Base.var"##open#317", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), Mmap.var"#7#8"{Array{UInt8, 1}, Bool, Bool, Tuple{Int64}, Int64}, String, Vararg{String, N} where N})
precompile(Tuple{Type{Parsers.Options{false, true, true, false, Base.Missing, UInt8, Nothing}}, Array{String, 1}, Base.Missing, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, Array{Tuple{Ptr{UInt8}, Int64}, 1}, Array{Tuple{Ptr{UInt8}, Int64}, 1}, Nothing, Nothing, Bool, Bool})
precompile(Tuple{typeof(CSV.detectcolumnnames), Array{UInt8, 1}, Int64, Int64, Int64, Parsers.Options{false, true, true, false, Base.Missing, UInt8, Nothing}, Array{String, 1}, Bool})
precompile(Tuple{typeof(Base.iterate), Base.ValueIterator{Base.Dict{Type, Type}}})
precompile(Tuple{typeof(Base.vcat), Array{Type, 1}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, CSV.var"#15#19", Array{Type, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(CSV.nonstandardtype), Base.Iterators.Filter{CSV.var"#15#19", Array{Type, 1}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.Iterators.Filter{CSV.var"#15#19", Array{Type, 1}}, typeof(CSV.nonstandardtype)}})
precompile(Tuple{Type{CSV.Header{false, Parsers.Options{false, true, true, false, Base.Missing, UInt8, Nothing}, Array{UInt8, 1}}}, String, Array{Symbol, 1}, Int64, Int64, UInt8, Array{UInt8, 1}, Int64, Int64, Int64, Parsers.Options{false, true, true, false, Base.Missing, UInt8, Nothing}, Nothing, Array{Int64, 1}, Array{Type, 1}, Array{UInt8, 1}, Array{Int64, 1}, Float64, Type})
precompile(Tuple{Parsers.var"##s31#19", Any, Any, Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Dates.character_codes), Type{Dates.DateFormat{Symbol("yyyy-mm-dd"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}}}}})
precompile(Tuple{typeof(Base.first), Core.SimpleVector})
precompile(Tuple{typeof(Base.push!), Array{Char, 1}, Char})
precompile(Tuple{typeof(Dates.genvar), DataType})
precompile(Tuple{typeof(Base._array_for), Type{Symbol}, Tuple{DataType, DataType, DataType}, Base.HasLength})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{Symbol, 1}, Symbol, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Parsers.var"#20#21", Tuple{DataType, DataType, DataType}})
precompile(Tuple{Type{Tuple}, Base.Generator{Tuple{DataType, DataType, DataType}, Parsers.var"#20#21"}})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Tuple{DataType, DataType, DataType}, Base.HasLength, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Tuple{DataType, DataType, DataType}, Parsers.var"#20#21"}, Int64})
precompile(Tuple{typeof(Base.Iterators.zip), Array{Symbol, 1}, Vararg{Any, N} where N})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64}}})
precompile(Tuple{typeof(Base._array_for), Type{Expr}, Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64}}}, Base.HasLength})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Array{Expr, 1}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64}}, Tuple{Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Base.setindex!), Array{Expr, 1}, Expr, Int64})
precompile(Tuple{typeof(Base.map), typeof(tuple), Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64}}, Tuple{Tuple{Int64}, Tuple{Int64}}})
precompile(Tuple{Parsers.var"##s31#22", Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Dates._directives), Type{Dates.DateFormat{Symbol("yyyy-mm-dd"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}}}}})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Array{Type, 1}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Type, 1}, Parsers.var"#23#24"}, Int64})
precompile(Tuple{typeof(Base.length), Core.SimpleVector})
precompile(Tuple{Base.var"#@goto", LineNumberNode, Module, Symbol})
precompile(Tuple{Base.var"#@label", LineNumberNode, Module, Symbol})
precompile(Tuple{typeof(Dates.character_codes), Type{Dates.DateFormat{Symbol("yyyy-mm-dd\THH:MM:SS.s"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}}}})
precompile(Tuple{typeof(Base._array_for), Type{Symbol}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}, Base.HasLength})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Parsers.var"#20#21", Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
precompile(Tuple{Type{Tuple}, Base.Generator{Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}, Parsers.var"#20#21"}})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}, Base.HasLength, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}, Parsers.var"#20#21"}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Int64, 1}, Dates.AMPM, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}, Parsers.var"#20#21"}, Int64, Int64})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}})
precompile(Tuple{typeof(Base._array_for), Type{Expr}, Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}}, Base.HasLength})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}, Tuple{Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}, Tuple{Tuple{Int64}, Tuple{Int64}}})
precompile(Tuple{typeof(Dates._directives), Type{Dates.DateFormat{Symbol("yyyy-mm-dd\THH:MM:SS.s"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}}}})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64}}, Tuple{Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64}}, Tuple{Tuple{Int64}, Tuple{Int64}}})
precompile(Tuple{typeof(Dates.character_codes), Type{Dates.DateFormat{Symbol("HH:MM:SS.s"), Tuple{Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}}}})
precompile(Tuple{typeof(Base._array_for), Type{Symbol}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType}, Base.HasLength})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Parsers.var"#20#21", Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
precompile(Tuple{Type{Tuple}, Base.Generator{Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType}, Parsers.var"#20#21"}})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType}, Base.HasLength, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType}, Parsers.var"#20#21"}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType}, Parsers.var"#20#21"}, Int64, Int64})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}})
precompile(Tuple{typeof(Base._array_for), Type{Expr}, Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}}, Base.HasLength})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}, Tuple{Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}, Tuple{Tuple{Int64}, Tuple{Int64}}})
precompile(Tuple{typeof(Dates._directives), Type{Dates.DateFormat{Symbol("HH:MM:SS.s"), Tuple{Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}}}})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64}}, Tuple{Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64}}, Tuple{Tuple{Int64}, Tuple{Int64}}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:debug, :typemap), Tuple{Bool, Base.Dict{Type, Type}}}, Type{CSV.File{threaded} where threaded}, CSV.Header{false, Parsers.Options{false, true, true, false, Base.Missing, UInt8, Nothing}, Array{UInt8, 1}}})
precompile(Tuple{typeof(CSV.allocate), Int64, Int64, Array{Type, 1}, Array{UInt8, 1}, Array{CSV.RefPool, 1}})
precompile(Tuple{typeof(CSV.allocate), Core.TypeofBottom, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{var"#s813", 1} where var"#s813", 1}, SentinelArrays.MissingVector, Int64})
precompile(Tuple{typeof(CSV.parsefilechunk!), Base.Val{false}, Int64, Base.Dict{Type, Type}, Array{AbstractArray{var"#s813", 1} where var"#s813", 1}, Array{UInt8, 1}, Int64, Int64, Int64, Array{Int64, 1}, Float64, Array{CSV.RefPool, 1}, Int64, Int64, Array{Type, 1}, Array{UInt8, 1}, Bool, Parsers.Options{false, true, true, false, Base.Missing, UInt8, Nothing}, Nothing, Type{Tuple{}}, Int64})
precompile(Tuple{Type{Base.Dict{Union{Base.Missing, String}, UInt32}}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{var"#s813", 1} where var"#s813", 1}, Array{UInt32, 1}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Type, Type}, Type})
precompile(Tuple{typeof(CSV.allocate), Type, Int64})
precompile(Tuple{Type{SentinelArrays.SentinelArray{Int64, 1, S, V, A} where A<:AbstractArray{Int64, 1} where V where S}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.reinterpret), Type{Int64}, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.getindex), Base.ReinterpretArray{Int64, 1, UInt8, Array{UInt8, 1}, false}, Int64})
precompile(Tuple{typeof(Base.setindex!), SentinelArrays.SentinelArray{Int64, 1, Int64, Base.Missing, Array{Int64, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{var"#s813", 1} where var"#s813", 1}, SentinelArrays.SentinelArray{Int64, 1, Int64, Base.Missing, Array{Int64, 1}}, Int64})
precompile(Tuple{Type{SentinelArrays.SentinelArray{Float64, 1, S, V, A} where A<:AbstractArray{Float64, 1} where V where S}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.reinterpret), Type{Float64}, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.getindex), Base.ReinterpretArray{Float64, 1, UInt8, Array{UInt8, 1}, false}, Int64})
precompile(Tuple{typeof(Base.setindex!), SentinelArrays.SentinelArray{Float64, 1, Float64, Base.Missing, Array{Float64, 1}}, Float64, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{var"#s813", 1} where var"#s813", 1}, SentinelArrays.SentinelArray{Float64, 1, Float64, Base.Missing, Array{Float64, 1}}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{UInt32, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{String, 1}, UInt32})
precompile(Tuple{typeof(Base.setindex!), SentinelArrays.SentinelArray{String, 1, UndefInitializer, Base.Missing, Array{String, 1}}, String, Int64})
precompile(Tuple{typeof(Base.resize!), SentinelArrays.SentinelArray{String, 1, UndefInitializer, Base.Missing, Array{String, 1}}, Int64})
precompile(Tuple{typeof(Base.resize!), SentinelArrays.SentinelArray{Int64, 1, Int64, Base.Missing, Array{Int64, 1}}, Int64})
precompile(Tuple{typeof(Base.resize!), SentinelArrays.SentinelArray{Float64, 1, Float64, Base.Missing, Array{Float64, 1}}, Int64})
precompile(Tuple{typeof(Base.parent), SentinelArrays.SentinelArray{String, 1, UndefInitializer, Base.Missing, Array{String, 1}}})
precompile(Tuple{typeof(Base.parent), SentinelArrays.SentinelArray{Int64, 1, Int64, Base.Missing, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.parent), SentinelArrays.SentinelArray{Float64, 1, Float64, Base.Missing, Array{Float64, 1}}})
precompile(Tuple{CSV.var"#25#27", Tuple{Symbol, Array{String, 1}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Symbol}, Type{Array{String, 1}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Array{String, 1}}, Array{String, 1}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Array{String, 1}}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Array{AbstractArray{var"#s813", 1} where var"#s813", 1}}}, CSV.var"#25#27"}, Tuple{Int64, Int64}})
precompile(Tuple{CSV.var"#25#27", Tuple{Symbol, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, Array{String, 1}}, Type{Symbol}, Type{Array{T, 1} where T}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, Array{T, 1} where T}, Base.Dict{Symbol, Array{String, 1}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Array{T, 1} where T}, Array{Int64, 1}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Array{T, 1} where T}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Array{AbstractArray{var"#s813", 1} where var"#s813", 1}}}, CSV.var"#25#27"}, Tuple{Int64, Int64}})
precompile(Tuple{CSV.var"#25#27", Tuple{Symbol, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Array{T, 1} where T}, Array{Float64, 1}, Symbol})
precompile(Tuple{Type{CSV.File{false}}, String, Array{Symbol, 1}, Array{Type, 1}, Int64, Int64, Array{AbstractArray{var"#s813", 1} where var"#s813", 1}, Base.Dict{Symbol, Array{T, 1} where T}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, AbstractArray{var"#s813", 1} where var"#s813"}, Array{String, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, AbstractArray{var"#s813", 1} where var"#s813"}, Array{Int64, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, AbstractArray{var"#s813", 1} where var"#s813"}, Array{Float64, 1}, Symbol})
precompile(Tuple{typeof(Base.:(|>)), CSV.File{false}, Type{DataFrames.DataFrame}})
precompile(Tuple{DataFrames.var"#DataFrame#144#146", Bool, Type{DataFrames.DataFrame}, Array{AbstractArray{var"#s813", 1} where var"#s813", 1}, DataFrames.Index})
precompile(Tuple{typeof(Base._ntuple), DataFrames.var"#110#111"{DataFrames.DataFrame}, Int64})
precompile(Tuple{typeof(Base._array_for), Type{Array{String, 1}}, Base.UnitRange{Int64}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{String, 1}, 1}, Array{String, 1}, Base.Generator{Base.UnitRange{Int64}, DataFrames.var"#110#111"{DataFrames.DataFrame}}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Array{String, 1}, 1}, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{T, 1} where T, 1}, Base.Generator{Base.UnitRange{Int64}, DataFrames.var"#110#111"{DataFrames.DataFrame}}, Int64, Int64})
precompile(Tuple{Base.Cartesian.var"#@ncall", LineNumberNode, Module, Int64, Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{String, 1}, Array{String, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{String, 1}, Array{Float64, 1}, Array{Float64, 1}}, Base.Val{true}})
precompile(Tuple{typeof(DataFrames.refpool_and_array), Array{String, 1}})
precompile(Tuple{typeof(DataFrames.refpool_and_array), Array{Int64, 1}})
precompile(Tuple{typeof(Base.GMP.MPZ.sub), Base.GMP.BigInt, Base.GMP.BigInt})
precompile(Tuple{typeof(DataFrames.refpool_and_array), Array{Float64, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.Style{Tuple}, Function, Tuple{Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{Int64, 1}}}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.first), Tuple{Tuple{Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{Int64, 1}}}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.first), Tuple{Tuple{Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{Int64, 1}}}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.first), Tuple{Tuple{Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{Int64, 1}}}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.last), Tuple{Tuple{Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{Int64, 1}}}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.last), Tuple{Tuple{Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{Int64, 1}}}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.last), Tuple{Tuple{Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{Int64, 1}}}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}}}}})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{String, 1}, Array{String, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{String, 1}, Array{Float64, 1}, Array{Float64, 1}}, Tuple{Nothing, Nothing, Nothing, Nothing, Nothing, DataFrames.IntegerRefpool{Int64}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Tuple{Nothing, Nothing, Nothing, Nothing, Nothing, DataFrames.IntegerRefarray{Array{Int64, 1}}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Val{true}, Nothing, Bool, Bool})
precompile(Tuple{typeof(DataFrames.hashrows_col!), Array{UInt64, 1}, Array{Bool, 1}, Array{String, 1}, Nothing, Bool})
precompile(Tuple{typeof(DataFrames.hashrows_col!), Array{UInt64, 1}, Array{Bool, 1}, Array{Int64, 1}, Nothing, Bool})
precompile(Tuple{typeof(DataFrames.hashrows_col!), Array{UInt64, 1}, Array{Bool, 1}, Array{Float64, 1}, Nothing, Bool})
precompile(Tuple{typeof(DataFrames.nrow), DataFrames.DataFrame})
precompile(Tuple{typeof(Base.deleteat!), Array{String, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.deleteat!), Array{Int64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.deleteat!), Array{Float64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{Type{String}, String})
precompile(Tuple{Type{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, String})
precompile(Tuple{typeof(Base.getindex), Array{Int64, 1}, Int64})
precompile(Tuple{Type{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}}, String})
precompile(Tuple{Type{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}}, String, BioSequences.AsciiAlphabet})
precompile(Tuple{typeof(BioSequences.encode_chunks!), BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, Int64, Array{UInt8, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 1}, Int64})
precompile(Tuple{Type{Patchwork.DiamondSearchResult}, Patchwork.SequenceIdentifier, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64, Int64, Int64, Patchwork.SequenceIdentifier, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, Int64, Int64, String, Float64, Float64})
precompile(Tuple{typeof(Base.setindex!), Array{Patchwork.DiamondSearchResult, 1}, Patchwork.DiamondSearchResult, Int64})
precompile(Tuple{Type{Tuple}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Type{Tables.Schema{names, types} where types where names}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Nothing})
precompile(Tuple{typeof(Base.map), Type{Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Tables._buildcolumns), Tables.IteratorWrapper{Array{Patchwork.DiamondSearchResult, 1}}, Tables.IteratorRow{Patchwork.DiamondSearchResult}, Int64, Tables.Schema{(:queryid, :querysequence, :full_querysequence, :querystart, :queryend, :queryframe, :subjectid, :subjectsequence, :subjectstart, :subjectend, :cigar, :percentidentical, :bitscore), nothing}, Tuple{Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector}, Base.RefValue{Any}})
precompile(Tuple{typeof(Tables.replacex), Tuple{Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector}, Int64, Array{Patchwork.SequenceIdentifier, 1}})
precompile(Tuple{typeof(Tables.replacex), Tuple{Array{Patchwork.SequenceIdentifier, 1}, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector}, Int64, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base._array_for), Type{Array{Patchwork.SequenceIdentifier, 1}}, Base.UnitRange{Int64}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Patchwork.SequenceIdentifier, 1}, 1}, Array{Patchwork.SequenceIdentifier, 1}, Base.Generator{Base.UnitRange{Int64}, Tables.var"#39#40"{Tuple{Array{Patchwork.SequenceIdentifier, 1}, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector}, Int64, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Array{Patchwork.SequenceIdentifier, 1}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{T, 1} where T, 1}, Base.Generator{Base.UnitRange{Int64}, Tables.var"#39#40"{Tuple{Array{Patchwork.SequenceIdentifier, 1}, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector}, Int64, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Tables.replacex), Tuple{Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector}, Int64, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Patchwork.SequenceIdentifier, 1}, 1}, Array{Patchwork.SequenceIdentifier, 1}, Base.Generator{Base.UnitRange{Int64}, Tables.var"#39#40"{Tuple{Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector}, Int64, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{T, 1} where T, 1}, Base.Generator{Base.UnitRange{Int64}, Tables.var"#39#40"{Tuple{Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector}, Int64, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Tables.replacex), Tuple{Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector}, Int64, Array{Int64, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Patchwork.SequenceIdentifier, 1}, 1}, Array{Patchwork.SequenceIdentifier, 1}, Base.Generator{Base.UnitRange{Int64}, Tables.var"#39#40"{Tuple{Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector}, Int64, Array{Int64, 1}}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{T, 1} where T, 1}, Base.Generator{Base.UnitRange{Int64}, Tables.var"#39#40"{Tuple{Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector}, Int64, Array{Int64, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Tables.replacex), Tuple{Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{Int64, 1}, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector}, Int64, Array{Int64, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Patchwork.SequenceIdentifier, 1}, 1}, Array{Patchwork.SequenceIdentifier, 1}, Base.Generator{Base.UnitRange{Int64}, Tables.var"#39#40"{Tuple{Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{Int64, 1}, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector}, Int64, Array{Int64, 1}}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{T, 1} where T, 1}, Base.Generator{Base.UnitRange{Int64}, Tables.var"#39#40"{Tuple{Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{Int64, 1}, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector}, Int64, Array{Int64, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Tables.replacex), Tuple{Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{Int64, 1}, Array{Int64, 1}, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector}, Int64, Array{Int64, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Patchwork.SequenceIdentifier, 1}, 1}, Array{Patchwork.SequenceIdentifier, 1}, Base.Generator{Base.UnitRange{Int64}, Tables.var"#39#40"{Tuple{Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{Int64, 1}, Array{Int64, 1}, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector}, Int64, Array{Int64, 1}}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{T, 1} where T, 1}, Base.Generator{Base.UnitRange{Int64}, Tables.var"#39#40"{Tuple{Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{Int64, 1}, Array{Int64, 1}, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector}, Int64, Array{Int64, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Tables.replacex), Tuple{Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector}, Int64, Array{Patchwork.SequenceIdentifier, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Patchwork.SequenceIdentifier, 1}, 1}, Array{Patchwork.SequenceIdentifier, 1}, Base.Generator{Base.UnitRange{Int64}, Tables.var"#39#40"{Tuple{Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector}, Int64, Array{Patchwork.SequenceIdentifier, 1}}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{T, 1} where T, 1}, Base.Generator{Base.UnitRange{Int64}, Tables.var"#39#40"{Tuple{Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector}, Int64, Array{Patchwork.SequenceIdentifier, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Tables.replacex), Tuple{Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Patchwork.SequenceIdentifier, 1}, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector}, Int64, Array{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Patchwork.SequenceIdentifier, 1}, 1}, Array{Patchwork.SequenceIdentifier, 1}, Base.Generator{Base.UnitRange{Int64}, Tables.var"#39#40"{Tuple{Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Patchwork.SequenceIdentifier, 1}, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector}, Int64, Array{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, 1}}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{T, 1} where T, 1}, Base.Generator{Base.UnitRange{Int64}, Tables.var"#39#40"{Tuple{Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Patchwork.SequenceIdentifier, 1}, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector}, Int64, Array{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Tables.replacex), Tuple{Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, 1}, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector}, Int64, Array{Int64, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Patchwork.SequenceIdentifier, 1}, 1}, Array{Patchwork.SequenceIdentifier, 1}, Base.Generator{Base.UnitRange{Int64}, Tables.var"#39#40"{Tuple{Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, 1}, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector}, Int64, Array{Int64, 1}}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{T, 1} where T, 1}, Base.Generator{Base.UnitRange{Int64}, Tables.var"#39#40"{Tuple{Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, 1}, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector}, Int64, Array{Int64, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Tables.replacex), Tuple{Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, 1}, Array{Int64, 1}, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector}, Int64, Array{Int64, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Patchwork.SequenceIdentifier, 1}, 1}, Array{Patchwork.SequenceIdentifier, 1}, Base.Generator{Base.UnitRange{Int64}, Tables.var"#39#40"{Tuple{Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, 1}, Array{Int64, 1}, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector}, Int64, Array{Int64, 1}}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{T, 1} where T, 1}, Base.Generator{Base.UnitRange{Int64}, Tables.var"#39#40"{Tuple{Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, 1}, Array{Int64, 1}, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector}, Int64, Array{Int64, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Tables.undatavalue), String})
precompile(Tuple{typeof(Tables.add_or_widen!), String, Int64, Symbol, Tables.EmptyVector, Int64, Base.RefValue{Any}, Base.HasShape{1}})
precompile(Tuple{typeof(Tables.replacex), Tuple{Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, 1}, Array{Int64, 1}, Array{Int64, 1}, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector}, Int64, Array{String, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Patchwork.SequenceIdentifier, 1}, 1}, Array{Patchwork.SequenceIdentifier, 1}, Base.Generator{Base.UnitRange{Int64}, Tables.var"#39#40"{Tuple{Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, 1}, Array{Int64, 1}, Array{Int64, 1}, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector}, Int64, Array{String, 1}}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{T, 1} where T, 1}, Base.Generator{Base.UnitRange{Int64}, Tables.var"#39#40"{Tuple{Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, 1}, Array{Int64, 1}, Array{Int64, 1}, Tables.EmptyVector, Tables.EmptyVector, Tables.EmptyVector}, Int64, Array{String, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Tables.replacex), Tuple{Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{String, 1}, Tables.EmptyVector, Tables.EmptyVector}, Int64, Array{Float64, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Patchwork.SequenceIdentifier, 1}, 1}, Array{Patchwork.SequenceIdentifier, 1}, Base.Generator{Base.UnitRange{Int64}, Tables.var"#39#40"{Tuple{Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{String, 1}, Tables.EmptyVector, Tables.EmptyVector}, Int64, Array{Float64, 1}}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{T, 1} where T, 1}, Base.Generator{Base.UnitRange{Int64}, Tables.var"#39#40"{Tuple{Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{String, 1}, Tables.EmptyVector, Tables.EmptyVector}, Int64, Array{Float64, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Tables.replacex), Tuple{Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{String, 1}, Array{Float64, 1}, Tables.EmptyVector}, Int64, Array{Float64, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Patchwork.SequenceIdentifier, 1}, 1}, Array{Patchwork.SequenceIdentifier, 1}, Base.Generator{Base.UnitRange{Int64}, Tables.var"#39#40"{Tuple{Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{String, 1}, Array{Float64, 1}, Tables.EmptyVector}, Int64, Array{Float64, 1}}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{T, 1} where T, 1}, Base.Generator{Base.UnitRange{Int64}, Tables.var"#39#40"{Tuple{Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{String, 1}, Array{Float64, 1}, Tables.EmptyVector}, Int64, Array{Float64, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Tables.__buildcolumns), Tables.IteratorWrapper{Array{Patchwork.DiamondSearchResult, 1}}, Int64, Tables.Schema{(:queryid, :querysequence, :full_querysequence, :querystart, :queryend, :queryframe, :subjectid, :subjectsequence, :subjectstart, :subjectend, :cigar, :percentidentical, :bitscore), nothing}, Tuple{Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{String, 1}, Array{Float64, 1}, Array{Float64, 1}}, Int64, Base.RefValue{Any}})
precompile(Tuple{typeof(Tables.add_or_widen!), String, Int64, Symbol, Array{String, 1}, Int64, Base.RefValue{Any}, Base.HasShape{1}})
precompile(Tuple{Type{NamedTuple{(:queryid, :querysequence, :full_querysequence, :querystart, :queryend, :queryframe, :subjectid, :subjectsequence, :subjectstart, :subjectend, :cigar, :percentidentical, :bitscore), T} where T<:Tuple}, Tuple{Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{String, 1}, Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{Type{Tables.CopiedColumns{T} where T}, NamedTuple{(:queryid, :querysequence, :full_querysequence, :querystart, :queryend, :queryframe, :subjectid, :subjectsequence, :subjectstart, :subjectend, :cigar, :percentidentical, :bitscore), Tuple{Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{String, 1}, Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Tables.columnnames), Tables.CopiedColumns{NamedTuple{(:queryid, :querysequence, :full_querysequence, :querystart, :queryend, :queryframe, :subjectid, :subjectsequence, :subjectstart, :subjectend, :cigar, :percentidentical, :bitscore), Tuple{Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{String, 1}, Array{Float64, 1}, Array{Float64, 1}}}}})
precompile(Tuple{typeof(Base.collect), Type{Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{DataFrames.var"#fromcolumns##kw", NamedTuple{(:copycols,), Tuple{Nothing}}, typeof(DataFrames.fromcolumns), Tables.CopiedColumns{NamedTuple{(:queryid, :querysequence, :full_querysequence, :querystart, :queryend, :queryframe, :subjectid, :subjectsequence, :subjectstart, :subjectend, :cigar, :percentidentical, :bitscore), Tuple{Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{String, 1}, Array{Float64, 1}, Array{Float64, 1}}}}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.length), Array{Patchwork.SequenceIdentifier, 1}})
precompile(Tuple{typeof(Base.length), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.length), Array{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, 1}})
precompile(Tuple{typeof(DataFrames._preprocess_column), Array{Patchwork.SequenceIdentifier, 1}, Int64, Bool})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{var"#s813", 1} where var"#s813", 1}, Array{Patchwork.SequenceIdentifier, 1}, Int64})
precompile(Tuple{typeof(DataFrames._preprocess_column), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Int64, Bool})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{var"#s813", 1} where var"#s813", 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Int64})
precompile(Tuple{typeof(DataFrames._preprocess_column), Array{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, 1}, Int64, Bool})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{var"#s813", 1} where var"#s813", 1}, Array{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, 1}, Int64})
precompile(Tuple{typeof(Base.firstindex), Array{Patchwork.SequenceIdentifier, 1}})
precompile(Tuple{typeof(Base.firstindex), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.firstindex), Array{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, 1}})
precompile(Tuple{DataFrames.var"##select!#456", Bool, typeof(DataFrames.select!), DataFrames.DataFrame, Any})
precompile(Tuple{DataFrames.var"#manipulate##kw", NamedTuple{(:copycols, :keeprows, :renamecols), Tuple{Bool, Bool, Bool}}, typeof(DataFrames.manipulate), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Symbol}})
precompile(Tuple{typeof(Base.union!), Base.Set{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.delete!), Base.Dict{Int64, Nothing}, Int64})
precompile(Tuple{typeof(Base.filter), Base.var"#103#104"{typeof(Base.in), typeof(Base.pop!), Base.Set{Int64}}, Base.UnitRange{Int64}})
precompile(Tuple{DataFrames.var"##manipulate#469", Bool, Bool, Bool, typeof(DataFrames.manipulate), DataFrames.DataFrame, Array{Int64, 1}})
precompile(Tuple{typeof(Base.depwarn), String, Symbol})
precompile(Tuple{Type{CSV.Options{D, N, DF, M, TF} where TF where M where DF where N where D}, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, Nothing, Bool, Tuple{}, CSV.var"#61#64", Bool})
precompile(Tuple{typeof(Base._array_for), Type{DataType}, DataFrames.DataFrameColumns{DataFrames.DataFrame}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{DataType, 1}, Type, Base.Generator{DataFrames.DataFrameColumns{DataFrames.DataFrame}, typeof(Base.eltype)}, Int64})
precompile(Tuple{Type{Tables.Schema{names, types} where types where names}, Array{Symbol, 1}, Array{DataType, 1}})
precompile(Tuple{CSV.var"#write##kw", NamedTuple{(:append, :header), Tuple{Bool, Bool}}, typeof(CSV.write), Tables.Schema{(:queryid, :querysequence, :full_querysequence, :querystart, :queryend, :queryframe, :subjectsequence, :subjectstart, :subjectend, :cigar, :percentidentical, :bitscore), Tuple{String, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64, Int64, Int64, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, Int64, Int64, String, Float64, Float64}}, DataFrames.DataFrameRows{DataFrames.DataFrame}, String, CSV.Options{UInt8, UInt8, Nothing, Tuple{}, CSV.var"#61#64"}})
precompile(Tuple{Base.var"##open#317", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), CSV.var"#73#74"{CSV.var"#66#67"{Bool, Bool, Tables.Schema{(:queryid, :querysequence, :full_querysequence, :querystart, :queryend, :queryframe, :subjectsequence, :subjectstart, :subjectend, :cigar, :percentidentical, :bitscore), Tuple{String, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64, Int64, Int64, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, Int64, Int64, String, Float64, Float64}}, DataFrames.DataFrameRows{DataFrames.DataFrame}, CSV.Options{UInt8, UInt8, Nothing, Tuple{}, CSV.var"#61#64"}, Array{UInt8, 1}, Int64, Int64, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}}}, String, Vararg{String, N} where N})
precompile(Tuple{typeof(CSV.writenames), Array{UInt8, 1}, Int64, Int64, Base.IOStream, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Int64, CSV.Options{UInt8, UInt8, Nothing, Tuple{}, CSV.var"#61#64"}})
precompile(Tuple{CSV.var"#75#76"{Array{UInt8, 1}, Base.RefValue{Int64}, Int64, Base.IOStream, Int64, CSV.Options{UInt8, UInt8, Nothing, Tuple{}, CSV.var"#61#64"}, UInt8, UInt8}, String, Int64, Symbol})
precompile(Tuple{typeof(Base.getindex), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Int64})
precompile(Tuple{CSV.var"#75#76"{Array{UInt8, 1}, Base.RefValue{Int64}, Int64, Base.IOStream, Int64, CSV.Options{UInt8, UInt8, Nothing, Tuple{}, CSV.var"#61#64"}, UInt8, UInt8}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64, Symbol})
precompile(Tuple{CSV.var"#75#76"{Array{UInt8, 1}, Base.RefValue{Int64}, Int64, Base.IOStream, Int64, CSV.Options{UInt8, UInt8, Nothing, Tuple{}, CSV.var"#61#64"}, UInt8, UInt8}, Int64, Int64, Symbol})
precompile(Tuple{typeof(Base.getindex), Array{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, 1}, Int64})
precompile(Tuple{CSV.var"#75#76"{Array{UInt8, 1}, Base.RefValue{Int64}, Int64, Base.IOStream, Int64, CSV.Options{UInt8, UInt8, Nothing, Tuple{}, CSV.var"#61#64"}, UInt8, UInt8}, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, Int64, Symbol})
precompile(Tuple{CSV.var"#75#76"{Array{UInt8, 1}, Base.RefValue{Int64}, Int64, Base.IOStream, Int64, CSV.Options{UInt8, UInt8, Nothing, Tuple{}, CSV.var"#61#64"}, UInt8, UInt8}, Float64, Int64, Symbol})
precompile(Tuple{typeof(Patchwork.selectsequence), String, String})
precompile(Tuple{typeof(FASTX.sequence), Type{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}}, FASTX.FASTA.Record, Base.UnitRange{Int64}})
precompile(Tuple{Type{Patchwork.SequenceRecord}, String, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}})
precompile(Tuple{typeof(BioSequences.translate), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, String})
precompile(Tuple{typeof(Patchwork.cleancigar), String})
precompile(Tuple{typeof(Base.setindex!), Array{Patchwork.AlignedRegion, 1}, Patchwork.AlignedRegion, Int64})
precompile(Tuple{Base.Sort.var"##sortperm#12", Base.Sort.QuickSortAlg, Function, Function, Nothing, Base.Order.ForwardOrdering, typeof(Base.sortperm), Array{Tuple{Int64, Int64}, 1}})
precompile(Tuple{Type{Base.Order.Perm{O, V} where V<:(AbstractArray{T, 1} where T) where O<:Base.Order.Ordering}, Base.Order.ForwardOrdering, Array{Tuple{Int64, Int64}, 1}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Base.Sort.QuickSortAlg, Base.Order.Perm{Base.Order.ForwardOrdering, Array{Tuple{Int64, Int64}, 1}}})
precompile(Tuple{typeof(BioAlignments.ref2seq), BioAlignments.PairwiseAlignment{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getindex), BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Patchwork.pairalign_local), BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, BioAlignments.AffineGapScoreModel{Int64}})
precompile(Tuple{typeof(BioAlignments.run!), BioAlignments.SmithWaterman{Int64}, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, BioAlignments.SubstitutionMatrix{BioSymbols.AminoAcid, Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.getindex), BioAlignments.PairwiseAlignment{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(BioAlignments.run!), BioAlignments.NeedlemanWunsch{Int64}, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, BioAlignments.SubstitutionMatrix{BioSymbols.AminoAcid, Int64}, Int64, Int64})
precompile(Tuple{Type{Patchwork.AlignedRegion}, BioAlignments.PairwiseAlignment{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}}, Int64, Int64, Patchwork.SequenceIdentifier, Int64, Int64, Int64})
precompile(Tuple{Type{BioSequences.LongSequence{A} where A<:BioSequences.Alphabet}, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Patchwork.createbridgealignment), BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}})
precompile(Tuple{typeof(Base.vect), BioAlignments.PairwiseAlignment{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}}, Vararg{BioAlignments.PairwiseAlignment{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}}, N} where N})
precompile(Tuple{typeof(Base.push!), Array{BioAlignments.PairwiseAlignment{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}}, 1}, BioAlignments.PairwiseAlignment{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}}})
precompile(Tuple{typeof(Patchwork.concatenate), Array{BioAlignments.PairwiseAlignment{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}}, 1}})
precompile(Tuple{Type{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}}, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, Vararg{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, N} where N})
precompile(Tuple{typeof(Patchwork.maskgaps), BioAlignments.PairwiseAlignment{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}}})
precompile(Tuple{typeof(Patchwork.write_alignmentfile), String, String, Int64, BioAlignments.PairwiseAlignment{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}}, Int64})
precompile(Tuple{Base.var"##open#317", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), Patchwork.var"#432#433"{String, Int64, BioAlignments.PairwiseAlignment{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}}, Float64, Int64, Int64, Int64, Int64, Int64, String}, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, String, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Patchwork.write_fasta), String, Patchwork.SequenceIdentifier, BioAlignments.PairwiseAlignment{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}}, Char})
precompile(Tuple{typeof(BioAlignments.count_matches), BioAlignments.PairwiseAlignment{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}}})
precompile(Tuple{typeof(BioAlignments.count_mismatches), BioAlignments.PairwiseAlignment{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}}})
precompile(Tuple{typeof(BioAlignments.count_deletions), BioAlignments.PairwiseAlignment{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}}})
precompile(Tuple{typeof(Patchwork.occupancy), BioAlignments.PairwiseAlignment{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}}})
precompile(Tuple{typeof(Base.push!), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.push!), Array{Float64, 1}, Float64})
precompile(Tuple{Type{CSV.Options{D, N, DF, M, TF} where TF where M where DF where N where D}, Tuple{UInt8}, UInt8, UInt8, UInt8, UInt8, UInt8, Nothing, Bool, Tuple{}, CSV.var"#61#64", Bool})
precompile(Tuple{CSV.var"#write##kw", NamedTuple{(:append, :header), Tuple{Bool, Bool}}, typeof(CSV.write), Tables.Schema{(:id, :length_reference, :length_query, :regions, :contigs, :matches, :mismatches, :deletions, :occupancy), Tuple{String, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Float64}}, DataFrames.DataFrameRows{DataFrames.DataFrame}, String, CSV.Options{Tuple{UInt8}, UInt8, Nothing, Tuple{}, CSV.var"#61#64"}})
precompile(Tuple{Base.var"##open#317", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), CSV.var"#73#74"{CSV.var"#66#67"{Bool, Bool, Tables.Schema{(:id, :length_reference, :length_query, :regions, :contigs, :matches, :mismatches, :deletions, :occupancy), Tuple{String, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Float64}}, DataFrames.DataFrameRows{DataFrames.DataFrame}, CSV.Options{Tuple{UInt8}, UInt8, Nothing, Tuple{}, CSV.var"#61#64"}, Array{UInt8, 1}, Int64, Int64, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}}}, String, Vararg{String, N} where N})
precompile(Tuple{typeof(CSV.writenames), Array{UInt8, 1}, Int64, Int64, Base.IOStream, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Int64, CSV.Options{Tuple{UInt8}, UInt8, Nothing, Tuple{}, CSV.var"#61#64"}})
precompile(Tuple{CSV.var"#75#76"{Array{UInt8, 1}, Base.RefValue{Int64}, Int64, Base.IOStream, Int64, CSV.Options{Tuple{UInt8}, UInt8, Nothing, Tuple{}, CSV.var"#61#64"}, Tuple{UInt8}, UInt8}, String, Int64, Symbol})
precompile(Tuple{CSV.var"#75#76"{Array{UInt8, 1}, Base.RefValue{Int64}, Int64, Base.IOStream, Int64, CSV.Options{Tuple{UInt8}, UInt8, Nothing, Tuple{}, CSV.var"#61#64"}, Tuple{UInt8}, UInt8}, Int64, Int64, Symbol})
precompile(Tuple{CSV.var"#75#76"{Array{UInt8, 1}, Base.RefValue{Int64}, Int64, Base.IOStream, Int64, CSV.Options{Tuple{UInt8}, UInt8, Nothing, Tuple{}, CSV.var"#61#64"}, Tuple{UInt8}, UInt8}, Float64, Int64, Symbol})
precompile(Tuple{DataFrames.var"##manipulate#470", Bool, Bool, Bool, typeof(DataFrames.manipulate), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Array{Symbol, 1}}})
precompile(Tuple{typeof(Base.allunique), Array{Symbol, 1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Symbol, 1}, DataFrames.var"#31#32"{DataFrames.Index}}})
precompile(Tuple{typeof(Base._shrink), Function, Base.UnitRange{Int64}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.setdiff!), Base.Set{Int64}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.vectorfilter), Function, Base.UnitRange{Int64}})
precompile(Tuple{Core.Compiler.var"#256#258"{DataType, Tuple{Base.Colon}}, Int64})
precompile(Tuple{Patchwork.var"#439#443", Array{Int64, 1}})
precompile(Tuple{typeof(Base._array_for), Type{Float64}, DataFrames.DataFrameColumns{DataFrames.DataFrame}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{DataFrames.DataFrameColumns{DataFrames.DataFrame}, Patchwork.var"#439#443"}, Int64})
precompile(Tuple{Patchwork.var"#439#443", Array{Float64, 1}})
precompile(Tuple{typeof(Base.push!), DataFrames.DataFrame, Array{Float64, 1}})
precompile(Tuple{CSV.var"#write##kw", NamedTuple{(:append, :header), Tuple{Bool, Bool}}, typeof(CSV.write), Tables.Schema{(:mean_length_query, :mean_no_regions, :mean_no_contigs, :mean_no_matches, :mean_no_mismatches, :mean_no_deletions, :mean_occupancy), Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64}}, DataFrames.DataFrameRows{DataFrames.DataFrame}, String, CSV.Options{Tuple{UInt8}, UInt8, Nothing, Tuple{}, CSV.var"#61#64"}})
precompile(Tuple{Base.var"##open#317", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), CSV.var"#73#74"{CSV.var"#66#67"{Bool, Bool, Tables.Schema{(:mean_length_query, :mean_no_regions, :mean_no_contigs, :mean_no_matches, :mean_no_mismatches, :mean_no_deletions, :mean_occupancy), Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64}}, DataFrames.DataFrameRows{DataFrames.DataFrame}, CSV.Options{Tuple{UInt8}, UInt8, Nothing, Tuple{}, CSV.var"#61#64"}, Array{UInt8, 1}, Int64, Int64, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}}}, String, Vararg{String, N} where N})
precompile(Tuple{typeof(CSV.writenames), Array{UInt8, 1}, Int64, Int64, Base.IOStream, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Int64, CSV.Options{Tuple{UInt8}, UInt8, Nothing, Tuple{}, CSV.var"#61#64"}})
precompile(Tuple{typeof(Base.println), String, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.println), Base.TTY, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.print), Base.TTY, String, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.print), Base.TTY, Float64})
precompile(Tuple{Mmap.var"#3#5"{Ptr{Nothing}, Int64}, Array{UInt8, 1}})
