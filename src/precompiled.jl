precompile(Tuple{typeof(Base.first), Array{Any, 1}})
precompile(Tuple{typeof(ColorTypes.__init__)})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:throw_error,), Tuple{Bool}}, typeof(Base.Libc.Libdl.dlopen), String})
precompile(Tuple{typeof(OpenSpecFun_jll.find_artifact_dir)})
precompile(Tuple{typeof(Base.invokelatest), Any})
precompile(Tuple{typeof(JLLWrappers.get_julia_libpaths)})
precompile(Tuple{typeof(ColorVectorSpace.__init__)})
precompile(Tuple{typeof(Requires.loadpkg), Base.PkgId})
precompile(Tuple{typeof(fzf_jll.find_artifact_dir)})
precompile(Tuple{typeof(Bzip2_jll.find_artifact_dir)})
precompile(Tuple{typeof(FreeType2_jll.find_artifact_dir)})
precompile(Tuple{typeof(FriBidi_jll.find_artifact_dir)})
precompile(Tuple{typeof(Libiconv_jll.find_artifact_dir)})
precompile(Tuple{typeof(Libffi_jll.find_artifact_dir)})
precompile(Tuple{typeof(XML2_jll.find_artifact_dir)})
precompile(Tuple{typeof(Gettext_jll.find_artifact_dir)})
precompile(Tuple{typeof(Libmount_jll.find_artifact_dir)})
precompile(Tuple{typeof(Glib_jll.find_artifact_dir)})
precompile(Tuple{typeof(Pixman_jll.find_artifact_dir)})
precompile(Tuple{typeof(libpng_jll.find_artifact_dir)})
precompile(Tuple{typeof(Libuuid_jll.find_artifact_dir)})
precompile(Tuple{typeof(Expat_jll.find_artifact_dir)})
precompile(Tuple{typeof(Fontconfig_jll.find_artifact_dir)})
precompile(Tuple{typeof(Base.getindex), Base.EnvDict, String})
precompile(Tuple{typeof(Libgpg_error_jll.find_artifact_dir)})
precompile(Tuple{typeof(Libgcrypt_jll.find_artifact_dir)})
precompile(Tuple{typeof(XSLT_jll.find_artifact_dir)})
precompile(Tuple{typeof(Xorg_libXau_jll.find_artifact_dir)})
precompile(Tuple{typeof(Xorg_libXdmcp_jll.find_artifact_dir)})
precompile(Tuple{typeof(Xorg_libpthread_stubs_jll.find_artifact_dir)})
precompile(Tuple{typeof(Xorg_libxcb_jll.find_artifact_dir)})
precompile(Tuple{typeof(Xorg_xtrans_jll.find_artifact_dir)})
precompile(Tuple{typeof(Xorg_libX11_jll.find_artifact_dir)})
precompile(Tuple{typeof(Xorg_libXext_jll.find_artifact_dir)})
precompile(Tuple{typeof(Xorg_libXrender_jll.find_artifact_dir)})
precompile(Tuple{typeof(LZO_jll.find_artifact_dir)})
precompile(Tuple{typeof(Cairo_jll.find_artifact_dir)})
precompile(Tuple{typeof(Graphite2_jll.find_artifact_dir)})
precompile(Tuple{typeof(HarfBuzz_jll.find_artifact_dir)})
precompile(Tuple{typeof(libass_jll.find_artifact_dir)})
precompile(Tuple{typeof(libfdk_aac_jll.find_artifact_dir)})
precompile(Tuple{typeof(LAME_jll.find_artifact_dir)})
precompile(Tuple{typeof(Ogg_jll.find_artifact_dir)})
precompile(Tuple{typeof(libvorbis_jll.find_artifact_dir)})
precompile(Tuple{typeof(libaom_jll.find_artifact_dir)})
precompile(Tuple{typeof(x264_jll.find_artifact_dir)})
precompile(Tuple{typeof(x265_jll.find_artifact_dir)})
precompile(Tuple{typeof(OpenSSL_jll.find_artifact_dir)})
precompile(Tuple{typeof(Opus_jll.find_artifact_dir)})
precompile(Tuple{typeof(FFMPEG_jll.find_artifact_dir)})
precompile(Tuple{typeof(Libglvnd_jll.find_artifact_dir)})
precompile(Tuple{typeof(Xorg_libXfixes_jll.find_artifact_dir)})
precompile(Tuple{typeof(Xorg_libXcursor_jll.find_artifact_dir)})
precompile(Tuple{typeof(Xorg_libXi_jll.find_artifact_dir)})
precompile(Tuple{typeof(Xorg_libXinerama_jll.find_artifact_dir)})
precompile(Tuple{typeof(Xorg_libXrandr_jll.find_artifact_dir)})
precompile(Tuple{typeof(GLFW_jll.find_artifact_dir)})
precompile(Tuple{typeof(JpegTurbo_jll.find_artifact_dir)})
precompile(Tuple{typeof(LERC_jll.find_artifact_dir)})
precompile(Tuple{typeof(Zstd_jll.find_artifact_dir)})
precompile(Tuple{typeof(Libtiff_jll.find_artifact_dir)})
precompile(Tuple{typeof(Xorg_xcb_util_jll.find_artifact_dir)})
precompile(Tuple{typeof(Xorg_xcb_util_wm_jll.find_artifact_dir)})
precompile(Tuple{typeof(Xorg_xcb_util_image_jll.find_artifact_dir)})
precompile(Tuple{typeof(Xorg_xcb_util_keysyms_jll.find_artifact_dir)})
precompile(Tuple{typeof(Xorg_xcb_util_renderutil_jll.find_artifact_dir)})
precompile(Tuple{typeof(Xorg_libxkbfile_jll.find_artifact_dir)})
precompile(Tuple{typeof(Xorg_xkbcomp_jll.find_artifact_dir)})
precompile(Tuple{typeof(Xorg_xkeyboard_config_jll.find_artifact_dir)})
precompile(Tuple{typeof(Wayland_jll.find_artifact_dir)})
precompile(Tuple{typeof(Wayland_protocols_jll.find_artifact_dir)})
precompile(Tuple{typeof(xkbcommon_jll.find_artifact_dir)})
precompile(Tuple{typeof(Qt5Base_jll.find_artifact_dir)})
precompile(Tuple{typeof(GR_jll.find_artifact_dir)})
precompile(Tuple{Type{NamedTuple{(:segments,), T} where T<:Tuple}, Tuple{Tuple{String}}})
precompile(Tuple{typeof(GR.GRPreferences.__init__)})
precompile(Tuple{typeof(Base.setindex!), Base.RefValue{Union{Nothing, String}}, String})
precompile(Tuple{typeof(Base.Broadcast.broadcastable), Int64})
precompile(Tuple{typeof(Plots.__init__)})
precompile(Tuple{typeof(Patchwork.include), String})
precompile(Tuple{Type{LineNumberNode}, Int64})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{LineNumberNode, 1}}})
precompile(Tuple{DocStringExtensions.var"#35#36"{typeof(DocStringExtensions.template_hook)}, LineNumberNode, Vararg{Any}})
precompile(Tuple{typeof(DocStringExtensions.template_hook), LineNumberNode, Module, String, Expr})
precompile(Tuple{typeof(Base.Docs.docm), LineNumberNode, Module, Any, Any})
precompile(Tuple{typeof(Base.vcat), Int64, Array{String, 1}})
precompile(Tuple{Type{NamedTuple{(:gap_open, :gap_extend), T} where T<:Tuple}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:gap_open, :gap_extend), Tuple{Int64, Int64}}, Type{BioAlignments.AffineGapScoreModel{T} where T}, BioAlignments.SubstitutionMatrix{BioSymbols.AminoAcid, Int64}})
precompile(Tuple{typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, Vararg{Any, 6}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:segments,), Tuple{Tuple{String}}}})
precompile(Tuple{typeof(Base.keys), Base.Pairs{Symbol, Tuple{String}, Tuple{Symbol}, NamedTuple{(:segments,), Tuple{Tuple{String}}}}})
precompile(Tuple{typeof(Base.values), Base.Pairs{Symbol, Tuple{String}, Tuple{Symbol}, NamedTuple{(:segments,), Tuple{Tuple{String}}}}})
precompile(Tuple{typeof(Base.getindex), NamedTuple{(:segments,), Tuple{Tuple{String}}}, Symbol})
precompile(Tuple{Type{FilePathsBase.PosixPath}, Tuple{String}})
precompile(Tuple{typeof(Logging.default_metafmt), Base.CoreLogging.LogLevel, Vararg{Any, 5}})
precompile(Tuple{Type{Pair{A, B} where B where A}, String, BioAlignments.SubstitutionMatrix{BioSymbols.AminoAcid, Int64}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Pair{String, BioAlignments.SubstitutionMatrix{BioSymbols.AminoAcid, Int64}}, Vararg{Pair{String, BioAlignments.SubstitutionMatrix{BioSymbols.AminoAcid, Int64}}}})
precompile(Tuple{Type{Base.Dict{String, BioAlignments.SubstitutionMatrix{BioSymbols.AminoAcid, Int64}}}, NTuple{8, Pair{String, BioAlignments.SubstitutionMatrix{BioSymbols.AminoAcid, Int64}}}})
precompile(Tuple{typeof(Base.vect), Tuple{Int64, Int64}, Vararg{Tuple{Int64, Int64}}})
precompile(Tuple{Type{Pair{A, B} where B where A}, String, Array{Tuple{Int64, Int64}, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Pair{String, Array{Tuple{Int64, Int64}, 1}}, Vararg{Pair{String, Array{Tuple{Int64, Int64}, 1}}}})
precompile(Tuple{Type{Base.Dict{String, Array{Tuple{Int64, Int64}, 1}}}, NTuple{8, Pair{String, Array{Tuple{Int64, Int64}, 1}}}})
precompile(Tuple{Type{Pair{A, B} where B where A}, String, Tuple{Int64, Int64}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Pair{String, Tuple{Int64, Int64}}, Vararg{Pair{String, Tuple{Int64, Int64}}}})
precompile(Tuple{Type{Base.Dict{String, Tuple{Int64, Int64}}}, NTuple{8, Pair{String, Tuple{Int64, Int64}}}})
precompile(Tuple{ArgParse.var"#@add_arg_table!", LineNumberNode, Module, Any, Any})
precompile(Tuple{typeof(ArgParse._add_arg_table!), Any, Any})
precompile(Tuple{typeof(Base.gensym)})
precompile(Tuple{typeof(Base.splice!), Array{Any, 1}, Int64, Array{Any, 1}})
precompile(Tuple{typeof(Base.isexpr), Any, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Base.isexpr), Any, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.:(==)), GlobalRef, GlobalRef})
precompile(Tuple{typeof(Base.getindex), Array{Any, 1}, Base.UnitRange{Int64}})
precompile(Tuple{Type{NamedTuple{(:description, :version, :add_version), T} where T<:Tuple}, Tuple{String, String, Bool}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Char})
precompile(Tuple{Base.var"#51#52", Type, Type})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Pair{Symbol, String}, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Pair{Symbol, String}, Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{Symbol, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{Symbol, String}, Int64, Int64})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Array{String, 1}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Float64})
precompile(Tuple{typeof(Base.convert), Type{AbstractString}, String})
precompile(Tuple{typeof(Base.keys), Base.Dict{String, BioAlignments.SubstitutionMatrix{BioSymbols.AminoAcid, Int64}}})
precompile(Tuple{Type{NamedTuple{(:removeduplicates,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{SIMD.Intrinsics.var"##s8#114", Vararg{Any, 6}})
precompile(Tuple{typeof(Base.sizeof), TypeVar})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, TypeVar})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Function})
precompile(Tuple{SIMD.Intrinsics.var"##s8#115", Vararg{Any, 6}})
precompile(Tuple{SIMD.Intrinsics.var"##s8#116", Vararg{Any, 6}})
precompile(Tuple{typeof(Base.cconvert), Type{Ptr{UInt8}}, Ptr{UInt8}})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{UInt8}}, Ptr{UInt8}})
precompile(Tuple{Base.var"##s88#234", Any, Any, Any})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Base.UnitRange{Int64}, Base.HasShape{1}})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Array{Int64, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Base.var"#235#237"{DataType, Array{Int64, 1}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{Int64}, Base.var"#235#237"{DataType, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{NamedTuple{(), Tuple{}}, NamedTuple{(), Tuple{}}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{NamedTuple{(), Tuple{}}, NamedTuple{(), Tuple{}}}, Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:eager,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.first), Base.UnitRange{UInt8}})
precompile(Tuple{typeof(Base.last), Base.UnitRange{UInt8}})
precompile(Tuple{Type{NamedTuple{(:transcode,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{NamedTuple{(:bysequence, :byid), T} where T<:Tuple}, Tuple{Bool, Bool}})
precompile(Tuple{typeof(Base.rem), UInt128, Type{UInt64}})
precompile(Tuple{Type{NamedTuple{(:copycols,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{NamedTuple{(:header, :delim), T} where T<:Tuple}, Tuple{Array{String, 1}, Char}})
precompile(Tuple{typeof(Base.eltype), Type{Union{}}})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, Array{String, 1}}}, Array{String, 1}})
precompile(Tuple{typeof(Base.rem), Char, Type{UInt8}})
precompile(Tuple{Type{NamedTuple{(:validate,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{NamedTuple{(:keep,), T} where T<:Tuple}, Tuple{Symbol}})
precompile(Tuple{Type{NamedTuple{(:overlap,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{Int64}, Char})
precompile(Tuple{typeof(Base.:(>)), UInt64, Int64})
precompile(Tuple{typeof(Base.:(>=)), UInt64, UInt64})
precompile(Tuple{typeof(Base.iszero), UInt64})
precompile(Tuple{Type{NamedTuple{(:header,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{NamedTuple{(:makeunique, :copycols), T} where T<:Tuple}, Tuple{Bool, Bool}})
precompile(Tuple{typeof(Base.map), typeof(Tables.sym), NTuple{13, Symbol}})
precompile(Tuple{Type{Tuple}, NTuple{13, Symbol}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Tables.EmptyVector, 1}}})
precompile(Tuple{typeof(Base.map), Type{Symbol}, NTuple{13, Symbol}})
precompile(Tuple{typeof(DataAPI.defaultarray), Type{Patchwork.SequenceIdentifier}, Int64})
precompile(Tuple{typeof(DataAPI.defaultarray), Type{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}}, Int64})
precompile(Tuple{typeof(BioSequences.bitindex), BioSequences.BitsPerSymbol{2}, Type{UInt64}, Int64})
precompile(Tuple{typeof(BioSequences.bitindex), BioSequences.BitsPerSymbol{4}, Type{UInt64}, UInt64})
precompile(Tuple{typeof(BioSequences.bitindex), BioSequences.BitsPerSymbol{2}, Type{UInt64}, UInt64})
precompile(Tuple{typeof(Base.tail), NTuple{13, Symbol}})
precompile(Tuple{typeof(Base.tail), NTuple{12, Symbol}})
precompile(Tuple{typeof(Base.tail), NTuple{11, Symbol}})
precompile(Tuple{typeof(Base.tail), NTuple{10, Symbol}})
precompile(Tuple{typeof(Base.tail), NTuple{9, Symbol}})
precompile(Tuple{typeof(Base.tail), NTuple{8, Symbol}})
precompile(Tuple{typeof(Base.tail), NTuple{7, Symbol}})
precompile(Tuple{typeof(Base.tail), NTuple{6, Symbol}})
precompile(Tuple{typeof(Base.tail), NTuple{5, Symbol}})
precompile(Tuple{typeof(Base.tail), NTuple{4, Symbol}})
precompile(Tuple{typeof(Base.axes), Base.HasLength})
precompile(Tuple{Type{NamedTuple{(:copycols, :renamecols, :threads), T} where T<:Tuple}, Tuple{Bool, Bool, Bool}})
precompile(Tuple{Type{NamedTuple{(:copycols, :keeprows, :renamecols), T} where T<:Tuple}, Tuple{Bool, Bool, Bool}})
precompile(Tuple{Base.var"##s92#239", Vararg{Any, 5}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:delim,), Tuple{Char}}}})
precompile(Tuple{typeof(Base.literal_pow), typeof(Base.:(^)), Int64, Base.Val{22}})
precompile(Tuple{typeof(Base.reinterpret), Type{UInt8}, BioAlignments.Operation})
precompile(Tuple{typeof(Base.axes), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.:(!=)), BioAlignments.Operation, BioAlignments.Operation})
precompile(Tuple{typeof(BioAlignments.ismatchop), BioAlignments.Operation})
precompile(Tuple{typeof(BioAlignments.isinsertop), BioAlignments.Operation})
precompile(Tuple{typeof(BioAlignments.isdeleteop), BioAlignments.Operation})
precompile(Tuple{Type{Random.Sampler{E} where E}, Random.TaskLocalRNG, Base.UnitRange{Int64}, Base.Val{1}})
precompile(Tuple{typeof(Base.:(-)), UInt64})
precompile(Tuple{typeof(Base.mod), UInt64, UInt64})
precompile(Tuple{typeof(Base.empty), Type{BioSequences.LongSequence{BioSequences.DNAAlphabet{N}} where N}})
precompile(Tuple{Type{BioSequences.LongSequence{BioSequences.DNAAlphabet{N}} where N}})
precompile(Tuple{typeof(Base.empty), Type{BioSequences.LongSequence{A} where A<:BioSequences.Alphabet}})
precompile(Tuple{Type{BioSequences.LongSequence{A} where A<:BioSequences.Alphabet}})
precompile(Tuple{Type{NamedTuple{(:delim,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:delim,), Tuple{String}}}})
precompile(Tuple{Type{InvertedIndices.InvertedIndex{S} where S}, Symbol})
precompile(Tuple{Type{NamedTuple{(:style,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{NamedTuple{(:style,), T} where T<:Tuple}, Tuple{Symbol}})
precompile(Tuple{Type{NamedTuple{(:nosubheader,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:nosubheader,), Tuple{Bool}}}})
precompile(Tuple{Type{NamedTuple{(:foreground,), T} where T<:Tuple}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:nosubheader,), Tuple{Bool}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:nosubheader,), Tuple{Bool}}}})
precompile(Tuple{typeof(Base.structdiff), NamedTuple{(:nosubheader,), Tuple{Bool}}, Type{NamedTuple{(:header,), T} where T<:Tuple}})
precompile(Tuple{Type{NamedTuple{(:nosubheader,), Tuple{Bool}}}, Tuple{Bool}})
precompile(Tuple{Type{Char}, UInt16})
precompile(Tuple{Type{NamedTuple{(:foreground, :bold), T} where T<:Tuple}, Tuple{Symbol, Bool}})
precompile(Tuple{Type{Crayons.ANSIStyle}, Bool})
precompile(Tuple{Type{NamedTuple{(:color, :title, :bar_width, :legend), T} where T<:Tuple}, Tuple{String, String, Float64, Bool}})
precompile(Tuple{Type{NamedTuple{(:seriestype,), T} where T<:Tuple}, Tuple{Symbol}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:seriestype,), Tuple{Symbol}}}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:color, :title, :bar_width, :legend), Tuple{String, String, Float64, Bool}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:color, :title, :bar_width, :legend), Tuple{String, String, Float64, Bool}}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:color, :title, :bar_width, :legend), Tuple{String, String, Float64, Bool}}, NamedTuple{(:seriestype,), Tuple{Symbol}}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:color, :title, :bar_width, :legend, :seriestype), Tuple{String, String, Float64, Bool, Symbol}}})
precompile(Tuple{typeof(Base.iterate), Base.Pairs{Symbol, Any, NTuple{5, Symbol}, NamedTuple{(:color, :title, :bar_width, :legend, :seriestype), Tuple{String, String, Float64, Bool, Symbol}}}})
precompile(Tuple{typeof(Base.Iterators._pairs_elt), Base.Pairs{Symbol, Any, NTuple{5, Symbol}, NamedTuple{(:color, :title, :bar_width, :legend, :seriestype), Tuple{String, String, Float64, Bool, Symbol}}}, Symbol})
precompile(Tuple{Type{NamedTuple{(:head, :tail), T} where T<:Tuple}, Tuple{Int64, Int64}})
precompile(Tuple{Type{NamedTuple{(:palette, :title, :linecolor), T} where T<:Tuple}, Tuple{Symbol, String, String}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:palette, :title, :linecolor), Tuple{Symbol, String, String}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:palette, :title, :linecolor), Tuple{Symbol, String, String}}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:palette, :title, :linecolor), Tuple{Symbol, String, String}}, NamedTuple{(:seriestype,), Tuple{Symbol}}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:palette, :title, :linecolor, :seriestype), Tuple{Symbol, String, String, Symbol}}})
precompile(Tuple{typeof(Base.iterate), Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:palette, :title, :linecolor, :seriestype), Tuple{Symbol, String, String, Symbol}}}})
precompile(Tuple{typeof(Base.Iterators._pairs_elt), Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:palette, :title, :linecolor, :seriestype), Tuple{Symbol, String, String, Symbol}}}, Symbol})
precompile(Tuple{typeof(Patchwork.julia_main)})
precompile(Tuple{typeof(Core.kwcall), Any, Type{ArgParse.ArgParseSettings}})
precompile(Tuple{typeof(Base.source_path)})
precompile(Tuple{Type{Base.Set{Char}}})
precompile(Tuple{ArgParse.var"#_#5#6", AbstractString, AbstractString, AbstractString, AbstractString, AbstractString, Bool, Bool, Any, Bool, Bool, Bool, Bool, Bool, Function, Bool, Bool, Bool, Type{ArgParse.ArgParseSettings}})
precompile(Tuple{typeof(ArgParse.check_prefix_chars), Any})
precompile(Tuple{typeof(Base.iterate), Base.Set{Char}})
precompile(Tuple{typeof(Base.convert), Type{Base.Set{Char}}, Base.Set{Char}})
precompile(Tuple{typeof(Base.copy), Array{ArgParse.ArgParseGroup, 1}})
precompile(Tuple{typeof(Base.convert), Type{Array{ArgParse.ArgParseGroup, 1}}, Array{ArgParse.ArgParseGroup, 1}})
precompile(Tuple{Type{ArgParse.ArgParseTable}})
precompile(Tuple{typeof(Base.getindex), Type{ArgParse.ArgParseField}})
precompile(Tuple{typeof(Base.convert), Type{Array{ArgParse.ArgParseField, 1}}, Array{ArgParse.ArgParseField, 1}})
precompile(Tuple{Type{Base.Dict{AbstractString, Any}}})
precompile(Tuple{typeof(Base.convert), Type{Base.Dict{AbstractString, Any}}, Base.Dict{AbstractString, Any}})
precompile(Tuple{typeof(Base.convert), Type{ArgParse.ArgParseTable}, ArgParse.ArgParseTable})
precompile(Tuple{typeof(Base.convert), Type{Function}, typeof(ArgParse.default_handler)})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, String}, Type{Symbol}, Type{Any}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Pair{Symbol, String}, Pair{Symbol, DataType}, Pair{Symbol, Char}, Pair{Symbol, String}}, Int64})
precompile(Tuple{Type{NamedTuple{(:nargs, :help, :metavar, :arg_type), T} where T<:Tuple}, Tuple{Char, String, String, DataType}})
precompile(Tuple{typeof(Core.kwcall), Any, typeof(ArgParse.add_arg_field!), ArgParse.ArgParseSettings, Union{Array{T, 1}, T} where T<:AbstractString})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:nargs, :help, :metavar, :arg_type), Tuple{Char, String, String, DataType}}})
precompile(Tuple{ArgParse.var"##add_arg_field!#23", Base.Pairs{Symbol, V, Tuple{Vararg{Symbol, N}}, NamedTuple{names, T}} where T<:Tuple{Vararg{Any, N}} where names where N where V, typeof(ArgParse.add_arg_field!), ArgParse.ArgParseSettings, Union{Array{T, 1}, T} where T<:AbstractString})
precompile(Tuple{typeof(ArgParse.check_name_format), Union{Array{T, 1}, T} where T<:AbstractString})
precompile(Tuple{typeof(Base.keys), Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:nargs, :help, :metavar, :arg_type), Tuple{Char, String, String, DataType}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:nargs, :help, :metavar, :arg_type), Tuple{Char, String, String, DataType}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, ArgParse.var"#24#26", Base.Dict{Symbol, Any}})
precompile(Tuple{Type{Base.Dict{Symbol, Bool}}, Base.Generator{Base.Dict{Symbol, Any}, ArgParse.var"#24#26"}})
precompile(Tuple{ArgParse.var"#24#26", Any})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{Symbol, Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{Symbol, Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(ArgParse.default_action), Char})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ArgParseSettings, Symbol})
precompile(Tuple{typeof(Base.iterate), Base.Dict{Symbol, Bool}})
precompile(Tuple{typeof(Base.iterate), Base.Dict{Symbol, Bool}, Int64})
precompile(Tuple{typeof(ArgParse.check_type), Any, Type, AbstractString})
precompile(Tuple{Type{ArgParse.ArgConsumerType}, Char})
precompile(Tuple{Type{Symbol}, Char, Vararg{Any}})
precompile(Tuple{Type{ArgParse.ArgConsumerType}, Symbol})
precompile(Tuple{typeof(Base.convert), Type{Union{Int64, Symbol}}, Symbol})
precompile(Tuple{typeof(ArgParse.check_action_is_valid), Symbol})
precompile(Tuple{typeof(ArgParse.check_nargs_and_action), ArgParse.ArgConsumerType, Symbol})
precompile(Tuple{typeof(ArgParse.is_flag_action), Symbol})
precompile(Tuple{typeof(Base.:(∉)), Symbol, Array{Symbol, 1}})
precompile(Tuple{typeof(ArgParse.is_command_action), Symbol})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ArgConsumerType, Symbol})
precompile(Tuple{Type{ArgParse.ArgParseField}})
precompile(Tuple{typeof(Base.getindex), Type{AbstractString}})
precompile(Tuple{typeof(Base.convert), Type{Array{AbstractString, 1}}, Array{AbstractString, 1}})
precompile(Tuple{typeof(Base.convert), Type{Type}, Type})
precompile(Tuple{Type{ArgParse.ArgConsumerType}})
precompile(Tuple{typeof(Base.convert), Type{ArgParse.ArgConsumerType}, ArgParse.ArgConsumerType})
precompile(Tuple{typeof(Base.convert), Type{Function}, ArgParse.var"#3#4"})
precompile(Tuple{typeof(Base.convert), Type{Union{AbstractString, Array{var"#s4", 1} where var"#s4"<:AbstractString}}, String})
precompile(Tuple{typeof(ArgParse.name_to_fieldnames!), ArgParse.ArgParseSettings, Union{Array{T, 1}, T} where T<:AbstractString})
precompile(Tuple{ArgParse.var"#do_one#19"{ArgParse.ArgParseSettings, ArgParse.var"#r#18"{ArgParse.ArgParseSettings}, Array{AbstractString, 1}, Array{AbstractString, 1}, Array{AbstractString, 1}}, Any, Any})
precompile(Tuple{ArgParse.var"#r#18"{ArgParse.ArgParseSettings}, Any})
precompile(Tuple{typeof(ArgParse.check_long_opt_name), AbstractString, ArgParse.ArgParseSettings})
precompile(Tuple{typeof(Base.in), Char, String})
precompile(Tuple{typeof(Base.occursin), Base.Regex, String})
precompile(Tuple{typeof(Base.push!), Array{AbstractString, 1}, String})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Array{AbstractString, 1}, Array{AbstractString, 1}, Array{AbstractString, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Array{AbstractString, 1}, Array{AbstractString, 1}, Array{AbstractString, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.isempty), Array{AbstractString, 1}})
precompile(Tuple{typeof(ArgParse.auto_dest_name), AbstractString, Array{AbstractString, 1}, Array{AbstractString, 1}, Bool})
precompile(Tuple{typeof(Base.getindex), Array{AbstractString, 1}, Int64})
precompile(Tuple{ArgParse.var"#r#20"{Bool}, Any})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, String})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, Array{AbstractString, 1}})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, ArgParse.ArgConsumerType})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, Symbol})
precompile(Tuple{typeof(ArgParse.get_group), AbstractString, ArgParse.ArgParseField, ArgParse.ArgParseSettings})
precompile(Tuple{typeof(ArgParse.is_cmd), ArgParse.ArgParseField})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ArgParseField, Symbol})
precompile(Tuple{typeof(ArgParse.is_arg), ArgParse.ArgParseField})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ArgParseGroup, Symbol})
precompile(Tuple{typeof(Base.append!), Array{Symbol, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(ArgParse.warn_extra_opts), Any, Array{Symbol, 1}})
precompile(Tuple{typeof(ArgParse.check_dest_name), AbstractString})
precompile(Tuple{ArgParse.var"#set_if_valid#28"{Array{Symbol, 1}, ArgParse.ArgParseField}, Any, Any})
precompile(Tuple{typeof(ArgParse.check_metavar), AbstractString})
precompile(Tuple{typeof(ArgParse.is_multi_action), Symbol})
precompile(Tuple{typeof(ArgParse.is_multi_nargs), ArgParse.ArgConsumerType})
precompile(Tuple{typeof(Base.:(∉)), Symbol, Tuple{Int64, Symbol, Symbol}})
precompile(Tuple{typeof(ArgParse.check_default_type_multi_nargs), Nothing, Type})
precompile(Tuple{typeof(ArgParse.check_range_default_multi), Nothing, Function})
precompile(Tuple{Type{Array{String, N} where N}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, Array{String, 1}})
precompile(Tuple{typeof(ArgParse.check_arg_makes_sense), ArgParse.ArgParseSettings, ArgParse.ArgParseField})
precompile(Tuple{typeof(ArgParse.check_conflicts_with_commands), ArgParse.ArgParseSettings, ArgParse.ArgParseField, Bool})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ArgParseTable, Symbol})
precompile(Tuple{typeof(Base.keys), Base.Dict{AbstractString, Any}})
precompile(Tuple{typeof(Base.iterate), Base.KeySet{AbstractString, Base.Dict{AbstractString, Any}}})
precompile(Tuple{typeof(Base.iterate), Array{ArgParse.ArgParseField, 1}})
precompile(Tuple{typeof(ArgParse.check_for_duplicates), Array{ArgParse.ArgParseField, 1}, ArgParse.ArgParseField})
precompile(Tuple{typeof(Base.push!), Array{ArgParse.ArgParseField, 1}, ArgParse.ArgParseField})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Pair{Symbol, String}, Pair{Symbol, Bool}, Pair{Symbol, DataType}, Pair{Symbol, Char}, Pair{Symbol, String}}, Int64})
precompile(Tuple{Type{NamedTuple{(:nargs, :help, :metavar, :arg_type, :required), T} where T<:Tuple}, Tuple{Char, String, String, DataType, Bool}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:nargs, :help, :metavar, :arg_type, :required), Tuple{Char, String, String, DataType, Bool}}})
precompile(Tuple{typeof(Base.keys), Base.Pairs{Symbol, Any, NTuple{5, Symbol}, NamedTuple{(:nargs, :help, :metavar, :arg_type, :required), Tuple{Char, String, String, DataType, Bool}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pairs{Symbol, Any, NTuple{5, Symbol}, NamedTuple{(:nargs, :help, :metavar, :arg_type, :required), Tuple{Char, String, String, DataType, Bool}}}})
precompile(Tuple{typeof(Base.iterate), Array{ArgParse.ArgParseField, 1}, Int64})
precompile(Tuple{typeof(Base.iterate), Array{AbstractString, 1}})
precompile(Tuple{typeof(Base.iterate), Array{AbstractString, 1}, Int64})
precompile(Tuple{Type{NamedTuple{(:help, :metavar, :arg_type), T} where T<:Tuple}, Tuple{String, String, DataType}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:help, :metavar, :arg_type), Tuple{String, String, DataType}}})
precompile(Tuple{typeof(Base.keys), Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:help, :metavar, :arg_type), Tuple{String, String, DataType}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:help, :metavar, :arg_type), Tuple{String, String, DataType}}}})
precompile(Tuple{typeof(ArgParse.default_action), ArgParse.ArgConsumerType})
precompile(Tuple{typeof(ArgParse.default_action), Symbol})
precompile(Tuple{typeof(ArgParse.check_default_type), Nothing, Type})
precompile(Tuple{typeof(ArgParse.check_range_default), Nothing, Function})
precompile(Tuple{Type{NamedTuple{(:default, :help, :metavar, :arg_type), T} where T<:Tuple}, Tuple{String, String, String, DataType}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:default, :help, :metavar, :arg_type), Tuple{String, String, String, DataType}}})
precompile(Tuple{typeof(Base.keys), Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:default, :help, :metavar, :arg_type), Tuple{String, String, String, DataType}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:default, :help, :metavar, :arg_type), Tuple{String, String, String, DataType}}}})
precompile(Tuple{typeof(ArgParse.check_default_type), String, Type})
precompile(Tuple{typeof(ArgParse.check_range_default), Any, Function})
precompile(Tuple{ArgParse.var"#25#27", Any})
precompile(Tuple{Type{NamedTuple{(:help, :action), T} where T<:Tuple}, Tuple{String, Symbol}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:help, :action), Tuple{String, Symbol}}})
precompile(Tuple{typeof(Base.keys), Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:help, :action), Tuple{String, Symbol}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:help, :action), Tuple{String, Symbol}}}})
precompile(Tuple{typeof(Base.:(!=)), Symbol, Int64})
precompile(Tuple{typeof(Base.push!), Array{Symbol, 1}, Symbol})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, Type})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, Bool})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Pair{Symbol, String}, Pair{Symbol, DataType}, Pair{Symbol, Array{String, 1}}, Pair{Symbol, String}, Pair{Symbol, Char}}, Int64})
precompile(Tuple{Type{NamedTuple{(:default, :nargs, :help, :metavar, :arg_type), T} where T<:Tuple}, Tuple{Array{String, 1}, Char, String, String, DataType}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:default, :nargs, :help, :metavar, :arg_type), Tuple{Array{String, 1}, Char, String, String, DataType}}})
precompile(Tuple{typeof(Base.keys), Base.Pairs{Symbol, Any, NTuple{5, Symbol}, NamedTuple{(:default, :nargs, :help, :metavar, :arg_type), Tuple{Array{String, 1}, Char, String, String, DataType}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pairs{Symbol, Any, NTuple{5, Symbol}, NamedTuple{(:default, :nargs, :help, :metavar, :arg_type), Tuple{Array{String, 1}, Char, String, String, DataType}}}})
precompile(Tuple{typeof(ArgParse.check_default_type_multi_nargs), Array{T, 1} where T, Type})
precompile(Tuple{typeof(Base.all), Function, Array{String, 1}})
precompile(Tuple{typeof(Base._all), ArgParse.var"#10#11"{DataType}, Array{String, 1}, Base.Colon})
precompile(Tuple{ArgParse.var"#10#11"{DataType}, Any})
precompile(Tuple{typeof(ArgParse.check_range_default_multi), Array{T, 1} where T, Function})
precompile(Tuple{typeof(Base.:(==)), Array{String, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Pair{Symbol, String}, Pair{Symbol, DataType}, Pair{Symbol, String}, Pair{Symbol, Int64}}, Int64})
precompile(Tuple{Type{NamedTuple{(:default, :help, :metavar, :arg_type), T} where T<:Tuple}, Tuple{Int64, String, String, DataType}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:default, :help, :metavar, :arg_type), Tuple{Int64, String, String, DataType}}})
precompile(Tuple{typeof(Base.keys), Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:default, :help, :metavar, :arg_type), Tuple{Int64, String, String, DataType}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:default, :help, :metavar, :arg_type), Tuple{Int64, String, String, DataType}}}})
precompile(Tuple{typeof(ArgParse.check_default_type), Int64, Type})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Pair{Symbol, String}, Pair{Symbol, DataType}, Pair{Symbol, Int64}, Pair{Symbol, String}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Pair{Symbol, String}, Pair{Symbol, DataType}, Pair{Symbol, Float64}, Pair{Symbol, String}}, Int64})
precompile(Tuple{Type{NamedTuple{(:default, :help, :metavar, :arg_type), T} where T<:Tuple}, Tuple{Float64, String, String, DataType}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:default, :help, :metavar, :arg_type), Tuple{Float64, String, String, DataType}}})
precompile(Tuple{typeof(Base.keys), Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:default, :help, :metavar, :arg_type), Tuple{Float64, String, String, DataType}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:default, :help, :metavar, :arg_type), Tuple{Float64, String, String, DataType}}}})
precompile(Tuple{typeof(ArgParse.check_default_type), Float64, Type})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Pair{Symbol, String}, Pair{Symbol, Int64}, Pair{Symbol, DataType}, Pair{Symbol, String}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Pair{Symbol, String}, Pair{Symbol, Char}, Pair{Symbol, DataType}, Pair{Symbol, String}}, Int64})
precompile(Tuple{Type{NamedTuple{(:default, :help, :metavar, :arg_type), T} where T<:Tuple}, Tuple{Char, String, String, DataType}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:default, :help, :metavar, :arg_type), Tuple{Char, String, String, DataType}}})
precompile(Tuple{typeof(Base.keys), Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:default, :help, :metavar, :arg_type), Tuple{Char, String, String, DataType}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:default, :help, :metavar, :arg_type), Tuple{Char, String, String, DataType}}}})
precompile(Tuple{typeof(ArgParse.check_default_type), Char, Type})
precompile(Tuple{typeof(ArgParse.parse_args), ArgParse.ArgParseSettings})
precompile(Tuple{ArgParse.var"##parse_args#60", Base.Pairs{Symbol, V, Tuple{Vararg{Symbol, N}}, NamedTuple{names, T}} where T<:Tuple{Vararg{Any, N}} where names where N where V, typeof(ArgParse.parse_args), ArgParse.ArgParseSettings})
precompile(Tuple{typeof(ArgParse.parse_args), Array{T, 1} where T, ArgParse.ArgParseSettings})
precompile(Tuple{ArgParse.var"##parse_args#61", Bool, typeof(ArgParse.parse_args), Array{T, 1} where T, ArgParse.ArgParseSettings})
precompile(Tuple{typeof(ArgParse.parse_args_unhandled), Array{T, 1} where T, ArgParse.ArgParseSettings})
precompile(Tuple{typeof(ArgParse.parse_args_unhandled), Array{T, 1} where T, ArgParse.ArgParseSettings, Bool})
precompile(Tuple{typeof(Base._all), ArgParse.var"#68#70", Array{String, 1}, Base.Colon})
precompile(Tuple{ArgParse.var"#68#70", Any})
precompile(Tuple{typeof(Base.isempty), Base.Set{Char}})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseSettings, Symbol, Bool})
precompile(Tuple{Type{NamedTuple{(:action, :help, :group), T} where T<:Tuple}, Tuple{Symbol, String, String}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:action, :help, :group), Tuple{Symbol, String, String}}})
precompile(Tuple{typeof(Base.keys), Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:action, :help, :group), Tuple{Symbol, String, String}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:action, :help, :group), Tuple{Symbol, String, String}}}})
precompile(Tuple{typeof(Base.first), Array{String, 1}})
precompile(Tuple{typeof(Base.foreach), ArgParse.var"#do_one#19"{ArgParse.ArgParseSettings, ArgParse.var"#r#18"{ArgParse.ArgParseSettings}, Array{AbstractString, 1}, Array{AbstractString, 1}, Array{AbstractString, 1}}, Array{String, 1}})
precompile(Tuple{ArgParse.var"#do_one#19"{ArgParse.ArgParseSettings, ArgParse.var"#r#18"{ArgParse.ArgParseSettings}, Array{AbstractString, 1}, Array{AbstractString, 1}, Array{AbstractString, 1}}, Any})
precompile(Tuple{typeof(ArgParse.check_short_opt_name), AbstractString, ArgParse.ArgParseSettings})
precompile(Tuple{Type{ArgParse.ParserState}, Array{T, 1} where T, ArgParse.ArgParseSettings, Bool})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, ArgParse.var"#63#65", Array{ArgParse.ArgParseGroup, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, ArgParse.var"#62#64", Base.Iterators.Filter{ArgParse.var"#63#65", Array{ArgParse.ArgParseGroup, 1}}})
precompile(Tuple{Type{Base.Dict{ArgParse.ArgParseGroup, AbstractString}}, Base.Generator{Base.Iterators.Filter{ArgParse.var"#63#65", Array{ArgParse.ArgParseGroup, 1}}, ArgParse.var"#62#64"}})
precompile(Tuple{ArgParse.var"#63#65", Any})
precompile(Tuple{typeof(Base.convert), Type{Array{T, 1} where T}, Array{String, 1}})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, AbstractString}}, Nothing})
precompile(Tuple{Type{Base.Set{AbstractString}}})
precompile(Tuple{typeof(Base.convert), Type{Base.Set{AbstractString}}, Base.Set{AbstractString}})
precompile(Tuple{typeof(Base.convert), Type{Base.Dict{ArgParse.ArgParseGroup, AbstractString}}, Base.Dict{ArgParse.ArgParseGroup, AbstractString}})
precompile(Tuple{typeof(Base.convert), Type{Base.Dict{String, Any}}, Base.Dict{String, Any}})
precompile(Tuple{Type{NamedTuple{(:taskref, :spawn), T} where T<:Tuple}, Tuple{Nothing, Bool}})
precompile(Tuple{Type{Base.Channel{T} where T}, Function})
precompile(Tuple{Base.var"##_#626", Nothing, Bool, Type{Base.Channel{Any}}, ArgParse.var"#69#71"{ArgParse.ArgParseSettings, ArgParse.ParserState}, Int64})
precompile(Tuple{Base.var"#627#628"{ArgParse.var"#69#71"{ArgParse.ArgParseSettings, ArgParse.ParserState}, Base.Channel{Any}}})
precompile(Tuple{ArgParse.var"#69#71"{ArgParse.ArgParseSettings, ArgParse.ParserState}, Any})
precompile(Tuple{typeof(ArgParse.preparse!), Base.Channel{T} where T, ArgParse.ParserState, ArgParse.ArgParseSettings})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ParserState, Symbol})
precompile(Tuple{typeof(Base.findfirst), Function, String})
precompile(Tuple{typeof(Base.popfirst!), Array{String, 1}})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ParserState, Symbol, String})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, AbstractString}}, String})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ParserState, Symbol, Nothing})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Symbol})
precompile(Tuple{typeof(Base.iterate), Base.Channel{Any}})
precompile(Tuple{typeof(ArgParse.parse_long_opt!), ArgParse.ParserState, ArgParse.ArgParseSettings})
precompile(Tuple{typeof(Base.convert), Type{ArgParse.ArgParseField}, ArgParse.ArgParseField})
precompile(Tuple{typeof(ArgParse.is_flag), ArgParse.ArgParseField})
precompile(Tuple{typeof(ArgParse.parse1_optarg!), ArgParse.ParserState, ArgParse.ArgParseSettings, ArgParse.ArgParseField, Any, AbstractString})
precompile(Tuple{typeof(ArgParse.test_exclusive_groups!), Base.Dict{ArgParse.ArgParseGroup, AbstractString}, ArgParse.ArgParseSettings, ArgParse.ArgParseField, AbstractString})
precompile(Tuple{typeof(Base.iterate), Array{ArgParse.ArgParseGroup, 1}})
precompile(Tuple{typeof(Base.iterate), Array{ArgParse.ArgParseGroup, 1}, Int64})
precompile(Tuple{typeof(Base.haskey), Base.Dict{ArgParse.ArgParseGroup, AbstractString}, ArgParse.ArgParseGroup})
precompile(Tuple{typeof(ArgParse.looks_like_an_option), AbstractString, ArgParse.ArgParseSettings})
precompile(Tuple{typeof(ArgParse.parse_item_wrapper), Type{String}, AbstractString})
precompile(Tuple{typeof(ArgParse.parse_item), Type{String}, AbstractString})
precompile(Tuple{typeof(ArgParse.test_range), Function, Any, AbstractString})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ParserState, Symbol, Bool})
precompile(Tuple{typeof(ArgParse.idstring), ArgParse.ArgParseField})
precompile(Tuple{typeof(Base.push!), Base.Set{AbstractString}, String})
precompile(Tuple{typeof(ArgParse.found_command), ArgParse.ParserState})
precompile(Tuple{typeof(ArgParse.parse_item_wrapper), Type{Int64}, AbstractString})
precompile(Tuple{typeof(ArgParse.parse_item), Type{Int64}, AbstractString})
precompile(Tuple{typeof(ArgParse.parse1_flag!), ArgParse.ParserState, ArgParse.ArgParseSettings, ArgParse.ArgParseField, Bool, AbstractString})
precompile(Tuple{Base.var"#631#632"{Base.Channel{Any}, Task}})
precompile(Tuple{typeof(ArgParse.test_required_args), ArgParse.ArgParseSettings, Base.Set{AbstractString}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, ArgParse.var"#37#41", Array{ArgParse.ArgParseGroup, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, ArgParse.var"#36#40", Base.Iterators.Filter{ArgParse.var"#37#41", Array{ArgParse.ArgParseGroup, 1}}})
precompile(Tuple{Type{Base.Dict{ArgParse.ArgParseGroup, Bool}}, Base.Generator{Base.Iterators.Filter{ArgParse.var"#37#41", Array{ArgParse.ArgParseGroup, 1}}, ArgParse.var"#36#40"}})
precompile(Tuple{ArgParse.var"#37#41", Any})
precompile(Tuple{typeof(Base.in), String, Base.Set{AbstractString}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{ArgParse.ArgParseGroup, Bool}, Bool, ArgParse.ArgParseGroup})
precompile(Tuple{typeof(Base.iterate), Base.Dict{ArgParse.ArgParseGroup, Bool}})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{ArgParse.ArgParseGroup, Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{ArgParse.ArgParseGroup, Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Dict{ArgParse.ArgParseGroup, Bool}, Int64})
precompile(Tuple{typeof(ArgParse.has_cmd), ArgParse.ArgParseSettings})
precompile(Tuple{typeof(Base.any), Function, Array{ArgParse.ArgParseField, 1}})
precompile(Tuple{typeof(Base._any), typeof(ArgParse.is_cmd), Array{ArgParse.ArgParseField, 1}, Base.Colon})
precompile(Tuple{typeof(Base.pop!), Array{ArgParse.ArgParseField, 1}})
precompile(Tuple{typeof(Base.read), Base.PipeEndpoint})
precompile(Tuple{typeof(Base.getindex), Base.Dict{String, Tuple{Int64, Int64}}, String})
precompile(Tuple{typeof(Base.getproperty), Base.KeySet{String, Base.Dict{String, BioAlignments.SubstitutionMatrix{BioSymbols.AminoAcid, Int64}}}, Symbol})
precompile(Tuple{typeof(Patchwork.checkgappenalty), String, Int64, Int64})
precompile(Tuple{typeof(Patchwork.countsequences), String})
precompile(Tuple{typeof(Base.Iterators.only), Array{String, 1}})
precompile(Tuple{typeof(Base.length), Array{Float64, 1}})
precompile(Tuple{typeof(Base.Filesystem.isdir), String})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.Filesystem.mkpath), Array{String, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{String, 1}, Base.Generator{Array{String, 1}, typeof(Base.Filesystem.mkpath)}})
precompile(Tuple{typeof(Patchwork.diamond_makeblastdb), String, String})
precompile(Tuple{typeof(Base.arg_gen), Array{Any, 1}})
precompile(Tuple{typeof(Base.setup_stdio), Base.FileRedirect, Bool})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.Filesystem.File, Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.Filesystem.File, Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Union{Base.Libc.RawFD, IO}, 1}, Base.Filesystem.File, Int64})
precompile(Tuple{typeof(Base.setup_stdio), Base.Filesystem.File, Bool})
precompile(Tuple{typeof(Base.close_stdio), Base.Filesystem.File})
precompile(Tuple{typeof(Base.string), Int64})
precompile(Tuple{typeof(Base.push!), Array{String, 1}, String, String})
precompile(Tuple{typeof(Patchwork.diamond_blastx), String, String, String, Array{String, 1}})
precompile(Tuple{typeof(Base.cmd_interpolate), Int64})
precompile(Tuple{typeof(Base.cmd_interpolate), String, Vararg{String}})
precompile(Tuple{typeof(Base.map), typeof(Base.cmd_interpolate1), Tuple{String}})
precompile(Tuple{typeof(Base.cstr), String})
precompile(Tuple{typeof(Patchwork.readblastTSV), String})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, Char, UInt8, String}}, Char})
precompile(Tuple{typeof(CSV.getbytebuffer), String, Bool})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Ptr{Nothing}, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Ptr{Nothing}, Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.getindex), Array{UInt8, 1}, Int64})
precompile(Tuple{typeof(CSV.getname), String})
precompile(Tuple{Type{InlineStrings.String15}, WeakRefStrings.PosLenString})
precompile(Tuple{Type{SentinelArrays.SentinelArray{InlineStrings.String15, 1, S, V, A} where A<:AbstractArray{InlineStrings.String15, 1} where V where S}, UndefInitializer, Int64})
precompile(Tuple{typeof(SIMD._unreachable)})
precompile(Tuple{typeof(SentinelArrays._defaultsentinel), Type})
precompile(Tuple{typeof(Base.reinterpret), Type{InlineStrings.String15}, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.check_readable), Base.ReinterpretArray{InlineStrings.String15, 1, UInt8, Array{UInt8, 1}, false}})
precompile(Tuple{typeof(Base._getindex_ra), Base.ReinterpretArray{InlineStrings.String15, 1, UInt8, Array{UInt8, 1}, false}, Int64, Tuple{}})
precompile(Tuple{Type{SentinelArrays.SentinelArray{T, N, S, V, A} where A<:AbstractArray{T, N} where V where S where N where T}, Array{InlineStrings.String15, 1}, InlineStrings.String15, Base.Missing})
precompile(Tuple{typeof(Base.setindex!), SentinelArrays.SentinelArray{InlineStrings.String15, 1, InlineStrings.String15, Base.Missing, Array{InlineStrings.String15, 1}}, InlineStrings.String15, Int64})
precompile(Tuple{typeof(Base.setproperty!), CSV.Column, Symbol, SentinelArrays.SentinelArray{InlineStrings.String15, 1, InlineStrings.String15, Base.Missing, Array{InlineStrings.String15, 1}}})
precompile(Tuple{typeof(Base.convert), Type{AbstractArray{var"#s91", 1} where var"#s91"}, SentinelArrays.SentinelArray{InlineStrings.String15, 1, InlineStrings.String15, Base.Missing, Array{InlineStrings.String15, 1}}})
precompile(Tuple{typeof(Base.setindex!), SentinelArrays.SentinelArray{String, 1, UndefInitializer, Base.Missing, Array{String, 1}}, String, Int64})
precompile(Tuple{typeof(Base.setproperty!), CSV.Column, Symbol, SentinelArrays.SentinelArray{String, 1, UndefInitializer, Base.Missing, Array{String, 1}}})
precompile(Tuple{typeof(Base.convert), Type{AbstractArray{var"#s91", 1} where var"#s91"}, SentinelArrays.SentinelArray{String, 1, UndefInitializer, Base.Missing, Array{String, 1}}})
precompile(Tuple{typeof(Base.convert), Type{AbstractArray{var"#s91", 1} where var"#s91"}, SentinelArrays.SentinelArray{Int64, 1, Int64, Base.Missing, Array{Int64, 1}}})
precompile(Tuple{Type{InlineStrings.String31}, WeakRefStrings.PosLenString})
precompile(Tuple{Type{SentinelArrays.SentinelArray{InlineStrings.String31, 1, S, V, A} where A<:AbstractArray{InlineStrings.String31, 1} where V where S}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.reinterpret), Type{InlineStrings.String31}, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.check_readable), Base.ReinterpretArray{InlineStrings.String31, 1, UInt8, Array{UInt8, 1}, false}})
precompile(Tuple{typeof(Base._getindex_ra), Base.ReinterpretArray{InlineStrings.String31, 1, UInt8, Array{UInt8, 1}, false}, Int64, Tuple{}})
precompile(Tuple{Type{SentinelArrays.SentinelArray{T, N, S, V, A} where A<:AbstractArray{T, N} where V where S where N where T}, Array{InlineStrings.String31, 1}, InlineStrings.String31, Base.Missing})
precompile(Tuple{typeof(Base.setindex!), SentinelArrays.SentinelArray{InlineStrings.String31, 1, InlineStrings.String31, Base.Missing, Array{InlineStrings.String31, 1}}, InlineStrings.String31, Int64})
precompile(Tuple{typeof(Base.setproperty!), CSV.Column, Symbol, SentinelArrays.SentinelArray{InlineStrings.String31, 1, InlineStrings.String31, Base.Missing, Array{InlineStrings.String31, 1}}})
precompile(Tuple{typeof(Base.convert), Type{AbstractArray{var"#s91", 1} where var"#s91"}, SentinelArrays.SentinelArray{InlineStrings.String31, 1, InlineStrings.String31, Base.Missing, Array{InlineStrings.String31, 1}}})
precompile(Tuple{typeof(Base.convert), Type{AbstractArray{var"#s91", 1} where var"#s91"}, SentinelArrays.SentinelArray{Float64, 1, Float64, Base.Missing, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.resize!), SentinelArrays.SentinelArray{InlineStrings.String15, 1, InlineStrings.String15, Base.Missing, Array{InlineStrings.String15, 1}}, Int64})
precompile(Tuple{typeof(Base.resize!), SentinelArrays.SentinelArray{String, 1, UndefInitializer, Base.Missing, Array{String, 1}}, Int64})
precompile(Tuple{typeof(Base.resize!), SentinelArrays.SentinelArray{InlineStrings.String31, 1, InlineStrings.String31, Base.Missing, Array{InlineStrings.String31, 1}}, Int64})
precompile(Tuple{typeof(CSV.checkpooled!), Type{InlineStrings.String15}, Nothing, CSV.Column, Int64, Int64, Int64, CSV.Context})
precompile(Tuple{typeof(Base.parent), SentinelArrays.SentinelArray{InlineStrings.String15, 1, InlineStrings.String15, Base.Missing, Array{InlineStrings.String15, 1}}})
precompile(Tuple{typeof(Base.setproperty!), CSV.Column, Symbol, Array{InlineStrings.String15, 1}})
precompile(Tuple{typeof(Base.convert), Type{AbstractArray{var"#s91", 1} where var"#s91"}, Array{InlineStrings.String15, 1}})
precompile(Tuple{typeof(CSV.checkpooled!), Type{String}, Nothing, CSV.Column, Int64, Int64, Int64, CSV.Context})
precompile(Tuple{typeof(Base.parent), SentinelArrays.SentinelArray{String, 1, UndefInitializer, Base.Missing, Array{String, 1}}})
precompile(Tuple{typeof(Base.setproperty!), CSV.Column, Symbol, Array{String, 1}})
precompile(Tuple{typeof(Base.parent), SentinelArrays.SentinelArray{Int64, 1, Int64, Base.Missing, Array{Int64, 1}}})
precompile(Tuple{typeof(CSV.checkpooled!), Type{InlineStrings.String31}, Nothing, CSV.Column, Int64, Int64, Int64, CSV.Context})
precompile(Tuple{typeof(Base.parent), SentinelArrays.SentinelArray{Float64, 1, Float64, Base.Missing, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.length), Array{InlineStrings.String15, 1}})
precompile(Tuple{typeof(Base.length), PooledArrays.PooledArray{InlineStrings.String31, UInt32, 1, Array{UInt32, 1}}})
precompile(Tuple{typeof(DataFrames._preprocess_column), Array{InlineStrings.String15, 1}, Int64, Bool})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{InlineStrings.String15, 1}, Int64})
precompile(Tuple{typeof(DataFrames._preprocess_column), PooledArrays.PooledArray{InlineStrings.String31, UInt32, 1, Array{UInt32, 1}}, Int64, Bool})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, PooledArrays.PooledArray{InlineStrings.String31, UInt32, 1, Array{UInt32, 1}}, Int64})
precompile(Tuple{typeof(Base.firstindex), Array{InlineStrings.String15, 1}})
precompile(Tuple{typeof(Base.firstindex), PooledArrays.PooledArray{InlineStrings.String31, UInt32, 1, Array{UInt32, 1}}})
precompile(Tuple{typeof(Base._array_for), Type{Array{InlineStrings.String15, 1}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{InlineStrings.String15, 1}, 1}, Array{InlineStrings.String15, 1}, Base.Generator{Base.UnitRange{Int64}, Base.var"#217#218"{DataFrames.var"#182#183"{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Array{InlineStrings.String15, 1}, 1}, Array{String, 1}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{T, 1} where T, 1}, Base.Generator{Base.UnitRange{Int64}, Base.var"#217#218"{DataFrames.var"#182#183"{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.promote_typejoin), Any, Any})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Array{T, 1} where T, 1}, PooledArrays.PooledArray{InlineStrings.String31, UInt32, 1, Array{UInt32, 1}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{AbstractArray{T, 1} where T, 1}, Base.Generator{Base.UnitRange{Int64}, Base.var"#217#218"{DataFrames.var"#182#183"{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Tuple{Array{InlineStrings.String15, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, PooledArrays.PooledArray{InlineStrings.String31, UInt32, 1, Array{UInt32, 1}}, Array{String, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{String, 1}, Array{Float64, 1}, Array{Int64, 1}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(DataFrames.refpool_and_array), Tuple{Tuple{Array{InlineStrings.String15, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, PooledArrays.PooledArray{InlineStrings.String31, UInt32, 1, Array{UInt32, 1}}, Array{String, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{String, 1}, Array{Float64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(DataFrames.refpool_and_array), Tuple{Tuple{Array{InlineStrings.String15, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, PooledArrays.PooledArray{InlineStrings.String31, UInt32, 1, Array{UInt32, 1}}, Array{String, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{String, 1}, Array{Float64, 1}, Array{Int64, 1}}}}})
precompile(Tuple{typeof(Base.:(|)), Bool, Base.Missing})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.Missing, Base.Missing}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.Missing, Base.Missing}, Int64, Int64})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(DataFrames.refpool_and_array), Tuple{Tuple{Array{InlineStrings.String15, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, PooledArrays.PooledArray{InlineStrings.String31, UInt32, 1, Array{UInt32, 1}}, Array{String, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{String, 1}, Array{Float64, 1}, Array{Int64, 1}}}}})
precompile(Tuple{typeof(DataFrames.refpool_and_array), Array{InlineStrings.String15, 1}})
precompile(Tuple{typeof(Base.cconvert), Type, Base.MPFR.MPFRRoundingMode})
precompile(Tuple{typeof(Base.convert), Type{Base.MPFR.MPFRRoundingMode}, Base.MPFR.MPFRRoundingMode})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Base.MPFR.MPFRRoundingMode}, Base.MPFR.MPFRRoundingMode})
precompile(Tuple{typeof(DataFrames.refpool_and_array), Array{Float64, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Tuple{Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{Int64, 1}}}, Tuple{Nothing, Nothing}, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{Int64, 1}}}, Tuple{Array{InlineStrings.String31, 1}, Array{UInt32, 1}}, Vararg{Tuple{Nothing, Nothing}, 6}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.first), Tuple{Tuple{Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{Int64, 1}}}, Tuple{Nothing, Nothing}, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{Int64, 1}}}, Tuple{Array{InlineStrings.String31, 1}, Array{UInt32, 1}}, Vararg{Tuple{Nothing, Nothing}, 6}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.first), Tuple{Tuple{Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{Int64, 1}}}, Tuple{Nothing, Nothing}, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{Int64, 1}}}, Tuple{Array{InlineStrings.String31, 1}, Array{UInt32, 1}}, Vararg{Tuple{Nothing, Nothing}, 6}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.last), Tuple{Tuple{Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{Int64, 1}}}, Tuple{Nothing, Nothing}, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{Int64, 1}}}, Tuple{Array{InlineStrings.String31, 1}, Array{UInt32, 1}}, Vararg{Tuple{Nothing, Nothing}, 6}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.last), Tuple{Tuple{Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{Int64, 1}}}, Tuple{Nothing, Nothing}, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{Int64, 1}}}, Tuple{Array{InlineStrings.String31, 1}, Array{UInt32, 1}}, Vararg{Tuple{Nothing, Nothing}, 6}}}}})
precompile(Tuple{typeof(Base.any), Function, Tuple{Nothing, Nothing, Nothing, Nothing, DataFrames.IntegerRefpool{Int64}, Nothing, DataFrames.IntegerRefpool{Int64}, Array{InlineStrings.String31, 1}, Vararg{Nothing, 6}}})
precompile(Tuple{typeof(Base._any_tuple), typeof(Base.isnothing), Bool, Nothing, Nothing, Vararg{Any}})
precompile(Tuple{typeof(DataFrames.row_group_slots!), Tuple{Array{InlineStrings.String15, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, PooledArrays.PooledArray{InlineStrings.String31, UInt32, 1, Array{UInt32, 1}}, Array{String, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{String, 1}, Array{Float64, 1}, Array{Int64, 1}}, Base.Val{true}, Nothing, Bool, Nothing, Bool})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.first), Tuple{Tuple{Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{Int64, 1}}}, Tuple{Nothing, Nothing}, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{Int64, 1}}}, Tuple{Array{InlineStrings.String31, 1}, Array{UInt32, 1}}, Vararg{Tuple{Nothing, Nothing}, 6}}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.first), Tuple{Tuple{Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{Int64, 1}}}, Tuple{Nothing, Nothing}, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{Int64, 1}}}, Tuple{Array{InlineStrings.String31, 1}, Array{UInt32, 1}}, Vararg{Tuple{Nothing, Nothing}, 6}}}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.last), Tuple{Tuple{Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{Int64, 1}}}, Tuple{Nothing, Nothing}, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{Int64, 1}}}, Tuple{Array{InlineStrings.String31, 1}, Array{UInt32, 1}}, Vararg{Tuple{Nothing, Nothing}, 6}}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.last), Tuple{Tuple{Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{Nothing, Nothing}, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{Int64, 1}}}, Tuple{Nothing, Nothing}, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{Int64, 1}}}, Tuple{Array{InlineStrings.String31, 1}, Array{UInt32, 1}}, Vararg{Tuple{Nothing, Nothing}, 6}}}}})
precompile(Tuple{typeof(DataFrames.row_group_slots!), Tuple{Array{InlineStrings.String15, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, PooledArrays.PooledArray{InlineStrings.String31, UInt32, 1, Array{UInt32, 1}}, Array{String, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{String, 1}, Array{Float64, 1}, Array{Int64, 1}}, Tuple{Nothing, Nothing, Nothing, Nothing, DataFrames.IntegerRefpool{Int64}, Nothing, DataFrames.IntegerRefpool{Int64}, Array{InlineStrings.String31, 1}, Vararg{Nothing, 6}}, Tuple{Nothing, Nothing, Nothing, Nothing, DataFrames.IntegerRefarray{Array{Int64, 1}}, Nothing, DataFrames.IntegerRefarray{Array{Int64, 1}}, Array{UInt32, 1}, Vararg{Nothing, 6}}, Base.Val{true}, Nothing, Bool, Bool, Bool})
precompile(Tuple{typeof(DataFrames.hashrows_col!), Array{UInt64, 1}, Array{Bool, 1}, Array{InlineStrings.String15, 1}, Nothing, Bool})
precompile(Tuple{typeof(DataFrames.hashrows_col!), Array{UInt64, 1}, Array{Bool, 1}, Array{Float64, 1}, Nothing, Bool})
precompile(Tuple{typeof(Base.getindex), Array{InlineStrings.String15, 1}, Int64})
precompile(Tuple{Type{String}, InlineStrings.String15})
precompile(Tuple{typeof(Base.getindex), PooledArrays.PooledArray{InlineStrings.String31, UInt32, 1, Array{UInt32, 1}}, Int64})
precompile(Tuple{Type{String}, InlineStrings.String31})
precompile(Tuple{typeof(Base.getindex), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Patchwork.frameshift_fullseq), String, String, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 1}, Int64})
precompile(Tuple{Type{Patchwork.DiamondSearchResult}, Patchwork.SequenceIdentifier, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64, Int64, Int64, Patchwork.SequenceIdentifier, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, Int64, Int64, String, Float64, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Patchwork.DiamondSearchResult, 1}, Patchwork.DiamondSearchResult, Int64})
precompile(Tuple{typeof(Base.:(*)), Vararg{String, 4}})
precompile(Tuple{PooledArrays.var"#1#2", PooledArrays.PooledArray{InlineStrings.String31, UInt32, 1, Array{UInt32, 1}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:header,), Tuple{Bool}}, typeof(Patchwork.writeblastTSV), String, Array{Patchwork.DiamondSearchResult, 1}})
precompile(Tuple{typeof(Tables._buildcolumns), Tables.IteratorWrapper{Array{Patchwork.DiamondSearchResult, 1}}, Tables.IteratorRow{Patchwork.DiamondSearchResult}, Int64, Tables.Schema{(:queryid, :translated_querysequence, :full_querysequence, :querystart, :queryend, :queryframe, :subjectid, :subjectsequence, :subjectstart, :subjectend, :cigar, :percentidentical, :bitscore), nothing}, NTuple{13, Tables.EmptyVector}, Base.RefValue{Any}})
precompile(Tuple{typeof(Base.ntuple), Tables.var"#65#66"{Int64, Base.RefValue{Any}, Array{Patchwork.SequenceIdentifier, 1}}, Int64})
precompile(Tuple{typeof(Base._array_for), Type{Array{Patchwork.SequenceIdentifier, 1}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Patchwork.SequenceIdentifier, 1}, 1}, Array{Patchwork.SequenceIdentifier, 1}, Base.Generator{Base.UnitRange{Int64}, Base.var"#217#218"{Tables.var"#65#66"{Int64, Base.RefValue{Any}, Array{Patchwork.SequenceIdentifier, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Array{Patchwork.SequenceIdentifier, 1}, 1}, Tables.EmptyVector, Int64})
precompile(Tuple{typeof(Base._promote_typesubtract), Any})
precompile(Tuple{typeof(Base.collect_to!), Array{AbstractArray{T, 1} where T, 1}, Base.Generator{Base.UnitRange{Int64}, Base.var"#217#218"{Tables.var"#65#66"{Int64, Base.RefValue{Any}, Array{Patchwork.SequenceIdentifier, 1}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.ntuple), Tables.var"#65#66"{Int64, Base.RefValue{Any}, Array{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, 1}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Patchwork.SequenceIdentifier, 1}, 1}, Array{Patchwork.SequenceIdentifier, 1}, Base.Generator{Base.UnitRange{Int64}, Base.var"#217#218"{Tables.var"#65#66"{Int64, Base.RefValue{Any}, Array{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, 1}}}}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Array{Patchwork.SequenceIdentifier, 1}, 1}, Array{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, 1}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{T, 1} where T, 1}, Base.Generator{Base.UnitRange{Int64}, Base.var"#217#218"{Tables.var"#65#66"{Int64, Base.RefValue{Any}, Array{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, 1}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Array{T, 1} where T, 1}, Tables.EmptyVector, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{AbstractArray{T, 1} where T, 1}, Base.Generator{Base.UnitRange{Int64}, Base.var"#217#218"{Tables.var"#65#66"{Int64, Base.RefValue{Any}, Array{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, 1}}}}, Int64, Int64})
precompile(Tuple{typeof(Tables.undatavalue), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}})
precompile(Tuple{typeof(DataAPI.defaultarray), Type{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Int64})
precompile(Tuple{typeof(Tables.add_or_widen!), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64, Symbol, Tables.EmptyVector, Int64, Base.RefValue{Any}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.ntuple), Tables.var"#65#66"{Int64, Base.RefValue{Any}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Patchwork.SequenceIdentifier, 1}, 1}, Array{Patchwork.SequenceIdentifier, 1}, Base.Generator{Base.UnitRange{Int64}, Base.var"#217#218"{Tables.var"#65#66"{Int64, Base.RefValue{Any}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{T, 1} where T, 1}, Base.Generator{Base.UnitRange{Int64}, Base.var"#217#218"{Tables.var"#65#66"{Int64, Base.RefValue{Any}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{AbstractArray{T, 1} where T, 1}, Base.Generator{Base.UnitRange{Int64}, Base.var"#217#218"{Tables.var"#65#66"{Int64, Base.RefValue{Any}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.ntuple), Tables.var"#65#66"{Int64, Base.RefValue{Any}, Array{Int64, 1}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Patchwork.SequenceIdentifier, 1}, 1}, Array{Patchwork.SequenceIdentifier, 1}, Base.Generator{Base.UnitRange{Int64}, Base.var"#217#218"{Tables.var"#65#66"{Int64, Base.RefValue{Any}, Array{Int64, 1}}}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{T, 1} where T, 1}, Base.Generator{Base.UnitRange{Int64}, Base.var"#217#218"{Tables.var"#65#66"{Int64, Base.RefValue{Any}, Array{Int64, 1}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{AbstractArray{T, 1} where T, 1}, Base.Generator{Base.UnitRange{Int64}, Base.var"#217#218"{Tables.var"#65#66"{Int64, Base.RefValue{Any}, Array{Int64, 1}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{T, 1} where T, 1}, Base.Generator{Base.UnitRange{Int64}, Base.var"#217#218"{Tables.var"#65#66"{Int64, Base.RefValue{Any}, Array{Patchwork.SequenceIdentifier, 1}}}}, Int64, Int64})
precompile(Tuple{typeof(Tables.undatavalue), String})
precompile(Tuple{typeof(Tables.add_or_widen!), String, Int64, Symbol, Tables.EmptyVector, Int64, Base.RefValue{Any}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.ntuple), Tables.var"#65#66"{Int64, Base.RefValue{Any}, Array{String, 1}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Patchwork.SequenceIdentifier, 1}, 1}, Array{Patchwork.SequenceIdentifier, 1}, Base.Generator{Base.UnitRange{Int64}, Base.var"#217#218"{Tables.var"#65#66"{Int64, Base.RefValue{Any}, Array{String, 1}}}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{T, 1} where T, 1}, Base.Generator{Base.UnitRange{Int64}, Base.var"#217#218"{Tables.var"#65#66"{Int64, Base.RefValue{Any}, Array{String, 1}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{AbstractArray{T, 1} where T, 1}, Base.Generator{Base.UnitRange{Int64}, Base.var"#217#218"{Tables.var"#65#66"{Int64, Base.RefValue{Any}, Array{String, 1}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.ntuple), Tables.var"#65#66"{Int64, Base.RefValue{Any}, Array{Float64, 1}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Patchwork.SequenceIdentifier, 1}, 1}, Array{Patchwork.SequenceIdentifier, 1}, Base.Generator{Base.UnitRange{Int64}, Base.var"#217#218"{Tables.var"#65#66"{Int64, Base.RefValue{Any}, Array{Float64, 1}}}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{T, 1} where T, 1}, Base.Generator{Base.UnitRange{Int64}, Base.var"#217#218"{Tables.var"#65#66"{Int64, Base.RefValue{Any}, Array{Float64, 1}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{AbstractArray{T, 1} where T, 1}, Base.Generator{Base.UnitRange{Int64}, Base.var"#217#218"{Tables.var"#65#66"{Int64, Base.RefValue{Any}, Array{Float64, 1}}}}, Int64, Int64})
precompile(Tuple{typeof(BioSequences.nextposition), BioSequences.BitIndex{4, UInt64}})
precompile(Tuple{typeof(Tables.__buildcolumns), Tables.IteratorWrapper{Array{Patchwork.DiamondSearchResult, 1}}, Int64, Tables.Schema{(:queryid, :translated_querysequence, :full_querysequence, :querystart, :queryend, :queryframe, :subjectid, :subjectsequence, :subjectstart, :subjectend, :cigar, :percentidentical, :bitscore), nothing}, Tuple{Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{String, 1}, Array{Float64, 1}, Array{Float64, 1}}, Int64, Base.RefValue{Any}})
precompile(Tuple{typeof(Tables.add_or_widen!), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64, Symbol, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Int64, Base.RefValue{Any}, Base.HasShape{1}})
precompile(Tuple{typeof(Tables.add_or_widen!), String, Int64, Symbol, Array{String, 1}, Int64, Base.RefValue{Any}, Base.HasShape{1}})
precompile(Tuple{Type{NamedTuple{(:queryid, :translated_querysequence, :full_querysequence, :querystart, :queryend, :queryframe, :subjectid, :subjectsequence, :subjectstart, :subjectend, :cigar, :percentidentical, :bitscore), T} where T<:Tuple}, Tuple{Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{String, 1}, Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{Type{Tables.CopiedColumns{T} where T}, NamedTuple{(:queryid, :translated_querysequence, :full_querysequence, :querystart, :queryend, :queryframe, :subjectid, :subjectsequence, :subjectstart, :subjectend, :cigar, :percentidentical, :bitscore), Tuple{Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{String, 1}, Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Tables.columnnames), Tables.CopiedColumns{NamedTuple{(:queryid, :translated_querysequence, :full_querysequence, :querystart, :queryend, :queryframe, :subjectid, :subjectsequence, :subjectstart, :subjectend, :cigar, :percentidentical, :bitscore), Tuple{Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{String, 1}, Array{Float64, 1}, Array{Float64, 1}}}}})
precompile(Tuple{typeof(Base.collect), Type{Symbol}, NTuple{13, Symbol}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:copycols,), Tuple{Nothing}}, typeof(DataFrames.fromcolumns), Tables.CopiedColumns{NamedTuple{(:queryid, :translated_querysequence, :full_querysequence, :querystart, :queryend, :queryframe, :subjectid, :subjectsequence, :subjectstart, :subjectend, :cigar, :percentidentical, :bitscore), Tuple{Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Patchwork.SequenceIdentifier, 1}, Array{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{String, 1}, Array{Float64, 1}, Array{Float64, 1}}}}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.length), Array{Patchwork.SequenceIdentifier, 1}})
precompile(Tuple{typeof(Base.length), Array{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, 1}})
precompile(Tuple{typeof(Base.length), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(DataFrames._preprocess_column), Array{Patchwork.SequenceIdentifier, 1}, Int64, Bool})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{Patchwork.SequenceIdentifier, 1}, Int64})
precompile(Tuple{typeof(DataFrames._preprocess_column), Array{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, 1}, Int64, Bool})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, 1}, Int64})
precompile(Tuple{typeof(DataFrames._preprocess_column), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Int64, Bool})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Int64})
precompile(Tuple{typeof(Base.firstindex), Array{Patchwork.SequenceIdentifier, 1}})
precompile(Tuple{typeof(Base.firstindex), Array{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, 1}})
precompile(Tuple{typeof(Base.firstindex), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Patchwork.var"#75#78", Array{String, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{String, 1}, Base.Generator{Array{String, 1}, Patchwork.var"#75#78"}})
precompile(Tuple{typeof(Base.depwarn), String, Symbol})
precompile(Tuple{Type{CSV.Options{D, N, DF, M, TF} where TF where M where DF where N where D}, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, Nothing, Bool, Tuple{}, typeof(CSV._identity), Bool})
precompile(Tuple{DataFrames.var"#874#875", Array{String, 1}})
precompile(Tuple{typeof(Base._array_for), Type{DataType}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{DataFrames.var"#874#875", Array{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, 1}})
precompile(Tuple{DataFrames.var"#874#875", Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{DataFrames.var"#874#875", Array{Int64, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Tables.var"#11#12"{Tuple{String, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64, Int64, Int64, String, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, Int64, Int64, String, Float64, Float64}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.Iterators.rest), Base.Generator{Base.UnitRange{Int64}, Tables.var"#11#12"{Tuple{String, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64, Int64, Int64, String, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, Int64, Int64, String, Float64, Float64}}}})
precompile(Tuple{typeof(Base._similar_shape), Base.Generator{Base.UnitRange{Int64}, Tables.var"#11#12"{Tuple{String, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64, Int64, Int64, String, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, Int64, Int64, String, Float64, Float64}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{Int64}, Tables.var"#11#12"{Tuple{String, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64, Int64, Int64, String, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, Int64, Int64, String, Float64, Float64}}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{DataType, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{DataType, Int64}, Int64, Int64})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:append, :compress, :header, :delim), Tuple{Bool, Bool, Bool, Char}}, typeof(CSV.write), Tables.Schema{(:queryid, :translated_querysequence, :full_querysequence, :querystart, :queryend, :queryframe, :subjectid, :subjectsequence, :subjectstart, :subjectend, :cigar, :percentidentical, :bitscore), Tuple{String, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64, Int64, Int64, String, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, Int64, Int64, String, Float64, Float64}}, DataFrames.DataFrameRows{DataFrames.DataFrame}, String, CSV.Options{UInt8, UInt8, Nothing, Tuple{}, typeof(CSV._identity)}})
precompile(Tuple{CSV.var"#107#108"{Bool, Bool, Tables.Schema{(:queryid, :translated_querysequence, :full_querysequence, :querystart, :queryend, :queryframe, :subjectid, :subjectsequence, :subjectstart, :subjectend, :cigar, :percentidentical, :bitscore), Tuple{String, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64, Int64, Int64, String, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, Int64, Int64, String, Float64, Float64}}, DataFrames.DataFrameRows{DataFrames.DataFrame}, CSV.Options{UInt8, UInt8, Nothing, Tuple{}, typeof(CSV._identity)}, Array{UInt8, 1}, Int64, Int64, NTuple{13, Symbol}}, Base.IOStream})
precompile(Tuple{typeof(CSV.writenames), Array{UInt8, 1}, Int64, Int64, Base.IOStream, NTuple{13, Symbol}, Int64, CSV.Options{UInt8, UInt8, Nothing, Tuple{}, typeof(CSV._identity)}})
precompile(Tuple{CSV.var"#114#115"{Array{UInt8, 1}, Base.RefValue{Int64}, Int64, Base.IOStream, Int64, CSV.Options{UInt8, UInt8, Nothing, Tuple{}, typeof(CSV._identity)}, UInt8, UInt8}, String, Int64, Symbol})
precompile(Tuple{typeof(Base.getindex), Array{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, 1}, Int64})
precompile(Tuple{CSV.var"#114#115"{Array{UInt8, 1}, Base.RefValue{Int64}, Int64, Base.IOStream, Int64, CSV.Options{UInt8, UInt8, Nothing, Tuple{}, typeof(CSV._identity)}, UInt8, UInt8}, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, Int64, Symbol})
precompile(Tuple{typeof(Base.getindex), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Int64})
precompile(Tuple{CSV.var"#114#115"{Array{UInt8, 1}, Base.RefValue{Int64}, Int64, Base.IOStream, Int64, CSV.Options{UInt8, UInt8, Nothing, Tuple{}, typeof(CSV._identity)}, UInt8, UInt8}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64, Symbol})
precompile(Tuple{CSV.var"#114#115"{Array{UInt8, 1}, Base.RefValue{Int64}, Int64, Base.IOStream, Int64, CSV.Options{UInt8, UInt8, Nothing, Tuple{}, typeof(CSV._identity)}, UInt8, UInt8}, Int64, Int64, Symbol})
precompile(Tuple{CSV.var"#114#115"{Array{UInt8, 1}, Base.RefValue{Int64}, Int64, Base.IOStream, Int64, CSV.Options{UInt8, UInt8, Nothing, Tuple{}, typeof(CSV._identity)}, UInt8, UInt8}, Float64, Int64, Symbol})
precompile(Tuple{typeof(Patchwork.selectsequence), String, Patchwork.SequenceIdentifier})
precompile(Tuple{typeof(Patchwork.cleancigar), String})
precompile(Tuple{typeof(Base.setindex!), Array{Patchwork.AlignedRegion, 1}, Patchwork.AlignedRegion, Int64})
precompile(Tuple{typeof(Base.lastindex), BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}})
precompile(Tuple{typeof(Patchwork.pairalign_local), BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, BioAlignments.AffineGapScoreModel{Int64}})
precompile(Tuple{typeof(BioAlignments.run!), BioAlignments.SmithWaterman{Int64}, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, BioAlignments.SubstitutionMatrix{BioSymbols.AminoAcid, Int64}, Int64, Int64})
precompile(Tuple{Type{BioAlignments.PairwiseAlignment{S1, S2} where S2 where S1}, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, String})
precompile(Tuple{typeof(Base.isempty), BioAlignments.PairwiseAlignment{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}}})
precompile(Tuple{typeof(Base.vect), BioAlignments.PairwiseAlignment{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}}})
precompile(Tuple{typeof(Base.push!), Array{BioAlignments.PairwiseAlignment{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}}, 1}, BioAlignments.PairwiseAlignment{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}}})
precompile(Tuple{typeof(Base.push!), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}})
precompile(Tuple{typeof(Patchwork.createbridgealignment), BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.push!), Array{BioAlignments.PairwiseAlignment{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}}, 1}, BioAlignments.PairwiseAlignment{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}}, BioAlignments.PairwiseAlignment{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}}})
precompile(Tuple{typeof(Patchwork.concatenate), Array{BioAlignments.PairwiseAlignment{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}}, 1}})
precompile(Tuple{typeof(Base.convert), Type{Tuple{BioAlignments.PairwiseAlignment{S1, S2} where S2 where S1, BioSequences.LongSequence{BioSequences.DNAAlphabet{N}} where N}}, Tuple{BioAlignments.PairwiseAlignment{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}})
precompile(Tuple{typeof(Patchwork.maskgaps), BioAlignments.PairwiseAlignment{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}})
precompile(Tuple{typeof(BioAlignments.run!), BioAlignments.NeedlemanWunsch{Int64}, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, BioAlignments.SubstitutionMatrix{BioSymbols.AminoAcid, Int64}, Int64, Int64})
precompile(Tuple{typeof(Patchwork.maskalignment), BioAlignments.PairwiseAlignment{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioAlignments.AffineGapScoreModel{Int64}, Bool, Bool})
precompile(Tuple{typeof(Base.push!), Array{Int64, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Patchwork.write_alignmentfile), String, Patchwork.SequenceIdentifier, Int64, BioAlignments.PairwiseAlignment{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}}, Int64})
precompile(Tuple{typeof(Patchwork.write_fasta), String, Patchwork.SequenceIdentifier, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}})
precompile(Tuple{typeof(Patchwork.write_fasta), String, Patchwork.SequenceIdentifier, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}})
precompile(Tuple{typeof(Patchwork.occupancy), BioAlignments.PairwiseAlignment{BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}, BioSequences.LongSequence{BioSequences.AminoAcidAlphabet}}})
precompile(Tuple{typeof(Base.push!), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.println), Base.TTY, String, Vararg{Any}})
precompile(Tuple{typeof(Base.print), Base.TTY, String, Int64, Vararg{Any}})
precompile(Tuple{typeof(Base.print), Base.TTY, Float64})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:delim,), Tuple{String}}, typeof(CSV.write), String, DataFrames.DataFrame})
precompile(Tuple{Type{CSV.Options{D, N, DF, M, TF} where TF where M where DF where N where D}, Tuple{UInt8}, UInt8, UInt8, UInt8, UInt8, UInt8, Nothing, Bool, Tuple{}, typeof(CSV._identity), Bool})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Tables.var"#11#12"{Tuple{String, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Float64, Float64}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.Iterators.rest), Base.Generator{Base.UnitRange{Int64}, Tables.var"#11#12"{Tuple{String, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Float64, Float64}}}})
precompile(Tuple{typeof(Base._similar_shape), Base.Generator{Base.UnitRange{Int64}, Tables.var"#11#12"{Tuple{String, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Float64, Float64}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{Int64}, Tables.var"#11#12"{Tuple{String, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Float64, Float64}}}})
precompile(Tuple{FASTX.FASTA.var"#13#15", FASTX.FASTA.Writer{TranscodingStreams.TranscodingStream{TranscodingStreams.Noop, Base.IOStream}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:append, :compress, :header, :delim), Tuple{Bool, Bool, Bool, String}}, typeof(CSV.write), Tables.Schema{(:id, :reference_len, :query_len, :regions, :contigs, :matches, :mismatches, :deletions, :query_coverage, :identity), Tuple{String, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Float64, Float64}}, DataFrames.DataFrameRows{DataFrames.DataFrame}, String, CSV.Options{Tuple{UInt8}, UInt8, Nothing, Tuple{}, typeof(CSV._identity)}})
precompile(Tuple{CSV.var"#107#108"{Bool, Bool, Tables.Schema{(:id, :reference_len, :query_len, :regions, :contigs, :matches, :mismatches, :deletions, :query_coverage, :identity), Tuple{String, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Float64, Float64}}, DataFrames.DataFrameRows{DataFrames.DataFrame}, CSV.Options{Tuple{UInt8}, UInt8, Nothing, Tuple{}, typeof(CSV._identity)}, Array{UInt8, 1}, Int64, Int64, NTuple{10, Symbol}}, Base.IOStream})
precompile(Tuple{typeof(CSV.writenames), Array{UInt8, 1}, Int64, Int64, Base.IOStream, NTuple{10, Symbol}, Int64, CSV.Options{Tuple{UInt8}, UInt8, Nothing, Tuple{}, typeof(CSV._identity)}})
precompile(Tuple{CSV.var"#114#115"{Array{UInt8, 1}, Base.RefValue{Int64}, Int64, Base.IOStream, Int64, CSV.Options{Tuple{UInt8}, UInt8, Nothing, Tuple{}, typeof(CSV._identity)}, Tuple{UInt8}, UInt8}, String, Int64, Symbol})
precompile(Tuple{CSV.var"#114#115"{Array{UInt8, 1}, Base.RefValue{Int64}, Int64, Base.IOStream, Int64, CSV.Options{Tuple{UInt8}, UInt8, Nothing, Tuple{}, typeof(CSV._identity)}, Tuple{UInt8}, UInt8}, Int64, Int64, Symbol})
precompile(Tuple{CSV.var"#114#115"{Array{UInt8, 1}, Base.RefValue{Int64}, Int64, Base.IOStream, Int64, CSV.Options{Tuple{UInt8}, UInt8, Nothing, Tuple{}, typeof(CSV._identity)}, Tuple{UInt8}, UInt8}, Float64, Int64, Symbol})
precompile(Tuple{typeof(Base._array_for), Type{Symbol}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{DataFrames.var"#76#84"{Array{Any, 1}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.copymutable), Array{Int64, 1}})
precompile(Tuple{typeof(Base.extrema), Array{Int64, 1}})
precompile(Tuple{DataFrames.var"#76#84"{Array{Any, 1}}, Array{Float64, 1}})
precompile(Tuple{typeof(Base._array_for), Type{Float64}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Int64, 1}, Float64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Real, 1}, Base.Generator{Array{Base.Dict{Symbol, Any}, 1}, DataFrames.var"#77#85"{Symbol}}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{Real, 1}, typeof(Base.:(!)), Symbol})
precompile(Tuple{typeof(Base.length), Array{Real, 1}})
precompile(Tuple{typeof(DataFrames._preprocess_column), Array{Symbol, 1}, Int64, Bool})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{Symbol, 1}, Int64})
precompile(Tuple{typeof(DataFrames._preprocess_column), Array{Real, 1}, Int64, Bool})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{Real, 1}, Int64})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.TTY, Pair{Symbol, Bool}})
precompile(Tuple{DataFrames.var"#874#875", Array{Symbol, 1}})
precompile(Tuple{DataFrames.var"#874#875", Array{Real, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Tables.var"#11#12"{Tuple{Symbol, Float64, Real, Float64, Real}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.Iterators.rest), Base.Generator{Base.UnitRange{Int64}, Tables.var"#11#12"{Tuple{Symbol, Float64, Real, Float64, Real}}}})
precompile(Tuple{typeof(Base._similar_shape), Base.Generator{Base.UnitRange{Int64}, Tables.var"#11#12"{Tuple{Symbol, Float64, Real, Float64, Real}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{Int64}, Tables.var"#11#12"{Tuple{Symbol, Float64, Real, Float64, Real}}}})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:variable, :mean, :min, :median, :max), Tuple{Symbol, Float64, Real, Float64, Real}}, Symbol})
precompile(Tuple{typeof(Base.vect), Type{Symbol}, Vararg{DataType}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{DataType, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(PrettyTables.compact_type_str), Tuple{Array{DataType, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(PrettyTables.compact_type_str), Tuple{Array{DataType, 1}}}})
precompile(Tuple{typeof(Base.get), Base.IOContext{Base.TTY}, Symbol, Nothing})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.IOContext{Base.TTY}, Pair{Symbol, Array{Any, 1}}})
precompile(Tuple{typeof(PrettyTables._pt_text), Base.IOContext{Base.TTY}, PrettyTables.PrintInfo})
precompile(Tuple{typeof(PrettyTables._convert_axes), Array{Symbol, 1}, Int64})
precompile(Tuple{typeof(Base.escape_string), Base.GenericIOBuffer{Array{UInt8, 1}}, String, String})
precompile(Tuple{typeof(Base.isassigned), Array{Symbol, 1}, Int64})
precompile(Tuple{typeof(Base.isassigned), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.isassigned), Array{Real, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Real, 1}, Int64})
precompile(Tuple{FASTX.FASTA.var"#14#16"{FASTX.FASTA.Writer{TranscodingStreams.TranscodingStream{TranscodingStreams.Noop, Base.IOStream}}}})
precompile(Tuple{typeof(Patchwork.plot_querycover), Array{Float64, 1}, String})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.identity), Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.print), Base.TTY, String, String, Vararg{Any}})
precompile(Tuple{typeof(Base.print), Base.TTY, UnicodePlots.Plot{UnicodePlots.BarplotGraphics{Int64, UnicodePlots.var"#8#9"{Char, Bool}, typeof(Base.identity)}, Base.Val{false}, Bool}})
precompile(Tuple{Type{NamedTuple{(:p_width, :color), T} where T<:Tuple}, Tuple{Int64, Crayons.Crayon}})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, UInt8})
precompile(Tuple{Plots.var"##bar#365", Base.Pairs{Symbol, V, Tuple{Vararg{Symbol, N}}, NamedTuple{names, T}} where T<:Tuple{Vararg{Any, N}} where names where N where V, typeof(Plots.bar), Any, Vararg{Any}})
precompile(Tuple{typeof(Core.kwcall), Any, typeof(RecipesBase.plot), Any, Any})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pairs{Symbol, Any, NTuple{5, Symbol}, NamedTuple{(:color, :title, :bar_width, :legend, :seriestype), Tuple{String, String, Float64, Bool, Symbol}}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Symbol, Any}, Symbol, Symbol})
precompile(Tuple{typeof(Base.copy), Base.Dict{Symbol, Any}})
precompile(Tuple{Type{RecipesBase.RecipeData}, Base.Dict{Symbol, Any}, Tuple{Array{String, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.iterate), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.iterate), Base.Dict{Symbol, Any}, Int64})
precompile(Tuple{typeof(Base.length), Array{Array{String, 1}, 1}})
precompile(Tuple{typeof(Base.length), Array{Array{Float64, 1}, 1}})
precompile(Tuple{typeof(Base.length), Array{Nothing, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Array{String, 1}, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Nothing, 1}, Int64})
precompile(Tuple{typeof(RecipesPipeline.plot_setup!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{typeof(PlotUtils.plot_color), ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(PlotUtils.plot_color), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(ColorTypes.alpha), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Base.:(>)), Float64, Int64})
precompile(Tuple{Type{Array{RecipesBase.AbstractLayout, 2}}, UndefInitializer, Int64, Int64})
precompile(Tuple{typeof(Base.merge), Base.Dict{Symbol, Any}, Base.Dict{Symbol, Any}})
precompile(Tuple{Type{PlotUtils.ColorPalette}, ColorSchemes.ColorScheme{Array{ColorTypes.RGB{Float64}, 1}, String, String}})
precompile(Tuple{typeof(Base.iterate), Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{typeof(Base.iterate), Array{Base.Dict{Symbol, Any}, 1}, Int64})
precompile(Tuple{typeof(Base.:(*)), Float64, Float64})
precompile(Tuple{Type{NamedTuple{(:inner,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.AbstractDict{Symbol, Any}, Type{Base.Val{:bar}}, Any, Any, Any})
precompile(Tuple{typeof(Plots._preprocess_barlike), RecipesPipeline.DefaultsDict, Array{String, 1}, Array{Float64, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Plots.var"#245#250"{RecipesPipeline.DefaultsDict}, Array{String, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{String, 1}, Base.Generator{Array{String, 1}, Plots.var"#245#250"{RecipesPipeline.DefaultsDict}}})
precompile(Tuple{Type{Array{Float64, 1}}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{String, 1}, Plots.var"#245#250"{RecipesPipeline.DefaultsDict}}, Int64})
precompile(Tuple{typeof(Base.eachindex), Array{Float64, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.isfinite), Tuple{Array{Float64, 1}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.isfinite), Tuple{Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.getindex), Base.BitArray{1}, Int64})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Tuple{Float64, Float64}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Array{Float64, 1}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Base.Dict{Any, Any}})
precompile(Tuple{typeof(RecipesPipeline.add_series!), Plots.Plot{Plots.GRBackend}, RecipesPipeline.DefaultsDict})
precompile(Tuple{typeof(Plots.get_series_color), String, Plots.Subplot{Plots.GRBackend}, Int64, Symbol})
precompile(Tuple{typeof(Base.convert), Type{Tuple{Float64, Float64}}, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Base.:(<=)), Float64, Float64})
precompile(Tuple{Type{Measures.BoundingBox{P1, P2} where P2<:(Tuple{Vararg{Measures.Measure, N}} where N) where P1<:(Tuple{Vararg{Measures.Measure, N}} where N)}, Vararg{Measures.Length{:mm, Float64}, 4}})
precompile(Tuple{typeof(Core.Compiler._typename), TypeVar})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Float64}, Float64})
precompile(Tuple{typeof(Plots._update_min_padding!), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{Type{NamedTuple{(:left, :top, :right, :bottom), T} where T<:Tuple}, NTuple{4, Base.RefValue{Measures.Length{:mm, Float64}}}})
precompile(Tuple{Type{NamedTuple{(:family, :pointsize, :valign, :halign, :rotation, :color), T} where T<:Tuple}, Tuple{String, Int64, Symbol, Symbol, Float64, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{typeof(Base.float), Float64})
precompile(Tuple{typeof(Base.Math.clamp), Float64, Int64, Int64})
precompile(Tuple{Plots.var"##gr_set_font#503", Symbol, Symbol, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Float64, typeof(Plots.gr_set_font), Plots.Font, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.:(/)), Float64, Int64})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Plots.get_ticks), Tuple{Base.RefValue{Plots.Subplot{Plots.GRBackend}}, Tuple{Plots.Axis, Plots.Axis, Plots.Axis}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Plots.get_ticks), Tuple{Base.RefValue{Plots.Subplot{Plots.GRBackend}}, Tuple{Plots.Axis, Plots.Axis, Plots.Axis}}}})
precompile(Tuple{typeof(Base.isfinite), Float64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Float64, Float64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Float64, Float64}, Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:k_min, :k_max), T} where T<:Tuple}, Tuple{Int64, Int64}})
precompile(Tuple{Type{Dates.Millisecond}, Dates.Second})
precompile(Tuple{Type{Dates.Millisecond}, Int64})
precompile(Tuple{typeof(Plots.get_ticks), Symbol, Array{Float64, 1}, Array{Any, 1}, Tuple{Float64, Float64}, Vararg{Any}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.string), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{String}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{String, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.string), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{Type{Int64}, Float64})
precompile(Tuple{typeof(Plots.get_labels), Symbol, Array{Float64, 1}, Symbol})
precompile(Tuple{typeof(Base.isequal), Char, Char})
precompile(Tuple{typeof(Base.replace), String, Pair{Char, String}})
precompile(Tuple{typeof(Base.replace), String, Pair{String, String}})
precompile(Tuple{typeof(Base.isempty), Array{Float64, 1}})
precompile(Tuple{typeof(Plots.gr_set_tickfont), Plots.Subplot{Plots.GRBackend}, Plots.Axis})
precompile(Tuple{Type{NamedTuple{(:rotation, :color), T} where T<:Tuple}, Tuple{Int64, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:rotation, :color), Tuple{Int64, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}}, typeof(Plots.gr_set_font), Plots.Font, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{Type{Array{NTuple{4, Measures.Length{:mm, Float64}}, 2}}, UndefInitializer, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Nothing, Unzip.var"#15#16"}})
precompile(Tuple{typeof(Base._iterator_upper_bound), Base.Generator{Nothing, Unzip.var"#15#16"}})
precompile(Tuple{typeof(Base.length), Base.Generator{Nothing, Unzip.var"#15#16"}})
precompile(Tuple{typeof(Base._similar_shape), Base.Generator{Nothing, Unzip.var"#15#16"}, Base.HasLength})
precompile(Tuple{typeof(Base.collect), Base.Generator{Nothing, Unzip.var"#15#16"}})
precompile(Tuple{typeof(Base.map), Function, Nothing})
precompile(Tuple{typeof(Base.first), Nothing})
precompile(Tuple{typeof(Base.collect_similar), Array{RecipesBase.AbstractLayout, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots._update_inset_padding!)}})
precompile(Tuple{typeof(Plots._update_inset_padding!), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Nothing, 2}, Nothing, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots._update_inset_padding!)}, Int64})
precompile(Tuple{Type{Array{Measures.Length{:mm, Float64}, 1}}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{Type{Array{Measures.Length{:mm, Float64}, 2}}, UndefInitializer, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:dims,), Tuple{Int64}}, typeof(Base.maximum), Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{Type{Array{Measures.Length{:pct, Float64}, 1}}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Base.float), Int64})
precompile(Tuple{Type{NamedTuple{(:update,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.getproperty), Base.KeySet{Symbol, Base.Dict{Symbol, Symbol}}, Symbol})
precompile(Tuple{Type{Signed}, UInt64})
precompile(Tuple{Type{NamedTuple{(:halign, :valign), T} where T<:Tuple}, Tuple{Symbol, Symbol}})
precompile(Tuple{Plots.var"#506#507"{Int64, Int64, Plots.GRViewport{Float64}}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.gr_get_legend_geometry), Plots.GRViewport{Float64}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{Type{NamedTuple{(:yoffset, :xoffset, :base_markersize, :base_factor, :has_title, :vertical, :entries, :column_layout, :space, :texth, :textw, :span, :pad, :dy, :dx, :w, :h), T} where T<:Tuple}, Tuple{Float64, Float64, Float64, Float64, Bool, Bool, Int64, Tuple{Int64, Int64}, Vararg{Float64, 9}}})
precompile(Tuple{typeof(Plots.gr_update_viewport_legend!), Plots.GRViewport{Float64}, Plots.Subplot{Plots.GRBackend}, NamedTuple{(:yoffset, :xoffset, :base_markersize, :base_factor, :has_title, :vertical, :entries, :column_layout, :space, :texth, :textw, :span, :pad, :dy, :dx, :w, :h), Tuple{Float64, Float64, Float64, Float64, Bool, Bool, Int64, Tuple{Int64, Int64}, Vararg{Float64, 9}}}})
precompile(Tuple{typeof(Base.:(>)), Float64, Float64})
precompile(Tuple{typeof(Plots.get_minor_ticks), Plots.Subplot{Plots.GRBackend}, Plots.Axis, Tuple{Array{Float64, 1}, Array{String, 1}}})
precompile(Tuple{Type{NamedTuple{(:ticks, :segments, :tick_segments, :grid_segments, :minorgrid_segments, :border_segments), T} where T<:Tuple}, Tuple{Tuple{Array{Float64, 1}, Array{String, 1}}, Vararg{Plots.Segments{Tuple{Float64, Float64}}, 5}}})
precompile(Tuple{typeof(Base.max), Int64, Float64})
precompile(Tuple{typeof(Plots.gr_label_ticks), Plots.Subplot{Plots.GRBackend}, Symbol, Tuple{Array{Float64, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.floor), Float64})
precompile(Tuple{typeof(Base.iseven), Int64})
precompile(Tuple{typeof(Plots._shape_data!), Base.Val{true}, Function, Function, Array{Float64, 1}, Tuple{Float64, Float64}, Int64})
precompile(Tuple{typeof(Plots.warn_on_attr_dim_mismatch), Plots.Series, Array{Float64, 1}, Array{Float64, 1}, Nothing, Base.Generator{Array{Any, 1}, Plots.var"#25#29"}})
precompile(Tuple{Plots.var"#30#33", Plots.SeriesSegment})
precompile(Tuple{typeof(Base._minimum), Array{Int64, 1}, Base.Colon})
precompile(Tuple{Plots.var"#31#34", Plots.SeriesSegment})
precompile(Tuple{typeof(Base._maximum), Array{Int64, 1}, Base.Colon})
precompile(Tuple{Type{Base.UnitRange{T} where T<:Real}, Int64, Int64})
precompile(Tuple{typeof(Base.getindex), Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.vcat), Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Plots.get_fillcolor), Plots.Series, Tuple{Float64, Float64}, Int64})
precompile(Tuple{typeof(Plots.gr_set_fill), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Plots.gr_set_fillstyle), Nothing})
precompile(Tuple{typeof(GR.fillarea), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{Type{NamedTuple{(:check,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Plots.gr_draw_segments), Plots.Series, Array{Float64, 1}, Array{Float64, 1}, Nothing, Nothing, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Plots.gr_draw_markers), Plots.Series, Array{Float64, 1}, Array{Float64, 1}, Nothing, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Plots.gr_draw_markers), Plots.Series, Array{Float64, 1}, Array{Float64, 1}, Nothing, Tuple{Float64, Float64}, Int64, Int64})
precompile(Tuple{typeof(Base.intersect), Base.OneTo{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Plots.gr_draw_marker), Plots.Series, Float64, Float64, Nothing, Tuple{Float64, Float64}, Int64, Int64, Int64, Symbol})
precompile(Tuple{typeof(Plots.gr_set_bordercolor), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Plots.gr_set_markercolor), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Plots.gr_set_transparency), Int64})
precompile(Tuple{typeof(GR.setmarkersize), Float64})
precompile(Tuple{typeof(Plots.gr_add_legend), Plots.Subplot{Plots.GRBackend}, NamedTuple{(:yoffset, :xoffset, :base_markersize, :base_factor, :has_title, :vertical, :entries, :column_layout, :space, :texth, :textw, :span, :pad, :dy, :dx, :w, :h), Tuple{Float64, Float64, Float64, Float64, Bool, Bool, Int64, Tuple{Int64, Int64}, Vararg{Float64, 9}}}, Plots.GRViewport{Float64}})
precompile(Tuple{typeof(Patchwork.plot_percentident), Array{Float64, 1}, Int64, String})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:palette, :title, :linecolor, :seriestype), Tuple{Symbol, String, String, Symbol}}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.AbstractDict{Symbol, Any}, Type{Base.Val{:pie}}, Any, Any, Any})
precompile(Tuple{typeof(Base.:(+)), Int64, Float64})
precompile(Tuple{typeof(Plots.get_series_color), Symbol, Plots.Subplot{Plots.GRBackend}, Int64, Symbol})
precompile(Tuple{typeof(Base.lastindex), Array{ColorTypes.RGB{Float64}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{ColorTypes.RGB{Float64}, 1}, Int64})
precompile(Tuple{typeof(Plots.check_aspect_ratio), Int64})
precompile(Tuple{typeof(Base.:(|>)), Tuple{Float64, Float64}, typeof(Base.collect)})
precompile(Tuple{typeof(Base.:(|>)), Array{Float64, 1}, typeof(Base.diff)})
precompile(Tuple{typeof(Base.max), Float64, Float64})
precompile(Tuple{typeof(Plots.d_point), Float64, Float64, Tuple{Float64, Float64}, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Base.setindex!), Array{Float64, 1}, Float64, Int64})
precompile(Tuple{typeof(Base.:(|>)), ColorTypes.RGBA{Float64}, typeof(Plots.gr_set_fill)})
precompile(Tuple{typeof(Plots.gr_polyline), Array{Float64, 1}, Array{Float64, 1}, Function})
precompile(Tuple{Plots.var"##gr_polyline#502", Symbol, Symbol, typeof(Plots.gr_polyline), Array{Float64, 1}, Array{Float64, 1}, typeof(GR.fillarea)})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:append, :compress, :header, :delim), Tuple{Bool, Bool, Bool, String}}, typeof(CSV.write), Tables.Schema{(:variable, :mean, :min, :median, :max), Tuple{Symbol, Float64, Real, Float64, Real}}, DataFrames.DataFrameRows{DataFrames.DataFrame}, String, CSV.Options{Tuple{UInt8}, UInt8, Nothing, Tuple{}, typeof(CSV._identity)}})
precompile(Tuple{CSV.var"#107#108"{Bool, Bool, Tables.Schema{(:variable, :mean, :min, :median, :max), Tuple{Symbol, Float64, Real, Float64, Real}}, DataFrames.DataFrameRows{DataFrames.DataFrame}, CSV.Options{Tuple{UInt8}, UInt8, Nothing, Tuple{}, typeof(CSV._identity)}, Array{UInt8, 1}, Int64, Int64, NTuple{5, Symbol}}, Base.IOStream})
precompile(Tuple{typeof(CSV.writenames), Array{UInt8, 1}, Int64, Int64, Base.IOStream, NTuple{5, Symbol}, Int64, CSV.Options{Tuple{UInt8}, UInt8, Nothing, Tuple{}, typeof(CSV._identity)}})
precompile(Tuple{CSV.var"#114#115"{Array{UInt8, 1}, Base.RefValue{Int64}, Int64, Base.IOStream, Int64, CSV.Options{Tuple{UInt8}, UInt8, Nothing, Tuple{}, typeof(CSV._identity)}, Tuple{UInt8}, UInt8}, Symbol, Int64, Symbol})
